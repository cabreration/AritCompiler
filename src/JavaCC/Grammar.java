/* Generated By:JavaCC: Do not edit this line. Grammar.java */
package JavaCC;
import APIServices.Node;

public class Grammar implements GrammarConstants {

/* Scanner End */
  final public Node Root() throws ParseException {
  Node root = new Node("root"); Node aux;
    label_1:
    while (true) {
      aux = Sentence();
                             root.addChildren(aux);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
    jj_consume_token(0);
                                                                 {if (true) return root;}
    throw new Error("Missing return statement in function");
  }

  final public Node Sentences_Block() throws ParseException {
  Node instruction; Node sentences = new Node("sentences");
    jj_consume_token(OPENING_C);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      instruction = Sentence();
                                             sentences.addChildren(instruction);
    }
    jj_consume_token(CLOSING_C);
                                                                                                    {if (true) return sentences;}
    throw new Error("Missing return statement in function");
  }

  final public Node Sentence() throws ParseException {
  Node instruction;
    instruction = Asignment();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
                                                 {if (true) return instruction;}
    throw new Error("Missing return statement in function");
  }

  final public Node First_Expression() throws ParseException {
    Third_Expression();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VALUE_ASIGNMENT:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      jj_consume_token(VALUE_ASIGNMENT);
      Third_Expression();
    }
  }

  final public void Third_Expression() throws ParseException {
    Fourth_Expression();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_4;
      }
      jj_consume_token(OR);
      Fourth_Expression();
    }
  }

  final public void Fourth_Expression() throws ParseException {
    Fifth_Expression();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_5;
      }
      jj_consume_token(AND);
      Fifth_Expression();
    }
  }

  final public void Fifth_Expression() throws ParseException {
    Sixth_Expression();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUALS:
      case NOT_EQUALS:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EQUALS:
        jj_consume_token(EQUALS);
        Sixth_Expression();
        break;
      case NOT_EQUALS:
        jj_consume_token(NOT_EQUALS);
        Sixth_Expression();
        break;
      default:
        jj_la1[7] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void Sixth_Expression() throws ParseException {
    Seventh_Expression();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case GREATER_EQUALS:
      case LESSER_EQUALS:
      case GREATER:
      case LESSER:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_7;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LESSER:
        jj_consume_token(LESSER);
        Seventh_Expression();
        break;
      case GREATER:
        jj_consume_token(GREATER);
        Seventh_Expression();
        break;
      case LESSER_EQUALS:
        jj_consume_token(LESSER_EQUALS);
        Seventh_Expression();
        break;
      case GREATER_EQUALS:
        jj_consume_token(GREATER_EQUALS);
        Seventh_Expression();
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void Seventh_Expression() throws ParseException {
    Eigth_Expression();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_8;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        Eigth_Expression();
        break;
      case MINUS:
        jj_consume_token(MINUS);
        Eigth_Expression();
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void Eigth_Expression() throws ParseException {
    Nineth_Expression();
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MOD:
      case TIMES:
      case DIV:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_9;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case TIMES:
        jj_consume_token(TIMES);
        Nineth_Expression();
        break;
      case DIV:
        jj_consume_token(DIV);
        Nineth_Expression();
        break;
      case MOD:
        jj_consume_token(MOD);
        Nineth_Expression();
        break;
      default:
        jj_la1[13] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void Nineth_Expression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
      jj_consume_token(MINUS);
      Nineth_Expression();
      break;
    case NOT:
      jj_consume_token(NOT);
      Nineth_Expression();
      break;
    case OPENING_P:
    case NULL_VALUE:
    case FALSE_VALUE:
    case TRUE_VALUE:
    case NUMBER_VALUE:
    case STRING_VALUE:
    case IDENTIFIER:
      Value();
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public Node Value() throws ParseException {
  Node aux; Token tok;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NULL_VALUE:
      tok = jj_consume_token(NULL_VALUE);
                                                                      {if (true) return new Node("null value", tok.beginLine, tok.beginColumn, null);}
      break;
    case FALSE_VALUE:
      tok = jj_consume_token(FALSE_VALUE);
                                                                      {if (true) return new Node("bool value", tok.beginLine, tok.beginColumn, false);}
      break;
    case TRUE_VALUE:
      tok = jj_consume_token(TRUE_VALUE);
                                                                      {if (true) return new Node("bool value", tok.beginLine, tok.beginColumn, true);}
      break;
    case NUMBER_VALUE:
      tok = jj_consume_token(NUMBER_VALUE);
                                                                      {if (true) return new Node("number value", tok.beginLine, tok.beginColumn, Double.parseDouble(tok.image));}
      break;
    case STRING_VALUE:
      tok = jj_consume_token(STRING_VALUE);
                                                                      {if (true) return new Node("string value", tok.beginLine, tok.beginColumn, tok.image);}
      break;
    case IDENTIFIER:
      tok = jj_consume_token(IDENTIFIER);
                                                                      {if (true) return new Node("identifier", tok.beginLine, tok.beginColumn, tok.image);}
      break;
    case OPENING_P:
      jj_consume_token(OPENING_P);
      aux = First_Expression();
      jj_consume_token(CLOSING_P);
                                                                      {if (true) return aux;}
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Node Asignment() throws ParseException {
  Token id;  Node exp; Node param; Node params = new Node("parameters"); Node ident; Node res; Node sent;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      id = jj_consume_token(IDENTIFIER);
      jj_consume_token(VALUE_ASIGNMENT);
      exp = First_Expression();
                                                                                    res = new Node("asignment");
                                                                                    ident = new Node("identifier", id.beginLine, id.beginColumn, id.image);
                                                                                    res.addChildren(ident);
                                                                                    res.addChildren(exp);
                                                                                    {if (true) return res;}
      break;
    default:
      jj_la1[17] = jj_gen;
      if (jj_2_1(3)) {
        id = jj_consume_token(IDENTIFIER);
        jj_consume_token(VALUE_ASIGNMENT);
        jj_consume_token(FUNCTION_KEYWORD);
        jj_consume_token(OPENING_P);
        label_10:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case IDENTIFIER:
            ;
            break;
          default:
            jj_la1[16] = jj_gen;
            break label_10;
          }
          param = Parameter();
                                             params.addChildren(param);
        }
        jj_consume_token(CLOSING_P);
        sent = Sentences_Block();
                                                                                    res = new Node("function");
                                                                                    ident = new Node("identifier", id.beginLine, id.beginColumn, id.image);
                                                                                    res.addChildren(ident);
                                                                                    res.addChildren(params);
                                                                                    res.addChildren(sent);
                                                                                    {if (true) return res;}
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Node Parameter() throws ParseException {
  Token tok; Node res; Node id; Node exp;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      tok = jj_consume_token(IDENTIFIER);
                                                                                  {if (true) return new Node("identifier", tok.beginLine, tok.beginColumn, tok.image);}
      break;
    default:
      jj_la1[18] = jj_gen;
      if (jj_2_2(2)) {
        tok = jj_consume_token(IDENTIFIER);
        jj_consume_token(VALUE_ASIGNMENT);
        exp = First_Expression();
                                                                                    res = new Node("asignment");
                                                                                    id = new Node("identifier", tok.beginLine, tok.beginColumn, tok.image);
                                                                                    res.addChildren(id);
                                                                                    res.addChildren(exp);
                                                                                    {if (true) return res;}
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_3_1() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(VALUE_ASIGNMENT)) return true;
    if (jj_scan_token(FUNCTION_KEYWORD)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(VALUE_ASIGNMENT)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public GrammarTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  /** Whether we are looking ahead. */
  private boolean jj_lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[19];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x1000000,0x10000,0x0,0x0,0x1800,0x1800,0xc0006000,0xc0006000,0x6000000,0x6000000,0x18000400,0x18000400,0x4020000,0x20000,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x4000000,0x4000000,0x0,0x0,0x4,0x2,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x59c0001,0x59c0000,0x4000000,0x4000000,0x4000000,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[2];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Grammar(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Grammar(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new GrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Grammar(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new GrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Grammar(GrammarTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(GrammarTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[59];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 19; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 59; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

                      }
