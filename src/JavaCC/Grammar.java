/* Generated By:JavaCC: Do not edit this line. Grammar.java */
package JavaCC;
import APIServices.Node;

public class Grammar implements GrammarConstants {
    private String scape(String cadena) {
        StringBuilder builder = new StringBuilder(cadena);
        builder.deleteCharAt(0);
        builder.deleteCharAt(builder.length() - 1);

        String next = builder.toString();
        next = next.replace("\\t", "\t");
        next = next.replace("\\n", "\n");
        next = next.replace("\\r", "\r");
        next = next.replace("\\\"", "\"");
        next = next.replace("\\\\", "\\");
        return next;
    }

/* Scanner End */
  final public Node Root() throws ParseException {
  Node root = new Node("root"); Node sentences = new Node("sentences"); Node aux;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF_KEYWORD:
      case SWITCH_KEYWORD:
      case BREAK_KEYWORD:
      case WHILE_KEYWORD:
      case DO_KEYWORD:
      case FOR_KEYWORD:
      case CONTINUE_KEYWORD:
      case RETURN_KEYWORD:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      aux = Sentence();
                             sentences.addChildren(aux);
    }
    jj_consume_token(0);
                                                                      root.addChildren(sentences); {if (true) return root;}
    throw new Error("Missing return statement in function");
  }

  final public Node Sentences_Block() throws ParseException {
  Node instruction; Node sentences = new Node("sentences");
    jj_consume_token(OPENING_C);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF_KEYWORD:
      case SWITCH_KEYWORD:
      case BREAK_KEYWORD:
      case WHILE_KEYWORD:
      case DO_KEYWORD:
      case FOR_KEYWORD:
      case CONTINUE_KEYWORD:
      case RETURN_KEYWORD:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      instruction = Sentence();
                                             sentences.addChildren(instruction);
    }
    jj_consume_token(CLOSING_C);
                                                                                                    {if (true) return sentences;}
    throw new Error("Missing return statement in function");
  }

  final public Node Sentence() throws ParseException {
  Node instruction;
    if (jj_2_1(2)) {
      instruction = Asignment();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
                                                     {if (true) return instruction;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF_KEYWORD:
        instruction = If();
                             {if (true) return instruction;}
        break;
      case SWITCH_KEYWORD:
        instruction = Switch();
                                 {if (true) return instruction;}
        break;
      case WHILE_KEYWORD:
        instruction = While();
                                {if (true) return instruction;}
        break;
      case DO_KEYWORD:
        instruction = Do_While();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SEMICOLON:
          jj_consume_token(SEMICOLON);
          break;
        default:
          jj_la1[3] = jj_gen;
          ;
        }
                                                    {if (true) return instruction;}
        break;
      case FOR_KEYWORD:
        instruction = For();
                              {if (true) return instruction;}
        break;
      case RETURN_KEYWORD:
        instruction = Return();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SEMICOLON:
          jj_consume_token(SEMICOLON);
          break;
        default:
          jj_la1[4] = jj_gen;
          ;
        }
                                                  {if (true) return instruction;}
        break;
      case BREAK_KEYWORD:
        instruction = Break();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SEMICOLON:
          jj_consume_token(SEMICOLON);
          break;
        default:
          jj_la1[5] = jj_gen;
          ;
        }
                                                 {if (true) return instruction;}
        break;
      case CONTINUE_KEYWORD:
        instruction = Continue();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SEMICOLON:
          jj_consume_token(SEMICOLON);
          break;
        default:
          jj_la1[6] = jj_gen;
          ;
        }
                                                    {if (true) return instruction;}
        break;
      default:
        jj_la1[8] = jj_gen;
        if (jj_2_2(2)) {
          instruction = Function_Call();
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SEMICOLON:
            jj_consume_token(SEMICOLON);
            break;
          default:
            jj_la1[7] = jj_gen;
            ;
          }
                                                         {if (true) return instruction;}
        } else {
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Node First_Expression() throws ParseException {
  Node exp1; Node exp;
    exp1 = Second_Expression();
    exp = PFirst_Expression(exp1);
      {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Node PFirst_Expression(Node inherited) throws ParseException {
  Node exp1; Node op; Token v; Node res; Node bin;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VALUE_ASIGNMENT:
      v = jj_consume_token(VALUE_ASIGNMENT);
      exp1 = Second_Expression();
                                                        bin = new Node("binary expression");
                                                        op = new Node("=", v.beginLine, v.beginColumn, null);
                                                        op.addChildren(inherited);
      res = PFirst_Expression(exp1);
                                                                                        op.addChildren(res); bin.addChildren(op); {if (true) return bin;}
      break;
    default:
      jj_la1[9] = jj_gen;
          {if (true) return inherited;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Node Second_Expression() throws ParseException {
  Node exp1; Node exp2;
    exp1 = Third_Expression();
    exp2 = PSecond_Expression(exp1);
                                                                 {if (true) return exp2;}
    throw new Error("Missing return statement in function");
  }

  final public Node PSecond_Expression(Node inherited) throws ParseException {
  Node exp1; Node exp2; Node op1; Node op2; Token v1; Token v2; Node res1; Node res2; Node ter;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TERNARY:
      v1 = jj_consume_token(TERNARY);
      exp1 = Third_Expression();
                                                            ter = new Node("ternary expression");
                                                            op1 = new Node("?", v1.beginLine, v1.beginColumn, null);
                                                            op1.addChildren(inherited);
      res1 = PSecond_Expression(exp1);
      v2 = jj_consume_token(COLON);
      exp2 = Third_Expression();
                                                            op2 = new Node(":", v2.beginLine, v2.beginColumn, null);
                                                            op2.addChildren(res1);
      res2 = PSecond_Expression(exp2);
                                                            op2.addChildren(res2);
                                                            ter.addChildren(op1);
                                                            ter.addChildren(op2);
                                                            {if (true) return ter;}
      break;
    default:
      jj_la1[10] = jj_gen;
          {if (true) return inherited;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Node Third_Expression() throws ParseException {
  Node exp1; Node exp;
    exp1 = Fourth_Expression();
    exp = PThird_Expression(exp1);
      {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Node PThird_Expression(Node inherited) throws ParseException {
  Node exp1; Node op; Token v; Node res; Node bin;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OR:
      v = jj_consume_token(OR);
      exp1 = Fourth_Expression();
                                                bin = new Node("binary expression");
                                                op = new Node("|", v.beginLine, v.beginColumn, null);
                                                op.addChildren(inherited);
      res = PThird_Expression(exp1);
                                                                                op.addChildren(res); bin.addChildren(op); {if (true) return bin;}
      break;
    default:
      jj_la1[11] = jj_gen;
          {if (true) return inherited;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Node Fourth_Expression() throws ParseException {
  Node exp1; Node exp;
    exp1 = Fifth_Expression();
    exp = PFourth_Expression(exp1);
      {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Node PFourth_Expression(Node inherited) throws ParseException {
  Node exp1; Node op; Token v; Node res; Node bin;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AND:
      v = jj_consume_token(AND);
      exp1 = Fifth_Expression();
                                            bin = new Node("binary expression");
                                            op = new Node("&", v.beginLine, v.beginColumn, null);
                                            op.addChildren(inherited);
      res = PFourth_Expression(exp1);
                                                                             op.addChildren(res); bin.addChildren(op); {if (true) return bin;}
      break;
    default:
      jj_la1[12] = jj_gen;
          {if (true) return inherited;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Node Fifth_Expression() throws ParseException {
  Node exp1; Node exp;
    exp1 = Sixth_Expression();
    exp = PFifth_Expression(exp1);
      {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Node PFifth_Expression(Node inherited) throws ParseException {
  Node exp1; Node op; Token v; Node res; Node bin;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUALS:
      v = jj_consume_token(EQUALS);
      exp1 = Sixth_Expression();
                                                    bin = new Node("binary expression");
                                                    op = new Node("==", v.beginLine, v.beginColumn, null);
                                                    op.addChildren(inherited);
      res = PFifth_Expression(exp1);
                                                                                    op.addChildren(res); bin.addChildren(op); {if (true) return bin;}
      break;
    case NOT_EQUALS:
      v = jj_consume_token(NOT_EQUALS);
      exp1 = Sixth_Expression();
                                                        bin = new Node("binary expression");
                                                        op = new Node("!=", v.beginLine, v.beginColumn, null);
                                                        op.addChildren(inherited);
      res = PFifth_Expression(exp1);
                                                                                        op.addChildren(res); bin.addChildren(op); {if (true) return bin;}
      break;
    default:
      jj_la1[13] = jj_gen;
          {if (true) return inherited;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Node Sixth_Expression() throws ParseException {
  Node exp1; Node exp;
    exp1 = Seventh_Expression();
    exp = PSixth_Expression(exp1);
      {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Node PSixth_Expression(Node inherited) throws ParseException {
  Node exp1; Node op; Token v; Node res; Node bin;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LESSER:
      v = jj_consume_token(LESSER);
      exp1 = Seventh_Expression();
                                                        bin = new Node("binary expression");
                                                        op = new Node("<", v.beginLine, v.beginColumn, null);
                                                        op.addChildren(inherited);
      res = PSixth_Expression(exp1);
                                                                                        op.addChildren(res); bin.addChildren(op); {if (true) return bin;}
      break;
    case GREATER:
      v = jj_consume_token(GREATER);
      exp1 = Seventh_Expression();
                                                        bin = new Node("binary expression");
                                                        op = new Node(">", v.beginLine, v.beginColumn, null);
                                                        op.addChildren(inherited);
      res = PSixth_Expression(exp1);
                                                                                        op.addChildren(res); bin.addChildren(op); {if (true) return bin;}
      break;
    case LESSER_EQUALS:
      v = jj_consume_token(LESSER_EQUALS);
      exp1 = Seventh_Expression();
                                                                bin = new Node("binary expression");
                                                                op = new Node("<=", v.beginLine, v.beginColumn, null);
                                                                op.addChildren(inherited);
      res = PSixth_Expression(exp1);
                                                                                                op.addChildren(res); bin.addChildren(op); {if (true) return bin;}
      break;
    case GREATER_EQUALS:
      v = jj_consume_token(GREATER_EQUALS);
      exp1 = Seventh_Expression();
                                                                bin = new Node("binary expression");
                                                                op = new Node(">=", v.beginLine, v.beginColumn, null);
                                                                op.addChildren(inherited);
      res = PSixth_Expression(exp1);
                                                                                                op.addChildren(res); bin.addChildren(op); {if (true) return bin;}
      break;
    default:
      jj_la1[14] = jj_gen;
          {if (true) return inherited;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Node Seventh_Expression() throws ParseException {
  Node exp1; Node exp;
    exp1 = Eigth_Expression();
    exp = PSeventh_Expression(exp1);
      {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Node PSeventh_Expression(Node inherited) throws ParseException {
  Node exp1; Node op; Token v; Node res; Node bin;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      v = jj_consume_token(PLUS);
      exp1 = Eigth_Expression();
                                                    bin = new Node("binary expression");
                                                    op = new Node("+", v.beginLine, v.beginColumn, null);
                                                    op.addChildren(inherited);
      res = PSeventh_Expression(exp1);
                                                                                      op.addChildren(res); bin.addChildren(op); {if (true) return bin;}
      break;
    case MINUS:
      v = jj_consume_token(MINUS);
      exp1 = Eigth_Expression();
                                                        bin = new Node("binary expression");
                                                        op = new Node("-", v.beginLine, v.beginColumn, null);
                                                        op.addChildren(inherited);
      res = PSeventh_Expression(exp1);
                                                                                          op.addChildren(res); bin.addChildren(op); {if (true) return bin;}
      break;
    default:
      jj_la1[15] = jj_gen;
          {if (true) return inherited;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Node Eigth_Expression() throws ParseException {
  Node exp1; Node exp;
    exp1 = Nineth_Expression();
    exp = PEigth_Expression(exp1);
      {if (true) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Node PEigth_Expression(Node inherited) throws ParseException {
  Node exp1; Node op; Token v; Node res; Node bin;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TIMES:
      v = jj_consume_token(TIMES);
      exp1 = Nineth_Expression();
                                                    bin = new Node("binary expression");
                                                    op = new Node("*", v.beginLine, v.beginColumn, null);
                                                    op.addChildren(inherited);
      res = PEigth_Expression(exp1);
                                                                                    op.addChildren(res); bin.addChildren(op); {if (true) return bin;}
      break;
    case DIV:
      v = jj_consume_token(DIV);
      exp1 = Nineth_Expression();
                                                    bin = new Node("binary expression");
                                                    op = new Node("/", v.beginLine, v.beginColumn, null);
                                                    op.addChildren(inherited);
      res = PEigth_Expression(exp1);
                                                                                    op.addChildren(res); bin.addChildren(op); {if (true) return bin;}
      break;
    case MOD:
      v = jj_consume_token(MOD);
      exp1 = Nineth_Expression();
                                                    bin = new Node("binary expression");
                                                    op = new Node("%%", v.beginLine, v.beginColumn, null);
                                                    op.addChildren(inherited);
      res = PEigth_Expression(exp1);
                                                                                    op.addChildren(res); bin.addChildren(op); {if (true) return bin;}
      break;
    default:
      jj_la1[16] = jj_gen;
          {if (true) return inherited;}
    }
    throw new Error("Missing return statement in function");
  }

  final public Node Nineth_Expression() throws ParseException {
  Node res; Node min; Token t; Node exp;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
      t = jj_consume_token(MINUS);
      exp = Nineth_Expression();
                                                    res = new Node("unary expression");
                                                    min = new Node("-", t.beginLine, t.beginColumn, null);
                                                    min.addChildren(exp);
                                                    res.addChildren(min);
                                                    {if (true) return res;}
      break;
    case NOT:
      t = jj_consume_token(NOT);
      exp = Nineth_Expression();
                                                    res = new Node("unary expression");
                                                    min = new Node("!", t.beginLine, t.beginColumn, null);
                                                    min.addChildren(exp);
                                                    res.addChildren(min);
                                                    {if (true) return res;}
      break;
    case OPENING_P:
    case NULL_VALUE:
    case FALSE_VALUE:
    case TRUE_VALUE:
    case NUMERIC_VALUE:
    case INTEGER_VALUE:
    case STRING_VALUE:
    case IDENTIFIER:
      res = Value();
                        {if (true) return res;}
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Node Value() throws ParseException {
  Node aux; Token tok;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NULL_VALUE:
      tok = jj_consume_token(NULL_VALUE);
                                                                      {if (true) return new Node("null value", tok.beginLine, tok.beginColumn, null);}
      break;
    case FALSE_VALUE:
      tok = jj_consume_token(FALSE_VALUE);
                                                                      {if (true) return new Node("bool value", tok.beginLine, tok.beginColumn, false);}
      break;
    case TRUE_VALUE:
      tok = jj_consume_token(TRUE_VALUE);
                                                                      {if (true) return new Node("bool value", tok.beginLine, tok.beginColumn, true);}
      break;
    case NUMERIC_VALUE:
      tok = jj_consume_token(NUMERIC_VALUE);
                                                                      {if (true) return new Node("numeric value", tok.beginLine, tok.beginColumn, Double.parseDouble(tok.image));}
      break;
    case INTEGER_VALUE:
      tok = jj_consume_token(INTEGER_VALUE);
                                                                      {if (true) return new Node("integer value", tok.beginLine, tok.beginColumn, Integer.parseInt(tok.image));}
      break;
    case STRING_VALUE:
      tok = jj_consume_token(STRING_VALUE);
                                                                      {if (true) return new Node("string value", tok.beginLine, tok.beginColumn, scape(tok.image));}
      break;
    default:
      jj_la1[18] = jj_gen;
      if (jj_2_3(4)) {
        aux = Matrix_Access();
                                                                      {if (true) return aux;}
      } else if (jj_2_4(2)) {
        aux = Vector_Access();
                                                                      {if (true) return aux;}
      } else if (jj_2_5(2)) {
        aux = Function_Call();
                                                                      {if (true) return aux;}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OPENING_P:
          jj_consume_token(OPENING_P);
          aux = First_Expression();
          jj_consume_token(CLOSING_P);
                                                                      {if (true) return aux;}
          break;
        case IDENTIFIER:
          tok = jj_consume_token(IDENTIFIER);
                                                                      {if (true) return new Node("identifier", tok.beginLine, tok.beginColumn, tok.image.toLowerCase());}
          break;
        default:
          jj_la1[19] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Node Asignment() throws ParseException {
  Node previous; Token id; Token v; Node vec; Node mat;
    if (jj_2_6(2)) {
      id = jj_consume_token(IDENTIFIER);
      v = jj_consume_token(VALUE_ASIGNMENT);
      previous = Asignment_Options();
                                                                                        Node identifier = new Node("identifier", id.beginLine, id.beginColumn, id.image);
                                                                                        previous.addChildrenAt(0, identifier);
                                                                                        previous.setRow(v.beginLine);
                                                                                        previous.setColumn(v.beginColumn);
                                                                                        {if (true) return previous;}
    } else if (jj_2_7(4)) {
      mat = Matrix_Access();
      v = jj_consume_token(VALUE_ASIGNMENT);
      previous = First_Expression();
                                                                                        Node as = new Node("matrix asignment", v.beginLine, v.beginColumn, null);
                                                                                        as.addChildren(mat);
                                                                                        as.addChildren(previous);
                                                                                        {if (true) return as;}
    } else if (jj_2_8(2)) {
      vec = Vector_Access();
      v = jj_consume_token(VALUE_ASIGNMENT);
      previous = First_Expression();
                                                                                        Node as = new Node("structure asignment");
                                                                                        as.addChildren(vec);
                                                                                        as.addChildren(previous);
                                                                                        {if (true) return as;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Node Asignment_Options() throws ParseException {
  Node exp; Node param = null; Node params = null; Node sent; boolean flag = false;
    if (jj_2_9(4)) {
      jj_consume_token(OPENING_P);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFIER:
        param = Parameter();
                                            flag = true;
        break;
      default:
        jj_la1[20] = jj_gen;
        ;
      }
      jj_consume_token(CLOSING_P);
      jj_consume_token(ARROW);
      sent = Sentences_Block();
                                                                                    Node res = new Node("asignment");
                                                                                    Node arr = new Node("arrow def");
                                                                                    if (flag) {
                                                                                        params = new Node("parameters");
                                                                                        params.addChildren(param);
                                                                                        arr.addChildren(params);
                                                                                    }
                                                                                    arr.addChildren(sent);
                                                                                    res.addChildren(arr);
                                                                                    {if (true) return res;}
    } else if (jj_2_10(3)) {
      jj_consume_token(OPENING_P);
      param = Parameter();
      jj_consume_token(COMMA);
      params = Parameters_List();
      jj_consume_token(CLOSING_P);
      jj_consume_token(ARROW);
      sent = Sentences_Block();
                                                                                    Node res = new Node("arrow function");
                                                                                    Node arr = new Node("arrow def");
                                                                                    params.addChildrenAt(0, param);
                                                                                    arr.addChildren(params);
                                                                                    arr.addChildren(sent);
                                                                                    res.addChildren(arr);
                                                                                    {if (true) return res;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case FUNCTION_KEYWORD:
        jj_consume_token(FUNCTION_KEYWORD);
        jj_consume_token(OPENING_P);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case IDENTIFIER:
          params = Parameters_List();
          break;
        default:
          jj_la1[21] = jj_gen;
          ;
        }
        jj_consume_token(CLOSING_P);
        sent = Sentences_Block();
                                                                                    Node res = new Node("function");
                                                                                    if (params != null)
                                                                                        res.addChildren(params);
                                                                                    res.addChildren(sent);
                                                                                    {if (true) return res;}
        break;
      case OPENING_P:
      case MINUS:
      case NOT:
      case NULL_VALUE:
      case FALSE_VALUE:
      case TRUE_VALUE:
      case NUMERIC_VALUE:
      case INTEGER_VALUE:
      case STRING_VALUE:
      case IDENTIFIER:
        exp = First_Expression();
                                                                                    res = new Node("asignment");
                                                                                    res.addChildren(exp);
                                                                                    {if (true) return res;}
        break;
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Node Parameters_List() throws ParseException {
  Node params = new Node("parameters"); Node aux;
    aux = Parameter();
                        params.addChildren(aux);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[23] = jj_gen;
        break label_3;
      }
      jj_consume_token(COMMA);
      aux = Parameter();
                                                                                 params.addChildren(aux);
    }
                                                                                                                 {if (true) return params;}
    throw new Error("Missing return statement in function");
  }

  final public Node Parameter() throws ParseException {
  Token tok; Node res; Node id; Node exp = null; boolean flag = false;
    tok = jj_consume_token(IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VALUE_ASIGNMENT:
      jj_consume_token(VALUE_ASIGNMENT);
      exp = First_Expression();
                                                                          flag = true;
      break;
    default:
      jj_la1[24] = jj_gen;
      ;
    }
            if (!flag) {
                {if (true) return new Node("identifier", tok.beginLine, tok.beginColumn, tok.image);}
            }
            else {
                res = new Node("asignment");
                id = new Node("identifier", tok.beginLine, tok.beginColumn, tok.image);
                res.addChildren(id);
                res.addChildren(exp);
                {if (true) return res;}
            }
    throw new Error("Missing return statement in function");
  }

  final public Node If() throws ParseException {
  Token i; Node elseNode = null; boolean flag = false; Node sentences; Node condition;
    i = jj_consume_token(IF_KEYWORD);
    jj_consume_token(OPENING_P);
    condition = First_Expression();
    jj_consume_token(CLOSING_P);
    sentences = Sentences_Block();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE_KEYWORD:
      elseNode = Else();
                          flag = true;
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
                                                                        Node ifNode = new Node("if sentence", i.beginLine, i.beginColumn, null);
                                                                        Node cond = new Node("condition");
                                                                        cond.addChildren(condition);
                                                                        ifNode.addChildren(cond);
                                                                        ifNode.addChildren(sentences);
                                                                        if (flag)
                                                                            ifNode.addChildren(elseNode);
                                                                        {if (true) return ifNode;}
    throw new Error("Missing return statement in function");
  }

  final public Node Else() throws ParseException {
  Token e; Node ifNode = null; Node sentences = null;
    if (jj_2_11(2)) {
      e = jj_consume_token(ELSE_KEYWORD);
      sentences = Sentences_Block();
                                                                        Node elseNode = new Node("else sentence", e.beginLine, e.beginColumn, null);
                                                                        elseNode.addChildren(sentences);
                                                                        {if (true) return elseNode;}
    } else if (jj_2_12(2)) {
      e = jj_consume_token(ELSE_KEYWORD);
      ifNode = If();
                                                                        Node elseNode = new Node("else sentence", e.beginLine, e.beginColumn, null);
                                                                        for (Node child : ifNode.getChildren())
                                                                            elseNode.addChildren(child);
                                                                        {if (true) return elseNode;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Node Switch() throws ParseException {
 Token s; Node val; Node body;
    s = jj_consume_token(SWITCH_KEYWORD);
    jj_consume_token(OPENING_P);
    val = First_Expression();
    jj_consume_token(CLOSING_P);
    jj_consume_token(OPENING_C);
    body = Switch_Body();
    jj_consume_token(CLOSING_C);
                                                                                    Node switchNode = new Node("switch sentence", s.beginLine, s.beginColumn, null);
                                                                                    Node condition = new Node("condition");
                                                                                    condition.addChildren(val);
                                                                                    switchNode.addChildren(condition);
                                                                                    switchNode.addChildren(body);
                                                                                    {if (true) return switchNode;}
    throw new Error("Missing return statement in function");
  }

  final public Node Switch_Body() throws ParseException {
  Node cases; Node def = null; boolean flag = false;
    cases = Cases_List();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DEFAULT_KEYWORD:
      def = Default_Case();
                                                  flag = true;
      break;
    default:
      jj_la1[26] = jj_gen;
      ;
    }
                                                                                    if (flag)
                                                                                        cases.addChildren(def);
                                                                                    {if (true) return cases;}
    throw new Error("Missing return statement in function");
  }

  final public Node Cases_List() throws ParseException {
  Node casesNode = new Node("cases_list"); Node single;
    label_4:
    while (true) {
      single = Single_Case();
                               casesNode.addChildren(single);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CASE_KEYWORD:
        ;
        break;
      default:
        jj_la1[27] = jj_gen;
        break label_4;
      }
    }
                                                                                  {if (true) return casesNode;}
    throw new Error("Missing return statement in function");
  }

  final public Node Single_Case() throws ParseException {
  Token c; Node exp; Node sentences = new Node("sentences"); Node sentence;
    c = jj_consume_token(CASE_KEYWORD);
    exp = First_Expression();
    jj_consume_token(COLON);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF_KEYWORD:
      case SWITCH_KEYWORD:
      case BREAK_KEYWORD:
      case WHILE_KEYWORD:
      case DO_KEYWORD:
      case FOR_KEYWORD:
      case CONTINUE_KEYWORD:
      case RETURN_KEYWORD:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[28] = jj_gen;
        break label_5;
      }
      sentence = Sentence();
                              sentences.addChildren(sentence);
    }
                                                                                    Node single = new Node("case", c.beginLine, c.beginColumn, null);
                                                                                    Node condition = new Node("value");
                                                                                    condition.addChildren(exp);
                                                                                    single.addChildren(condition);
                                                                                    single.addChildren(sentences);
                                                                                    {if (true) return single;}
    throw new Error("Missing return statement in function");
  }

  final public Node Default_Case() throws ParseException {
  Token d; Node sentences = new Node("sentences"); Node sentence;
    d = jj_consume_token(DEFAULT_KEYWORD);
    jj_consume_token(COLON);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IF_KEYWORD:
      case SWITCH_KEYWORD:
      case BREAK_KEYWORD:
      case WHILE_KEYWORD:
      case DO_KEYWORD:
      case FOR_KEYWORD:
      case CONTINUE_KEYWORD:
      case RETURN_KEYWORD:
      case IDENTIFIER:
        ;
        break;
      default:
        jj_la1[29] = jj_gen;
        break label_6;
      }
      sentence = Sentence();
                              sentences.addChildren(sentence);
    }
                                                                                    Node defaultNode = new Node("default", d.beginLine, d.beginColumn, null);
                                                                                    defaultNode.addChildren(sentences);
                                                                                    {if (true) return defaultNode;}
    throw new Error("Missing return statement in function");
  }

  final public Node While() throws ParseException {
  Token w; Node exp; Node actions;
    w = jj_consume_token(WHILE_KEYWORD);
    jj_consume_token(OPENING_P);
    exp = First_Expression();
    jj_consume_token(CLOSING_P);
    actions = Sentences_Block();
                                                        Node whileNode = new Node("while sentence", w.beginLine, w.beginColumn, null);
                                                        Node condition = new Node("condition");
                                                        condition.addChildren(exp);
                                                        whileNode.addChildren(condition);
                                                        whileNode.addChildren(actions);
                                                        {if (true) return whileNode;}
    throw new Error("Missing return statement in function");
  }

  final public Node Do_While() throws ParseException {
  Token d; Node actions; Node exp;
    d = jj_consume_token(DO_KEYWORD);
    actions = Sentences_Block();
    jj_consume_token(WHILE_KEYWORD);
    jj_consume_token(OPENING_P);
    exp = First_Expression();
    jj_consume_token(CLOSING_P);
                                                            Node doNode = new Node("do while sentence", d.beginLine, d.beginColumn, null);
                                                            Node condition = new Node("condition");
                                                            condition.addChildren(exp);
                                                            doNode.addChildren(actions);
                                                            doNode.addChildren(condition);
                                                            {if (true) return doNode;}
    throw new Error("Missing return statement in function");
  }

  final public Node For() throws ParseException {
  Token f; Token id; Node exp; Node actions;
    f = jj_consume_token(FOR_KEYWORD);
    jj_consume_token(OPENING_P);
    id = jj_consume_token(IDENTIFIER);
    jj_consume_token(IN_KEYWORD);
    exp = First_Expression();
    jj_consume_token(CLOSING_P);
    actions = Sentences_Block();
                                                            Node forNode = new Node("for sentence", f.beginLine, f.beginColumn, null);
                                                            Node idNode = new Node("identifier", id.beginLine, id.beginColumn, id.image);
                                                            forNode.addChildren(idNode);
                                                            Node condition = new Node("condition");
                                                            condition.addChildren(exp);
                                                            forNode.addChildren(condition);
                                                            forNode.addChildren(actions);
                                                            {if (true) return forNode;}
    throw new Error("Missing return statement in function");
  }

  final public Node Return() throws ParseException {
  Token r; boolean flag = false; Node exp = null;
    r = jj_consume_token(RETURN_KEYWORD);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPENING_P:
      jj_consume_token(OPENING_P);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPENING_P:
      case MINUS:
      case NOT:
      case NULL_VALUE:
      case FALSE_VALUE:
      case TRUE_VALUE:
      case NUMERIC_VALUE:
      case INTEGER_VALUE:
      case STRING_VALUE:
      case IDENTIFIER:
        exp = First_Expression();
                                               flag = true;
        break;
      default:
        jj_la1[30] = jj_gen;
        ;
      }
      jj_consume_token(CLOSING_P);
      break;
    default:
      jj_la1[31] = jj_gen;
      ;
    }
                                                                                        Node ret = new Node("return sentence", r.beginLine, r.beginColumn, null);
                                                                                        if (flag) {
                                                                                            ret.addChildren(exp);
                                                                                        }
                                                                                        {if (true) return ret;}
    throw new Error("Missing return statement in function");
  }

  final public Node Break() throws ParseException {
  Token b;
    b = jj_consume_token(BREAK_KEYWORD);
                              {if (true) return new Node("break sentence", b.beginLine, b.beginColumn, null);}
    throw new Error("Missing return statement in function");
  }

  final public Node Continue() throws ParseException {
  Token c;
    c = jj_consume_token(CONTINUE_KEYWORD);
                              {if (true) return new Node("continue sentence", c.beginLine, c.beginColumn, null);}
    throw new Error("Missing return statement in function");
  }

  final public Node Function_Call() throws ParseException {
  Token id; boolean flag = false; Node param; Node params = new Node("params");
    id = jj_consume_token(IDENTIFIER);
    jj_consume_token(OPENING_P);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPENING_P:
    case MINUS:
    case NOT:
    case DEFAULT_KEYWORD:
    case NULL_VALUE:
    case FALSE_VALUE:
    case TRUE_VALUE:
    case NUMERIC_VALUE:
    case INTEGER_VALUE:
    case STRING_VALUE:
    case IDENTIFIER:
      param = Params();
                         params.addChildren(param); flag = true;
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[32] = jj_gen;
          break label_7;
        }
        jj_consume_token(COMMA);
        param = Params();
                                                                                                params.addChildren(param);
      }
      break;
    default:
      jj_la1[33] = jj_gen;
      ;
    }
    jj_consume_token(CLOSING_P);
                                                                            Node call = new Node("call");
                                                                            Node identifier = new Node("identifier", id.beginLine, id.beginColumn, id.image);
                                                                            call.addChildren(identifier);
                                                                            if (flag)
                                                                                call.addChildren(params);
                                                                            {if (true) return call;}
    throw new Error("Missing return statement in function");
  }

  final public Node Params() throws ParseException {
  Token d; Node exp;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DEFAULT_KEYWORD:
      d = jj_consume_token(DEFAULT_KEYWORD);
                                          {if (true) return new Node("default", d.beginLine, d.beginColumn, null);}
      break;
    case OPENING_P:
    case MINUS:
    case NOT:
    case NULL_VALUE:
    case FALSE_VALUE:
    case TRUE_VALUE:
    case NUMERIC_VALUE:
    case INTEGER_VALUE:
    case STRING_VALUE:
    case IDENTIFIER:
      exp = First_Expression();
                                          {if (true) return exp;}
      break;
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Node Vector_Access() throws ParseException {
  Token id; Node addresses = new Node("addresses"); Node address;
    id = jj_consume_token(IDENTIFIER);
    label_8:
    while (true) {
      address = Address();
                            addresses.addChildren(address);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPENING_B:
        ;
        break;
      default:
        jj_la1[35] = jj_gen;
        break label_8;
      }
    }
                                                                                    Node res = new Node("structure access");
                                                                                    Node identifier = new Node("identifier", id.beginLine, id.beginColumn, id.image);
                                                                                    res.addChildren(identifier);
                                                                                    res.addChildren(addresses);
                                                                                    {if (true) return res;}
    throw new Error("Missing return statement in function");
  }

  final public Node Address() throws ParseException {
  Node exp; boolean one = false;
    jj_consume_token(OPENING_B);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPENING_P:
    case MINUS:
    case NOT:
    case NULL_VALUE:
    case FALSE_VALUE:
    case TRUE_VALUE:
    case NUMERIC_VALUE:
    case INTEGER_VALUE:
    case STRING_VALUE:
    case IDENTIFIER:
      exp = First_Expression();
                                             one = true;
      break;
    case OPENING_B:
      jj_consume_token(OPENING_B);
      exp = First_Expression();
      jj_consume_token(CLOSING_B);
      break;
    default:
      jj_la1[36] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(CLOSING_B);
                                                                                    if (one) {
                                                                                        Node address = new Node("address", 0, 0, "singleB");
                                                                                        address.addChildren(exp);
                                                                                        {if (true) return address;}
                                                                                    }
                                                                                    else {
                                                                                        Node address = new Node("address", 0, 0, "doubleB");
                                                                                        address.addChildren(exp);
                                                                                        {if (true) return address;}
                                                                                    }
    throw new Error("Missing return statement in function");
  }

  final public Node Matrix_Access() throws ParseException {
  Token id; Node mat; boolean flag = false; Node adds = new Node("addresses"); Node aux;
    id = jj_consume_token(IDENTIFIER);
    jj_consume_token(OPENING_B);
    mat = Matrix_Address();
    jj_consume_token(CLOSING_B);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPENING_B:
        ;
        break;
      default:
        jj_la1[37] = jj_gen;
        break label_9;
      }
      jj_consume_token(OPENING_B);
      aux = First_Expression();
      jj_consume_token(CLOSING_B);
                                                         adds.addChildren(aux); flag = true;
    }
                                                                                    Node access = new Node("matrix access");
                                                                                    Node identifier = new Node("identifier", id.beginLine, id.beginColumn, id.image);
                                                                                    access.addChildren(identifier);
                                                                                    access.addChildren(mat);
                                                                                    if (flag)
                                                                                        access.addChildren(adds);
                                                                                    {if (true) return access;}
    throw new Error("Missing return statement in function");
  }

  final public Node Matrix_Address() throws ParseException {
  Node exp1 = null; Node exp2 = null; int type = 0;
    if (jj_2_13(3)) {
      exp1 = First_Expression();
      jj_consume_token(COMMA);
      exp2 = First_Expression();
                                                                                    Node address = new Node("matrix_address", 0, 0, "both");
                                                                                    address.addChildren(exp1);
                                                                                    address.addChildren(exp2);
                                                                                    {if (true) return address;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPENING_P:
      case MINUS:
      case NOT:
      case NULL_VALUE:
      case FALSE_VALUE:
      case TRUE_VALUE:
      case NUMERIC_VALUE:
      case INTEGER_VALUE:
      case STRING_VALUE:
      case IDENTIFIER:
        exp1 = First_Expression();
        jj_consume_token(COMMA);
                                                                                    Node address = new Node("matrix_address", 0, 0, "left");
                                                                                    address.addChildren(exp1);
                                                                                    {if (true) return address;}
        break;
      case COMMA:
        jj_consume_token(COMMA);
        exp2 = First_Expression();
                                                                                    Node address2 = new Node("matrix_address", 0, 0, "right");
                                                                                    address2.addChildren(exp2);
                                                                                    {if (true) return address2;}
        break;
      default:
        jj_la1[38] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_3R_55() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_60()) {
    jj_scanpos = xsp;
    if (jj_3R_61()) {
    jj_scanpos = xsp;
    if (jj_3R_62()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_60() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_3R_27()) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  private boolean jj_3R_30() {
    return false;
  }

  private boolean jj_3R_66() {
    return false;
  }

  private boolean jj_3R_12() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(OPENING_B)) return true;
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_scan_token(VALUE_ASIGNMENT)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_23() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) return true;
    }
    return false;
  }

  private boolean jj_3_12() {
    if (jj_scan_token(ELSE_KEYWORD)) return true;
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3R_65() {
    if (jj_scan_token(MOD)) return true;
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_78() {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_18() {
    if (jj_3R_22()) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3R_64() {
    if (jj_scan_token(DIV)) return true;
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3_11() {
    if (jj_scan_token(ELSE_KEYWORD)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3R_56() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_63()) {
    jj_scanpos = xsp;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) {
    jj_scanpos = xsp;
    if (jj_3R_66()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_63() {
    if (jj_scan_token(TIMES)) return true;
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_79() {
    if (jj_scan_token(OPENING_B)) return true;
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_scan_token(OPENING_B)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_78()) {
    jj_scanpos = xsp;
    if (jj_3R_79()) return true;
    }
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_scan_token(VALUE_ASIGNMENT)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_48() {
    if (jj_3R_55()) return true;
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3R_59() {
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_3R_26()) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_scan_token(IF_KEYWORD)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_10()) return true;
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    if (jj_3R_20()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_20()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_81() {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_58() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_80() {
    if (jj_scan_token(DEFAULT_KEYWORD)) return true;
    return false;
  }

  private boolean jj_3R_77() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_80()) {
    jj_scanpos = xsp;
    if (jj_3R_81()) return true;
    }
    return false;
  }

  private boolean jj_3R_49() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_57()) {
    jj_scanpos = xsp;
    if (jj_3R_58()) {
    jj_scanpos = xsp;
    if (jj_3R_59()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_57() {
    if (jj_scan_token(PLUS)) return true;
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_scan_token(OPENING_C)) return true;
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_scan_token(IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_21()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_3R_48()) return true;
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_76() {
    if (jj_3R_77()) return true;
    return false;
  }

  private boolean jj_3R_54() {
    return false;
  }

  private boolean jj_3R_11() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(OPENING_P)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_76()) jj_scanpos = xsp;
    if (jj_scan_token(CLOSING_P)) return true;
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_scan_token(GREATER_EQUALS)) return true;
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_scan_token(LESSER_EQUALS)) return true;
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_51() {
    if (jj_scan_token(GREATER)) return true;
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_44() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_50()) {
    jj_scanpos = xsp;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) {
    jj_scanpos = xsp;
    if (jj_3R_54()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_scan_token(LESSER)) return true;
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_14() {
    if (jj_3R_16()) return true;
    return false;
  }

  private boolean jj_3_10() {
    if (jj_scan_token(OPENING_P)) return true;
    if (jj_3R_16()) return true;
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_3R_43()) return true;
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_47() {
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_scan_token(NOT_EQUALS)) return true;
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3_9() {
    if (jj_scan_token(OPENING_P)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_14()) jj_scanpos = xsp;
    if (jj_scan_token(CLOSING_P)) return true;
    if (jj_scan_token(ARROW)) return true;
    if (jj_3R_15()) return true;
    return false;
  }

  private boolean jj_3R_40() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_45()) {
    jj_scanpos = xsp;
    if (jj_3R_46()) {
    jj_scanpos = xsp;
    if (jj_3R_47()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_scan_token(EQUALS)) return true;
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3_8() {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_3R_39()) return true;
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_42() {
    return false;
  }

  private boolean jj_3_7() {
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3R_36() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) return true;
    }
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3_6() {
    if (jj_scan_token(IDENTIFIER)) return true;
    if (jj_scan_token(VALUE_ASIGNMENT)) return true;
    return false;
  }

  private boolean jj_3R_10() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3_7()) {
    jj_scanpos = xsp;
    if (jj_3_8()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_3R_35()) return true;
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_38() {
    return false;
  }

  private boolean jj_3R_75() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  private boolean jj_3R_74() {
    if (jj_scan_token(OPENING_P)) return true;
    if (jj_3R_18()) return true;
    if (jj_scan_token(CLOSING_P)) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_11()) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_13()) return true;
    return false;
  }

  private boolean jj_3R_32() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) return true;
    }
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_scan_token(OR)) return true;
    if (jj_3R_31()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_12()) return true;
    return false;
  }

  private boolean jj_3R_73() {
    if (jj_scan_token(STRING_VALUE)) return true;
    return false;
  }

  private boolean jj_3R_72() {
    if (jj_scan_token(INTEGER_VALUE)) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_3R_31()) return true;
    if (jj_3R_32()) return true;
    return false;
  }

  private boolean jj_3R_71() {
    if (jj_scan_token(NUMERIC_VALUE)) return true;
    return false;
  }

  private boolean jj_3R_70() {
    if (jj_scan_token(TRUE_VALUE)) return true;
    return false;
  }

  private boolean jj_3R_34() {
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_69() {
    if (jj_scan_token(FALSE_VALUE)) return true;
    return false;
  }

  private boolean jj_3R_68() {
    if (jj_scan_token(NULL_VALUE)) return true;
    return false;
  }

  private boolean jj_3R_67() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) {
    jj_scanpos = xsp;
    if (jj_3R_70()) {
    jj_scanpos = xsp;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_3R_18()) return true;
    if (jj_scan_token(COMMA)) return true;
    return false;
  }

  private boolean jj_3R_62() {
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3R_19() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_13() {
    if (jj_3R_18()) return true;
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) return true;
    }
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_scan_token(TERNARY)) return true;
    if (jj_3R_27()) return true;
    return false;
  }

  private boolean jj_3R_61() {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_55()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public GrammarTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  /** Whether we are looking ahead. */
  private boolean jj_lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[39];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x1000000,0x1000000,0x1000000,0x1000000,0x1000000,0x1000000,0x0,0x10000,0x0,0x0,0x0,0x1800,0xc0006000,0x6000000,0x18000400,0x4020000,0x0,0x20000,0x0,0x0,0x4020000,0x800000,0x10000,0x0,0x0,0x0,0x0,0x0,0x4020000,0x20000,0x800000,0x4020000,0x4020000,0x80000,0x40a0000,0x80000,0x4820000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x800dea0,0x800dea0,0x0,0x0,0x0,0x0,0x0,0x0,0xdea0,0x0,0x8,0x4,0x2,0x0,0x0,0x0,0x0,0xb9c0001,0x39c0000,0x8000000,0x8000000,0x8000000,0xb9d0001,0x0,0x0,0x40,0x20000,0x100,0x800dea0,0x800dea0,0xb9c0001,0x0,0x0,0xb9e0001,0xb9e0001,0x0,0xb9c0001,0x0,0xb9c0001,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[13];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Grammar(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Grammar(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new GrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 39; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 39; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Grammar(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new GrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 39; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 39; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Grammar(GrammarTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 39; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(GrammarTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 39; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[60];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 39; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 60; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 13; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
