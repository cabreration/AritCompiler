options {
    IGNORE_CASE = true;
    STATIC = false;
}

PARSER_BEGIN(Grammar)
package JavaCC; 
import APIServices.Node;

public class Grammar {
    private String scape(String cadena) {
        StringBuilder builder = new StringBuilder(cadena);
        builder.deleteCharAt(0);
        builder.deleteCharAt(builder.length() - 1);

        String next = builder.toString();
        next = next.replace("\\t", "\t");
        next = next.replace("\\n", "\n");
        next = next.replace("\\r", "\r");
        next = next.replace("\\\"", "\"");
        next = next.replace("\\\\", "\\");
        return next;
    }
}

PARSER_END(Grammar)

/* Scanner */

/* characters that i need to avoid */

SKIP : {
        " "
    |   "\t"
    |   "\r"
    |   "\f"
    |   "\n"
    |   < "#" (~["\n","\r"])* ("\n"|"\r"|"\r\n")?>
    |   <"#*" (~["*"])* "*" (~["*", "#"] (~["*"])* "*" | "*")* "#">
    //|   "#*": MULTILINE_COMMENT
}

/* comments that take more than one line */

<MULTILINE_COMMENT> SKIP:
{
    "*#" : DEFAULT
}

<MULTILINE_COMMENT> MORE:
{
    < ~[] >
}

/* Reserved words and symbols */

TOKEN: {
        <MOD: "%%" >
    |   <EQUALS: "==" >
    |   <NOT_EQUALS: "!=" >
    |   <GREATER_EQUALS: ">=" >
    |   <LESSER_EQUALS: "<=" >
    |   <ARROW: "=>" >
    |   <VALUE_ASIGNMENT: "=" >
    |   <OPENING_P: "(" >
    |   <CLOSING_P: ")" >
    |   <OPENING_B: "[" >
    |   <CLOSING_B: "]" >
    |   <OPENING_C: "{" >
    |   <CLOSING_C: "}" >
    |   <COMMA: "," >
    |   <SEMICOLON: ";" >
    |   <PLUS: "+" >
    |   <MINUS: "-" >
    |   <TIMES: "*" >
    |   <DIV: "/" >
    |   <POWER: "^" >
    |   <GREATER: ">" >
    |   <LESSER: "<" >
    |   <NOT: "!" >
    |   <AND: "&" >
    |   <OR: "|" >
    |   <TERNARY: "?" >
    |   <COLON: ":" >
    |   <IF_KEYWORD: "if" >
    |   <ELSE_KEYWORD: "else" >
    |   <SWITCH_KEYWORD: "switch" >
    |   <CASE_KEYWORD: "case" >
    |   <BREAK_KEYWORD: "break" >
    |   <WHILE_KEYWORD: "while" >
    |   <DO_KEYWORD: "do" >
    |   <FOR_KEYWORD: "for" >
    |   <IN_KEYWORD: "in" >
    |   <CONTINUE_KEYWORD: "continue" >
    |   <RETURN_KEYWORD: "return" >
    |   <FUNCTION_KEYWORD: "function" >
    |   <DEFAULT_KEYWORD: "default" >
    |   <NULL_VALUE: "null" >
    |   <FALSE_VALUE: "false" >
    |   <TRUE_VALUE: "true" >
}

/* tokens that need a regular expression */

TOKEN: {
        <#DIGIT: ["0"-"9"] >
    |   <FRACTIONAL_DIGITS: "." ( <DIGIT> )+ >
    |   <NUMERIC_VALUE: ( <DIGIT> )+ <FRACTIONAL_DIGITS> >
    |   <INTEGER_VALUE: ( <DIGIT> )+ >
    |   <STRING_VALUE: "\"" ("\\" ~[] | ~["\"", "\\" ])* "\"" >
    |   <#LETTER: ["a" - "z", "A" - "Z", "ñ", "Ñ"] >
    |   <IDENTIFIER: <LETTER> ( <LETTER> | <DIGIT> | "." | "_")* | "." (( <LETTER> | "." | "_" ) ( <LETTER> | "." | "_" | <DIGIT> )*)? >
}

/* Scanner End */

Node Root() :
{ Node root = new Node("root"); Node sentences = new Node("sentences"); Node aux; }
{
        ( aux = Sentence() { sentences.addChildren(aux); } )* <EOF> { root.addChildren(sentences); return root; }
}


Node Sentences_Block() : 
{ Node instruction; Node sentences = new Node("sentences"); }
{
    <OPENING_C> ( instruction = Sentence() { sentences.addChildren(instruction); } )* <CLOSING_C> { return sentences; }
}


Node Sentence() :
{ Node instruction; }
{
        LOOKAHEAD(2)
        instruction = Asignment() ( <SEMICOLON> )? { return instruction; }
    |
        instruction = If() { return instruction; }
    |
        instruction = Switch() { return instruction; }
    |
        instruction = While() { return instruction; }
    |
        instruction = Do_While() ( <SEMICOLON> )? { return instruction; }
    | 
        instruction = For() { return instruction; }
    | 
        instruction = Return() ( <SEMICOLON> )? { return instruction; }
    |
        instruction = Break() ( <SEMICOLON> )? { return instruction; }
    |
        instruction = Continue() ( <SEMICOLON> )? { return instruction; }
    |
        LOOKAHEAD(2)
        instruction = Function_Call() ( <SEMICOLON> )? { return instruction; }
}

Node First_Expression() : 
{ Node exp1; Node exp; }
{
    exp1 = Second_Expression() exp = PFirst_Expression(exp1)
    { return exp; }
}

Node PFirst_Expression(Node inherited) : 
{ Node exp1; Node op; Token v; Node res; Node bin; }
{
    v = <VALUE_ASIGNMENT> exp1 = Second_Expression() { 
                                                        bin = new Node("binary expression");
                                                        op = new Node("=", v.beginLine, v.beginColumn, null);
                                                        op.addChildren(inherited);
                                                    }   res = PFirst_Expression(exp1) { op.addChildren(res); bin.addChildren(op); return bin; }
    |
        { return inherited; }
}

Node Second_Expression() : 
{ Node exp1; Node exp2; Node exp3; Token t; Token t2; }
{
    exp1 = Third_Expression() 
    ( t = <TERNARY> exp2 = Third_Expression() t2 = <COLON> exp3 =Third_Expression() 
        {
            Node ter = new Node("ternary expression");
            Node semi = new Node("?", t.beginLine, t.beginColumn, null);
            semi.addChildren(exp1);
            Node col = new Node(":", t2.beginLine, t2.beginColumn, null);
            col.addChildren(exp2);
            col.addChildren(exp3);
            ter.addChildren(semi);
            ter.addChildren(col);
            exp1 = ter;
        })*
    { return exp1; }
}


Node Third_Expression() : 
{ Node exp1; Node exp2; Token t;}
{
    exp1 = Fourth_Expression() ( t = <OR> exp2 = Fourth_Expression()
        {
            Node bin = new Node("binary expression");
            Node op = new Node("|", t.beginLine, t.beginColumn, null);
            op.addChildren(exp1);
            op.addChildren(exp2);
            bin.addChildren(op);
            exp1 = bin;
        })*
    { return exp1; }
}

Node Fourth_Expression() : 
{ Node exp1; Node exp2; Token t;}
{
    exp1 = Fifth_Expression() ( t = <AND> exp2 = Fifth_Expression()
        {
            Node bin = new Node("binary expression");
            Node op = new Node("&", t.beginLine, t.beginColumn, null);
            op.addChildren(exp1);
            op.addChildren(exp2);
            bin.addChildren(op);
            exp1 = bin;
        })*
    { return exp1; }
}


Node Fifth_Expression() : 
{ Node exp1; Node exp2; Token t;}
{
    exp1 = Sixth_Expression() ( 
            t = <EQUALS> exp2 = Sixth_Expression()
                {
                    Node bin = new Node("binary expression");
                    Node op = new Node("==", t.beginLine, t.beginColumn, null);
                    op.addChildren(exp1);
                    op.addChildren(exp2);
                    bin.addChildren(op);
                    exp1 = bin;
                }
        |
            t = <NOT_EQUALS> exp2 = Sixth_Expression() 
                {
                    Node bin2 = new Node("binary expression");
                    Node op2 = new Node("!=", t.beginLine, t.beginColumn, null);
                    op2.addChildren(exp1);
                    op2.addChildren(exp2);
                    bin2.addChildren(op2);
                    exp1 = bin2;
                }
    )?
    { return exp1; }
}

Node Sixth_Expression() : 
{ Node exp1; Node exp2; Token t;}
{
    exp1 = Seventh_Expression() ( 
            t = <GREATER> exp2 = Seventh_Expression()
                {
                    Node bin = new Node("binary expression");
                    Node op = new Node(">", t.beginLine, t.beginColumn, null);
                    op.addChildren(exp1);
                    op.addChildren(exp2);
                    bin.addChildren(op);
                    exp1 = bin;
                }
        |
            t = <GREATER_EQUALS> exp2 = Seventh_Expression() 
                {
                    Node bin2 = new Node("binary expression");
                    Node op2 = new Node(">=", t.beginLine, t.beginColumn, null);
                    op2.addChildren(exp1);
                    op2.addChildren(exp2);
                    bin2.addChildren(op2);
                    exp1 = bin2;
                }
        |
            t = <LESSER> exp2 = Seventh_Expression() 
                {
                    Node bin3 = new Node("binary expression");
                    Node op3 = new Node("<", t.beginLine, t.beginColumn, null);
                    op3.addChildren(exp1);
                    op3.addChildren(exp2);
                    bin3.addChildren(op3);
                    exp1 = bin3;
                }
        |
            t = <LESSER_EQUALS> exp2 = Seventh_Expression() 
                {
                    Node bin4 = new Node("binary expression");
                    Node op4 = new Node("<=", t.beginLine, t.beginColumn, null);
                    op4.addChildren(exp1);
                    op4.addChildren(exp2);
                    bin4.addChildren(op4);
                    exp1 = bin4;
                }
    )?
    { return exp1; }
}

Node Seventh_Expression() : 
{ Node exp1; Node exp2; Token t;}
{
    exp1 = Eigth_Expression() ( 
            t = <PLUS> exp2 = Eigth_Expression()
                {
                    Node bin = new Node("binary expression");
                    Node op = new Node("+", t.beginLine, t.beginColumn, null);
                    op.addChildren(exp1);
                    op.addChildren(exp2);
                    bin.addChildren(op);
                    exp1 = bin;
                }
        |
            t = <MINUS> exp2 = Eigth_Expression() 
                {
                    Node bin2 = new Node("binary expression");
                    Node op2 = new Node("-", t.beginLine, t.beginColumn, null);
                    op2.addChildren(exp1);
                    op2.addChildren(exp2);
                    bin2.addChildren(op2);
                    exp1 = bin2;
                }
    )*
    { return exp1; }
}

Node Eigth_Expression() : 
{ Node exp1; Node exp2; Token t;}
{
    exp1 = Nineth_Expression() ( 
            t = <TIMES> exp2 = Nineth_Expression()
                {
                    Node bin = new Node("binary expression");
                    Node op = new Node("*", t.beginLine, t.beginColumn, null);
                    op.addChildren(exp1);
                    op.addChildren(exp2);
                    bin.addChildren(op);
                    exp1 = bin;
                }
        |
            t = <DIV> exp2 = Nineth_Expression() 
                {
                    Node bin2 = new Node("binary expression");
                    Node op2 = new Node("/", t.beginLine, t.beginColumn, null);
                    op2.addChildren(exp1);
                    op2.addChildren(exp2);
                    bin2.addChildren(op2);
                    exp1 = bin2;
                }
        |
            t = <MOD> exp2 = Nineth_Expression() 
                {
                    Node bin3 = new Node("binary expression");
                    Node op3 = new Node("%%", t.beginLine, t.beginColumn, null);
                    op3.addChildren(exp1);
                    op3.addChildren(exp2);
                    bin3.addChildren(op3);
                    exp1 = bin3;
                }
    )*
    { return exp1; }
}

Node Nineth_Expression() : 
{ Node exp1; Node exp2; Token t;}
{
    exp1 = Tenth_Expression() ( 
            t = <POWER> exp2 = Tenth_Expression()
                {
                    Node bin = new Node("binary expression");
                    Node op = new Node("^", t.beginLine, t.beginColumn, null);
                    op.addChildren(exp1);
                    op.addChildren(exp2);
                    bin.addChildren(op);
                    exp1 = bin;
                }
    )*
    { return exp1; }
}


Node Tenth_Expression() :
{ Node res; Node min; Token t; Node exp; }
{
        t = <MINUS> exp = Tenth_Expression()   {   
                                                    res = new Node("unary expression");
                                                    min = new Node("-", t.beginLine, t.beginColumn, null); 
                                                    min.addChildren(exp);
                                                    res.addChildren(min);
                                                    return res;
                                                }
    |
        t = <NOT> exp = Tenth_Expression()     {   
                                                    res = new Node("unary expression");
                                                    min = new Node("!", t.beginLine, t.beginColumn, null); 
                                                    min.addChildren(exp);
                                                    res.addChildren(min);
                                                    return res;
                                                }
    |
        res = Value() { return res; }
}

Node Value() :
{ Node aux; Token tok; }
{
        tok = <NULL_VALUE>                                          { return new Node("null value", tok.beginLine, tok.beginColumn, null); }
    |
        tok = <FALSE_VALUE>                                         { return new Node("bool value", tok.beginLine, tok.beginColumn, false); }
    | 
        tok = <TRUE_VALUE>                                          { return new Node("bool value", tok.beginLine, tok.beginColumn, true); }
    |
        tok = <NUMERIC_VALUE>                                       { return new Node("numeric value", tok.beginLine, tok.beginColumn, Double.parseDouble(tok.image)); }
    |
        tok = <INTEGER_VALUE>                                       { return new Node("integer value", tok.beginLine, tok.beginColumn, Integer.parseInt(tok.image)); }
    | 
        tok = <STRING_VALUE>                                        { return new Node("string value", tok.beginLine, tok.beginColumn, scape(tok.image)); }
    |
        LOOKAHEAD(100)
        aux = Vector_Access()                                       { return aux; }
    |
        LOOKAHEAD(100)
        aux = Matrix_Access()                                       { return aux; }
    |
        LOOKAHEAD(2)
        aux = Function_Call()                                       { return aux; }
    |
        <OPENING_P> aux = First_Expression() <CLOSING_P>            { return aux; }
    |
        tok = <IDENTIFIER>                                          { return new Node("identifier", tok.beginLine, tok.beginColumn, tok.image.toLowerCase()); }
}

Node Asignment() : 
{ Node previous; Token id; Token v; Node vec; Node mat; }
{
        LOOKAHEAD(2)
        id = <IDENTIFIER> v = <VALUE_ASIGNMENT> previous = Asignment_Options()      {   
                                                                                        Node identifier = new Node("identifier", id.beginLine, id.beginColumn, id.image.toLowerCase());
                                                                                        previous.addChildrenAt(0, identifier);
                                                                                        previous.setRow(v.beginLine);
                                                                                        previous.setColumn(v.beginColumn);
                                                                                        return previous; 
                                                                                    }
    |
        LOOKAHEAD(100)
        mat = Matrix_Access() v = <VALUE_ASIGNMENT> previous = First_Expression()   {
                                                                                        Node as = new Node("matrix asignment", v.beginLine, v.beginColumn, null);
                                                                                        as.addChildren(mat);
                                                                                        as.addChildren(previous);
                                                                                        return as;
                                                                                    }
    |   
        LOOKAHEAD(100)
        vec = Vector_Access() v = <VALUE_ASIGNMENT> previous = First_Expression()   {   
                                                                                        Node as = new Node("structure asignment");
                                                                                        as.addChildren(vec);
                                                                                        as.addChildren(previous);
                                                                                        return as;
                                                                                    }
}

Node Asignment_Options() :
{ Node exp; Node param = null; Node params = null; Node sent; boolean flag = false; }
{
        LOOKAHEAD(4) 
        <OPENING_P> ( param = Parameter() { flag = true; })? 
        <CLOSING_P> <ARROW> sent = Sentences_Block()                            { 
                                                                                    Node res = new Node("asignment");
                                                                                    Node arr = new Node("arrow def");
                                                                                    if (flag) {
                                                                                        params = new Node("parameters");
                                                                                        params.addChildren(param);
                                                                                        arr.addChildren(params);
                                                                                    }
                                                                                    arr.addChildren(sent);
                                                                                    res.addChildren(arr);
                                                                                    return res;
                                                                                }
    |
        LOOKAHEAD(3)
        <OPENING_P> param = Parameter() <COMMA>
        params = Parameters_List() <CLOSING_P> 
        <ARROW> sent = Sentences_Block()                                        {
                                                                                    Node res = new Node("arrow function");
                                                                                    Node arr = new Node("arrow def");
                                                                                    params.addChildrenAt(0, param);
                                                                                    arr.addChildren(params);
                                                                                    arr.addChildren(sent);
                                                                                    res.addChildren(arr);
                                                                                    return res;
                                                                                }
    |
        <FUNCTION_KEYWORD> <OPENING_P>
        ( params = Parameters_List() )? 
        <CLOSING_P> sent = Sentences_Block()                                    {
                                                                                    Node res = new Node("function");
                                                                                    if (params != null) 
                                                                                        res.addChildren(params);
                                                                                    res.addChildren(sent);
                                                                                    return res;
                                                                                }
    |
        exp = First_Expression()                                                { 
                                                                                    res = new Node("asignment");
                                                                                    res.addChildren(exp);
                                                                                    return res;
                                                                                }
}



Node Parameters_List() : 
{ Node params = new Node("parameters"); Node aux;}
{
    aux = Parameter() { params.addChildren(aux); } ( <COMMA> aux = Parameter() { params.addChildren(aux); } )* { return params;}            
}

Node Parameter() : 
{ Token tok; Node res; Node id; Node exp = null; boolean flag = false;}
{
        tok = <IDENTIFIER> ( <VALUE_ASIGNMENT> exp = First_Expression() { flag = true; } )? 
        { 
            if (!flag) {
                return new Node("identifier", tok.beginLine, tok.beginColumn, tok.image.toLowerCase()); 
            }
            else {
                res = new Node("asignment");
                id = new Node("identifier", tok.beginLine, tok.beginColumn, tok.image.toLowerCase());
                res.addChildren(id);
                res.addChildren(exp);
                return res;
            }
        }
}

Node If() :
{ Token i; Node elseNode = null; boolean flag = false; Node sentences; Node condition; }
{
    i = <IF_KEYWORD> <OPENING_P> condition = First_Expression()
    <CLOSING_P> sentences = Sentences_Block()
    ( elseNode = Else() { flag = true; } )?                         { 
                                                                        Node ifNode = new Node("if sentence", i.beginLine, i.beginColumn, null);
                                                                        Node cond = new Node("condition");
                                                                        cond.addChildren(condition);
                                                                        ifNode.addChildren(cond);
                                                                        ifNode.addChildren(sentences);
                                                                        if (flag) 
                                                                            ifNode.addChildren(elseNode);
                                                                        return ifNode;
                                                                    }
}

Node Else() :
{ Token e; Node ifNode = null; Node sentences = null;}
{
        LOOKAHEAD(2)
        e = <ELSE_KEYWORD> sentences = Sentences_Block()            { 
                                                                        Node elseNode = new Node("else sentence", e.beginLine, e.beginColumn, null); 
                                                                        elseNode.addChildren(sentences);
                                                                        return elseNode;
                                                                    }
    |
        LOOKAHEAD(2)
        e = <ELSE_KEYWORD> ifNode = If()                            {
                                                                        Node elseNode = new Node("else sentence", e.beginLine, e.beginColumn, null);
                                                                        for (Node child : ifNode.getChildren()) 
                                                                            elseNode.addChildren(child);
                                                                        return elseNode;
                                                                    }
}

Node Switch() : 
{Token s; Node val; Node body; }
{
    s = <SWITCH_KEYWORD> <OPENING_P> val = First_Expression()
    <CLOSING_P> <OPENING_C> body = Switch_Body() <CLOSING_C>                    {
                                                                                    Node switchNode = new Node("switch sentence", s.beginLine, s.beginColumn, null);
                                                                                    Node condition = new Node("condition");
                                                                                    condition.addChildren(val);
                                                                                    switchNode.addChildren(condition);
                                                                                    switchNode.addChildren(body);
                                                                                    return switchNode;
                                                                                }
}

Node Switch_Body() : 
{ Node cases; Node def = null; boolean flag = false; }
{
    cases = Cases_List() ( def = Default_Case() { flag = true; } )?             {
                                                                                    if (flag)
                                                                                        cases.addChildren(def);
                                                                                    return cases;
                                                                                }
}

Node Cases_List() :
{ Node casesNode = new Node("cases_list"); Node single; }
{
    ( single = Single_Case() { casesNode.addChildren(single); } )+              { return casesNode; }
}

Node Single_Case() :
{ Token c; Node exp; Node sentences = new Node("sentences"); Node sentence; }
{
    c = <CASE_KEYWORD> exp = First_Expression() <COLON>
    ( sentence = Sentence() { sentences.addChildren(sentence); } )*             {
                                                                                    Node single = new Node("case", c.beginLine, c.beginColumn, null);
                                                                                    Node condition = new Node("value");
                                                                                    condition.addChildren(exp);
                                                                                    single.addChildren(condition);
                                                                                    single.addChildren(sentences);
                                                                                    return single;
                                                                                }
}

Node Default_Case() : 
{ Token d; Node sentences = new Node("sentences"); Node sentence; }
{
    d = <DEFAULT_KEYWORD> <COLON>
    ( sentence = Sentence() { sentences.addChildren(sentence); } )*             {
                                                                                    Node defaultNode = new Node("default", d.beginLine, d.beginColumn, null);
                                                                                    defaultNode.addChildren(sentences);
                                                                                    return defaultNode;
                                                                                }
}

Node While() : 
{ Token w; Node exp; Node actions; }
{
    w = <WHILE_KEYWORD> <OPENING_P>
    exp = First_Expression() <CLOSING_P>
    actions = Sentences_Block()                     {
                                                        Node whileNode = new Node("while sentence", w.beginLine, w.beginColumn, null);
                                                        Node condition = new Node("condition");
                                                        condition.addChildren(exp);
                                                        whileNode.addChildren(condition);
                                                        whileNode.addChildren(actions);
                                                        return whileNode;
                                                    }
}

Node Do_While() :
{ Token d; Node actions; Node exp; }
{
    d = <DO_KEYWORD> actions = Sentences_Block()
    <WHILE_KEYWORD> <OPENING_P> 
    exp = First_Expression() <CLOSING_P>                {
                                                            Node doNode = new Node("do while sentence", d.beginLine, d.beginColumn, null);
                                                            Node condition = new Node("condition");
                                                            condition.addChildren(exp);
                                                            doNode.addChildren(actions);
                                                            doNode.addChildren(condition);
                                                            return doNode;
                                                        }
}

Node For() : 
{ Token f; Token id; Node exp; Node actions; }
{
    f = <FOR_KEYWORD> <OPENING_P>
    id = <IDENTIFIER> <IN_KEYWORD>
    exp = First_Expression() <CLOSING_P>
    actions = Sentences_Block()                         {
                                                            Node forNode = new Node("for sentence", f.beginLine, f.beginColumn, null);
                                                            Node idNode = new Node("identifier", id.beginLine, id.beginColumn, id.image.toLowerCase());
                                                            forNode.addChildren(idNode);
                                                            Node condition = new Node("condition");
                                                            condition.addChildren(exp);
                                                            forNode.addChildren(condition);
                                                            forNode.addChildren(actions);
                                                            return forNode;
                                                        }
}


Node Return() : 
{ Token r; boolean flag = false; Node exp = null; }
{
    r = <RETURN_KEYWORD> 
    ( <OPENING_P> ( exp = First_Expression() { flag = true; } )? <CLOSING_P> )?     {
                                                                                        Node ret = new Node("return sentence", r.beginLine, r.beginColumn, null);
                                                                                        if (flag) {
                                                                                            ret.addChildren(exp);
                                                                                        }
                                                                                        return ret;
                                                                                    }
}

Node Break() : 
{ Token b; }
{
    b = <BREAK_KEYWORD>     { return new Node("break sentence", b.beginLine, b.beginColumn, null); }
}

Node Continue() :
{ Token c; }
{
    c = <CONTINUE_KEYWORD>  { return new Node("continue sentence", c.beginLine, c.beginColumn, null); }
}

Node Function_Call() : 
{ Token id; boolean flag = false; Node param; Node params = new Node("params"); }
{
    id = <IDENTIFIER> <OPENING_P> 
    ( param = Params() { params.addChildren(param); flag = true; } ( <COMMA> param = Params() { params.addChildren(param); } )* )?
    <CLOSING_P>
                                                                        {
                                                                            Node call = new Node("call");
                                                                            Node identifier = new Node("identifier", id.beginLine, id.beginColumn, id.image.toLowerCase());
                                                                            call.addChildren(identifier);
                                                                            if (flag)
                                                                                call.addChildren(params);
                                                                            return call;
                                                                        }
}

Node Params() : 
{ Token d; Node exp; }
{
        d = <DEFAULT_KEYWORD>           { return new Node("default", d.beginLine, d.beginColumn, null); }       
    |
        exp = First_Expression()        { return exp; }
}

Node Vector_Access() : 
{ Token id; Node addresses = new Node("addresses"); Node address; }
{
    id = <IDENTIFIER> 
    ( address = Address() { addresses.addChildren(address); } )+                {
                                                                                    Node res = new Node("structure access");
                                                                                    Node identifier = new Node("identifier", id.beginLine, id.beginColumn, id.image.toLowerCase());
                                                                                    res.addChildren(identifier);
                                                                                    res.addChildren(addresses);
                                                                                    return res;
                                                                                }
}

Node Address() : 
{ Node exp; boolean one = false; }
{
    <OPENING_B> 
    (       exp = First_Expression() { one = true; }
        | 
            <OPENING_B> exp = First_Expression() <CLOSING_B> 
    )
    <CLOSING_B>                                                                 {
                                                                                    if (one) {
                                                                                        Node address = new Node("address", 0, 0, "singleB");
                                                                                        address.addChildren(exp);
                                                                                        return address;
                                                                                    }
                                                                                    else {
                                                                                        Node address = new Node("address", 0, 0, "doubleB");
                                                                                        address.addChildren(exp);
                                                                                        return address;
                                                                                    }
                                                                                }
}

Node Matrix_Access() : 
{ Token id; Node mat; boolean flag = false; Node adds = new Node("addresses"); Node aux; }
{
    id = <IDENTIFIER> <OPENING_B> mat = Matrix_Address() <CLOSING_B>
    ( <OPENING_B> aux = First_Expression() <CLOSING_B> { adds.addChildren(aux); flag = true; } )* 
                                                                            
                                                                                { 
                                                                                    Node access = new Node("matrix access");
                                                                                    Node identifier = new Node("identifier", id.beginLine, id.beginColumn, id.image.toLowerCase());
                                                                                    access.addChildren(identifier);
                                                                                    access.addChildren(mat);
                                                                                    if (flag)
                                                                                        access.addChildren(adds);
                                                                                    return access;
                                                                                }
}

Node Matrix_Address() : 
{ Node exp1 = null; Node exp2 = null; int type = 0; }
{
        LOOKAHEAD(3)
        exp1 = First_Expression() <COMMA> exp2 = First_Expression()             {
                                                                                    Node address = new Node("matrix_address", 0, 0, "both");
                                                                                    address.addChildren(exp1);
                                                                                    address.addChildren(exp2);
                                                                                    return address;
                                                                                }

    |
        exp1 = First_Expression() <COMMA>                                       {
                                                                                    Node address = new Node("matrix_address", 0, 0, "left");
                                                                                    address.addChildren(exp1);
                                                                                    return address;
                                                                                }
    |
        <COMMA> exp2 = First_Expression()                                       {
                                                                                    Node address2 = new Node("matrix_address", 0, 0, "right");
                                                                                    address2.addChildren(exp2);
                                                                                    return address2;
                                                                                }
}

