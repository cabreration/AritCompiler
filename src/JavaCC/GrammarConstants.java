/* Generated By:JavaCC: Do not edit this line. GrammarConstants.java */
package JavaCC;


/** 
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface GrammarConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int MOD = 10;
  /** RegularExpression Id. */
  int EQUALS = 11;
  /** RegularExpression Id. */
  int NOT_EQUALS = 12;
  /** RegularExpression Id. */
  int GREATER_EQUALS = 13;
  /** RegularExpression Id. */
  int LESSER_EQUALS = 14;
  /** RegularExpression Id. */
  int ARROW = 15;
  /** RegularExpression Id. */
  int VALUE_ASIGNMENT = 16;
  /** RegularExpression Id. */
  int OPENING_P = 17;
  /** RegularExpression Id. */
  int CLOSING_P = 18;
  /** RegularExpression Id. */
  int OPENING_B = 19;
  /** RegularExpression Id. */
  int CLOSING_B = 20;
  /** RegularExpression Id. */
  int OPENING_C = 21;
  /** RegularExpression Id. */
  int CLOSING_C = 22;
  /** RegularExpression Id. */
  int COMMA = 23;
  /** RegularExpression Id. */
  int SEMICOLON = 24;
  /** RegularExpression Id. */
  int PLUS = 25;
  /** RegularExpression Id. */
  int MINUS = 26;
  /** RegularExpression Id. */
  int TIMES = 27;
  /** RegularExpression Id. */
  int DIV = 28;
  /** RegularExpression Id. */
  int POWER = 29;
  /** RegularExpression Id. */
  int GREATER = 30;
  /** RegularExpression Id. */
  int LESSER = 31;
  /** RegularExpression Id. */
  int NOT = 32;
  /** RegularExpression Id. */
  int AND = 33;
  /** RegularExpression Id. */
  int OR = 34;
  /** RegularExpression Id. */
  int TERNARY = 35;
  /** RegularExpression Id. */
  int COLON = 36;
  /** RegularExpression Id. */
  int IF_KEYWORD = 37;
  /** RegularExpression Id. */
  int ELSE_KEYWORD = 38;
  /** RegularExpression Id. */
  int SWITCH_KEYWORD = 39;
  /** RegularExpression Id. */
  int CASE_KEYWORD = 40;
  /** RegularExpression Id. */
  int BREAK_KEYWORD = 41;
  /** RegularExpression Id. */
  int WHILE_KEYWORD = 42;
  /** RegularExpression Id. */
  int DO_KEYWORD = 43;
  /** RegularExpression Id. */
  int FOR_KEYWORD = 44;
  /** RegularExpression Id. */
  int IN_KEYWORD = 45;
  /** RegularExpression Id. */
  int CONTINUE_KEYWORD = 46;
  /** RegularExpression Id. */
  int RETURN_KEYWORD = 47;
  /** RegularExpression Id. */
  int FUNCTION_KEYWORD = 48;
  /** RegularExpression Id. */
  int DEFAULT_KEYWORD = 49;
  /** RegularExpression Id. */
  int NULL_VALUE = 50;
  /** RegularExpression Id. */
  int FALSE_VALUE = 51;
  /** RegularExpression Id. */
  int TRUE_VALUE = 52;
  /** RegularExpression Id. */
  int DIGIT = 53;
  /** RegularExpression Id. */
  int FRACTIONAL_DIGITS = 54;
  /** RegularExpression Id. */
  int NUMERIC_VALUE = 55;
  /** RegularExpression Id. */
  int INTEGER_VALUE = 56;
  /** RegularExpression Id. */
  int STRING_VALUE = 57;
  /** RegularExpression Id. */
  int LETTER = 58;
  /** RegularExpression Id. */
  int IDENTIFIER = 59;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int MULTILINE_COMMENT = 1;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\r\"",
    "\"\\f\"",
    "\"\\n\"",
    "<token of kind 6>",
    "<token of kind 7>",
    "\"*#\"",
    "<token of kind 9>",
    "\"%%\"",
    "\"==\"",
    "\"!=\"",
    "\">=\"",
    "\"<=\"",
    "\"=>\"",
    "\"=\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "\",\"",
    "\";\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"^\"",
    "\">\"",
    "\"<\"",
    "\"!\"",
    "\"&\"",
    "\"|\"",
    "\"?\"",
    "\":\"",
    "\"if\"",
    "\"else\"",
    "\"switch\"",
    "\"case\"",
    "\"break\"",
    "\"while\"",
    "\"do\"",
    "\"for\"",
    "\"in\"",
    "\"continue\"",
    "\"return\"",
    "\"function\"",
    "\"default\"",
    "\"null\"",
    "\"false\"",
    "\"true\"",
    "<DIGIT>",
    "<FRACTIONAL_DIGITS>",
    "<NUMERIC_VALUE>",
    "<INTEGER_VALUE>",
    "<STRING_VALUE>",
    "<LETTER>",
    "<IDENTIFIER>",
  };

}
