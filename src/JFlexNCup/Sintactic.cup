package JFlexNCup;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import APIServices.Node;

parser code
{:

    public Node root;

    public void syntax_error(Symbol s)
    {
        System.out.println("LLegue a un error");
        System.out.println(String.valueOf(s));
        System.out.println(s.right);
        System.out.println(s.left);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        System.out.println("El error es " + s.value.toString() + " " + s.right + " " + s.left);
        /*if (s == null)
        {
            errores.add(new ErrorC("Error Sintactico", "null", 0, 0, "ultimo token de finalizacion perdido"));
            System.out.println("Gramatica irreducible");
            return;
        }

        String lexema = s.value.toString();
        int fila = s.right + 1;
        int columna = s.left + 1;

        errores.add(new ErrorC("Error Sintactico", lexema, fila, columna, "Error No Recuperable"));*/
    }

:}


action code
{:
    public void transferChildren(Node losing, Node gaining) {
        int size = losing.getChildrenCount();
        for (int i = 0; i < size; i++) {
            gaining.addChildren(losing.getChildAt(i));
        }
    }
:}

terminal mod, equals, notEquals, greaterEquals, lesserEquals, arrowFunction, valAsignment, openingPar, closingPar;
terminal openingBracket, closingBracket, openingCurly, closingCurly, comma, semicolon, plus, minus, times, div, power;
terminal greater, lesser, not, and, or, ternary, colon, ifKeyword, elseKeyword, switchKeyword, caseKeyword, breakKeyword;
terminal whileKeyword, doKeyword, forKeyword, inKeyword, continueKeyword, returnKeyword, functionKeyword, defaultKeyword;
terminal nullValue, stringValue, numericValue, falseValue, trueValue, id, integerValue;

non terminal Node ROOT, ASIGNMENT, LONE_EXPRESSION, LTWO_EXPRESSION, LTHREE_EXPRESSION, LFOUR_EXPRESSION;
non terminal Node SENTENCES_BLOCK, SENTENCES_LIST, SENTENCE, IF_SENTENCE, ELSE_SENTENCE, SWITCH_SENTENCE, SWITCH_BODY;
non terminal Node CASES_LIST, DEFAULT_CASE, SINGLE_CASE, WHILE_SENTENCE, DOWHILE_SENTENCE, FOR_SENTENCE, BREAK_SENTENCE;
non terminal Node CONTINUE_SENTENCE, RETURN_SENTENCE, VECTOR_ACCESS, ADDRESSES, ADDRESS, PARAMETERS_DECL, PARAMETER;
non terminal Node FUNCTION_CALL, EXPRESSIONS_LIST, MATRIX_ACCESS, MATRIX_ADDRESS, PARAMS, ARROW_FUNCTION;

non terminal OPERATOR, RELATIONAL_OPERATOR;

precedence right valAsignment;
precedence right ternary, colon;
precedence left or;
precedence left and;
precedence left equals, notEquals;
precedence nonassoc lesser, lesserEquals, greater, greaterEquals;
precedence left plus, minus;
precedence left times, div, mod;
precedence left power;
precedence right minus, not;
precedence left openingBracket, closingBracket;
precedence nonassoc openingPar, closingPar;

start with ROOT
;

ROOT ::= SENTENCES_LIST:root    {: Node rut = new Node("root");
                                   rut.addChildren(root);
                                   parser.root = rut;
                                   //System.out.println("Si estoy llegando a la raiz");
                                   RESULT = rut;
                                :}
;

SENTENCES_LIST ::= SENTENCES_LIST:sent SENTENCE:sent2           {: Node sentences = new Node("sentences");
                                                                   transferChildren(sent, sentences);
                                                                   sentences.addChildren(sent2);
                                                                   RESULT = sentences;
                                                                :}

    | SENTENCE:sent                                             {: Node sentences = new Node("sentences");
                                                                   sentences.addChildren(sent);
                                                                   RESULT = sentences;
                                                                :}
;

SENTENCES_BLOCK ::= openingCurly closingCurly                   {: RESULT = new Node("sentences"); :}

    | openingCurly SENTENCES_LIST:list closingCurly             {: RESULT = list; :}
;

SENTENCE ::= ASIGNMENT:sent                                 {: RESULT = sent; :}

    | ASIGNMENT:sent semicolon                              {: RESULT = sent; :}

    | FUNCTION_CALL:call                                    {: RESULT = call; :}

    | FUNCTION_CALL:call semicolon                          {: RESULT = call; :}

    | IF_SENTENCE:si                                        {: RESULT = si; :}

    | SWITCH_SENTENCE:sw                                    {: RESULT = sw; :}

    | WHILE_SENTENCE:w                                      {: RESULT = w; :}

    | DOWHILE_SENTENCE:du                                   {: RESULT = du; :}

    | DOWHILE_SENTENCE:du semicolon                         {: RESULT = du; :}

    | FOR_SENTENCE:f                                        {: RESULT = f; :}

    | RETURN_SENTENCE:r                                     {: RESULT = r; :}

    | RETURN_SENTENCE:r semicolon                           {: RESULT = r; :}

    | BREAK_SENTENCE:b                                      {: RESULT = b; :}

    | BREAK_SENTENCE:b semicolon                            {: RESULT = b; :}

    | CONTINUE_SENTENCE:c                                   {: RESULT = c; :}

    | CONTINUE_SENTENCE:c semicolon                         {: RESULT = c; :}
;

LONE_EXPRESSION ::= LONE_EXPRESSION:exp1 ternary:ter LONE_EXPRESSION:exp2 colon:col LONE_EXPRESSION:exp3   {: Node res = new Node("ternary expression");
                                                                                                              Node tern = new Node("?", terright, terleft, null);
                                                                                                              tern.addChildren(exp1);
                                                                                                              Node colon = new Node(":", colright, colleft, null);
                                                                                                              colon.addChildren(exp2);
                                                                                                              colon.addChildren(exp3);
                                                                                                              res.addChildren(tern);
                                                                                                              res.addChildren(colon);
                                                                                                              RESULT = res;
                                                                                                            :}

    | LONE_EXPRESSION:exp1 valAsignment:v LONE_EXPRESSION:exp2                                              {: Node res = new Node("binary expression");
                                                                                                               Node operator = new Node("=", vright, vleft, null);
                                                                                                               operator.addChildren(exp1);
                                                                                                               operator.addChildren(exp2);
                                                                                                               res.addChildren(operator);
                                                                                                               RESULT = res;
                                                                                                            :}

    | LTWO_EXPRESSION:exp                                                                                   {: RESULT = exp; :}
;

LTWO_EXPRESSION ::= LTWO_EXPRESSION:exp1 and:a LTWO_EXPRESSION:exp2                                         {: Node res = new Node("binary expression");
                                                                                                               Node operator = new Node("&", aright, aleft, null);
                                                                                                               operator.addChildren(exp1);
                                                                                                               operator.addChildren(exp2);
                                                                                                               res.addChildren(operator);
                                                                                                               RESULT = res;
                                                                                                            :}

    | LTWO_EXPRESSION:exp1 or:o LTWO_EXPRESSION:exp2                                                        {: Node res = new Node("binary expression");
                                                                                                               Node operator = new Node("|", oright, oleft, null);
                                                                                                               operator.addChildren(exp1);
                                                                                                               operator.addChildren(exp2);
                                                                                                               res.addChildren(operator);
                                                                                                               RESULT = res;
                                                                                                            :}

    | LTHREE_EXPRESSION:exp                                                                                 {: RESULT = exp; :}
;

LTHREE_EXPRESSION ::= LTHREE_EXPRESSION:exp1 RELATIONAL_OPERATOR:op LTHREE_EXPRESSION:exp2                  {: Node res = new Node("binary expression");
                                                                                                               Node operator = new Node(String.valueOf(op), opright, opleft, null);
                                                                                                               operator.addChildren(exp1);
                                                                                                               operator.addChildren(exp2);
                                                                                                               res.addChildren(operator);
                                                                                                               RESULT = res;
                                                                                                            :}

    | LFOUR_EXPRESSION:exp                                                                                  {: RESULT = exp; :}
;

RELATIONAL_OPERATOR ::= equals  {: RESULT = "=="; :}

    | notEquals                 {: RESULT = "!="; :}

    | greaterEquals             {: RESULT = ">="; :}

    | lesserEquals              {: RESULT = "<="; :}

    | greater                   {: RESULT = ">"; :}

    | lesser                    {: RESULT = "<"; :}
;

LFOUR_EXPRESSION ::= LFOUR_EXPRESSION:exp1 OPERATOR:op LFOUR_EXPRESSION:exp2        {: Node res = new Node("binary expression");
                                                                                       Node operator = new Node(String.valueOf(op), opright, opleft, null);
                                                                                       operator.addChildren(exp1);
                                                                                       operator.addChildren(exp2);
                                                                                       res.addChildren(operator);
                                                                                       RESULT = res;
                                                                                    :}

    | minus:op LFOUR_EXPRESSION:exp                                                  {: Node res = new Node("unary expression");
                                                                                       Node operator = new Node("-", opright, opleft, null);
                                                                                       operator.addChildren(exp);
                                                                                       res.addChildren(operator);
                                                                                       RESULT = res;
                                                                                    :}

    | not:op LFOUR_EXPRESSION:exp                                                    {: Node res = new Node("unary expression");
                                                                                       Node operator = new Node("!", opright, opleft, null);
                                                                                       operator.addChildren(exp);
                                                                                       res.addChildren(operator);
                                                                                       RESULT = res;
                                                                                    :}

    | openingPar LONE_EXPRESSION:exp closingPar                                     {: RESULT = exp; :}

    | FUNCTION_CALL:f                                                               {: RESULT = f; :}

    | VECTOR_ACCESS:st                                                              {: RESULT = st; :}

    | MATRIX_ACCESS:mat                                                             {: RESULT = mat; :}

    | openingPar id:id closingPar arrowFunction SENTENCES_BLOCK:list                {: Node arr = new Node("arrow single");
                                                                                       Node param = new Node("identifier", idright, idleft, String.valueOf(id));
                                                                                       arr.addChildren(param);
                                                                                       arr.addChildren(list);
                                                                                       RESULT = arr;
                                                                                    :}

    | openingPar id:id valAsignment LONE_EXPRESSION:exp closingPar
        arrowFunction SENTENCES_BLOCK:sent                                          {: Node arr = new Node("arrow single");
                                                                                       Node param = new Node("asignment");
                                                                                       Node ident = new Node("identifier", idright, idleft, String.valueOf(id));
                                                                                       param.addChildren(ident);
                                                                                       param.addChildren(exp);
                                                                                       arr.addChildren(param);
                                                                                       arr.addChildren(sent);
                                                                                       RESULT = arr;
                                                                                    :}

    | nullValue:v                                                                   {: RESULT = new Node("null value", vright, vleft, null); :}

    | stringValue:v                                                                 {: RESULT = new Node("string value", vright, vleft, String.valueOf(v)); :}

    | numericValue:v                                                                {: RESULT = new Node("numeric value", vright, vleft, Double.parseDouble(String.valueOf(v))); :}

    | integerValue:v                                                                {: RESULT = new Node("integer value", vright, vleft, Integer.parseInt(String.valueOf(v))); :}

    | falseValue:v                                                                  {: RESULT = new Node("bool value", vright, vleft, false); :}

    | trueValue:v                                                                   {: RESULT = new Node("bool value", vright, vleft, true); :}

    | id:id                                                                         {: RESULT = new Node("identifier", idright, idleft, String.valueOf(id).toLowerCase()); :}

    | openingPar id:id closingPar                                                   {: RESULT = new Node("identifier", idright, idleft, String.valueOf(id)); :}

    | openingPar id:id valAsignment:v LONE_EXPRESSION:exp closingPar                {: Node res = new Node("binary expression");
                                                                                       Node op = new Node("=", vright, vleft, null);
                                                                                       Node ident = new Node("identifier", idright, idleft, String.valueOf(id));
                                                                                       op.addChildren(ident);
                                                                                       op.addChildren(exp);
                                                                                       res.addChildren(op);
                                                                                       RESULT = res;
                                                                                    :}
;

OPERATOR ::= plus       {: RESULT = "+"; :}

    | minus             {: RESULT = "-"; :}

    | times             {: RESULT = "*"; :}

    | div               {: RESULT = "/"; :}

    | power             {: RESULT = "^"; :}

    | mod               {: RESULT = "%%"; :}
;

ASIGNMENT ::= id:id valAsignment LONE_EXPRESSION:exp                {: Node as = new Node("asignment");
                                                                       Node ident = new Node("identifier", idright, idleft, String.valueOf(id));
                                                                       as.addChildren(ident);
                                                                       as.addChildren(exp);
                                                                       RESULT = as;
                                                                    :}

    | MATRIX_ACCESS:mat valAsignment LONE_EXPRESSION:exp            {: Node as = new Node("matrix asignment");
                                                                       as.addChildren(mat);
                                                                       as.addChildren(exp);
                                                                       RESULT = as;
                                                                    :}

    | VECTOR_ACCESS:vec valAsignment LONE_EXPRESSION:exp            {: Node as = new Node("structure asignment");
                                                                       as.addChildren(vec);
                                                                       as.addChildren(exp);
                                                                       RESULT = as;
                                                                    :}

    | id:id valAsignment ARROW_FUNCTION:f                           {: Node as = new Node("arrow function");
                                                                       Node ident = new Node("identifier", idright, idleft, String.valueOf(id));
                                                                       as.addChildren(ident);
                                                                       as.addChildren(f);
                                                                       RESULT = as;
                                                                    :}

    | id:id valAsignment functionKeyword openingPar closingPar SENTENCES_BLOCK:actions                              {: Node fun = new Node("function");
                                                                                                                       Node ident = new Node("identifier", idright, idleft, String.valueOf(id));
                                                                                                                       fun.addChildren(ident);
                                                                                                                       fun.addChildren(actions);
                                                                                                                       RESULT = fun;
                                                                                                                    :}

    | id:id valAsignment functionKeyword openingPar PARAMETERS_DECL:params closingPar SENTENCES_BLOCK:actions       {: Node fun = new Node("function");
                                                                                                                       Node ident = new Node("identifier", idright, idleft, String.valueOf(id));
                                                                                                                       fun.addChildren(ident);
                                                                                                                       fun.addChildren(params);
                                                                                                                       fun.addChildren(actions);
                                                                                                                       RESULT = fun;
                                                                                                                    :}
;

ARROW_FUNCTION ::= openingPar closingPar arrowFunction SENTENCES_BLOCK:list                                                 {: Node res = new Node("arrow def");
                                                                                                                               res.addChildren(list);
                                                                                                                               RESULT = res;
                                                                                                                            :}

    | openingPar id:id comma PARAMETERS_DECL:params closingPar arrowFunction SENTENCES_BLOCK:list                           {: Node res = new Node("arrow def");
                                                                                                                               Node ident = new Node("identifier", idright, idleft, String.valueOf(id));
                                                                                                                               params.addChildren(ident);
                                                                                                                               res.addChildren(params);
                                                                                                                               res.addChildren(list);
                                                                                                                               RESULT = res;
                                                                                                                            :}

    | openingPar id:id valAsignment LONE_EXPRESSION:exp comma PARAMETERS_DECL:params closingPar arrowFunction SENTENCES_BLOCK:list       {: Node res = new Node("arrow def");
                                                                                                                                      Node param = new Node("asignment");
                                                                                                                                      Node ident = new Node("identifier", idright, idleft, String.valueOf(id));
                                                                                                                                      param.addChildren(ident);
                                                                                                                                      param.addChildren(exp);
                                                                                                                                      params.addChildren(param);
                                                                                                                                      res.addChildren(params);
                                                                                                                                      res.addChildren(list);
                                                                                                                                      RESULT = res;
                                                                                                                                    :}
;

PARAMETERS_DECL ::= PARAMETERS_DECL:ters comma PARAMETER:par                    {: Node params = new Node("paratemers");
                                                                                   transferChildren(ters, params);
                                                                                   params.addChildren(par);
                                                                                   RESULT = params;
                                                                                :}

    | PARAMETER:par                                                             {: Node params = new Node("parameters");
                                                                                   params.addChildren(par);
                                                                                   RESULT = params; :}
;

PARAMETER ::= id:id                                         {: RESULT = new Node("identifier", idright, idleft, String.valueOf(id)); :}

    | id:id valAsignment LONE_EXPRESSION:exp                {: Node param = new Node("asignment");
                                                               Node ident = new Node("identifier", idright, idleft, String.valueOf(id));
                                                               param.addChildren(ident);
                                                               param.addChildren(exp);
                                                               RESULT = param;
                                                            :}
;

FUNCTION_CALL ::= id:id openingPar closingPar                                   {: Node call = new Node("call");
                                                                                   Node ident = new Node("identifier", idright, idleft, String.valueOf(id));
                                                                                   call.addChildren(ident);
                                                                                   RESULT = call;
                                                                                :}

    | id:id openingPar EXPRESSIONS_LIST:params closingPar                       {: Node call = new Node("call");
                                                                                   Node ident = new Node("identifier", idright, idleft, String.valueOf(id));
                                                                                   call.addChildren(ident);
                                                                                   call.addChildren(params);
                                                                                   RESULT = call;
                                                                                :}
;

EXPRESSIONS_LIST ::= EXPRESSIONS_LIST:list comma PARAMS:param                   {: Node params = new Node("params");
                                                                                   transferChildren(list, params);
                                                                                   params.addChildren(param);
                                                                                   RESULT = params;
                                                                                :}

    | PARAMS:param                                                              {: Node params = new Node("params");
                                                                                   params.addChildren(param);
                                                                                   RESULT = params;
                                                                                :}
;

PARAMS ::= defaultKeyword:def               {: System.out.println("default"); RESULT = new Node("default", defright, defleft, null); :}

    | LONE_EXPRESSION:exp                {: RESULT = exp; :}
;

IF_SENTENCE ::= ifKeyword:i openingPar LONE_EXPRESSION:cond closingPar SENTENCES_BLOCK:sentences                {:  Node ifNode = new Node("if sentence", iright, ileft, null);
                                                                                                                    Node condition = new Node("condition");
                                                                                                                    condition.addChildren(cond);
                                                                                                                    ifNode.addChildren(condition);
                                                                                                                    ifNode.addChildren(sentences);
                                                                                                                    RESULT = ifNode;
                                                                                                                 :}

    | ifKeyword:i openingPar LONE_EXPRESSION:cond closingPar SENTENCES_BLOCK:sentences ELSE_SENTENCE:elseNode        {:  Node ifNode = new Node("if sentence", iright, ileft, null);
                                                                                                                        Node condition = new Node("condition");
                                                                                                                        condition.addChildren(cond);
                                                                                                                        ifNode.addChildren(condition);
                                                                                                                        ifNode.addChildren(sentences);
                                                                                                                        ifNode.addChildren(elseNode);
                                                                                                                        RESULT = ifNode;
                                                                                                                     :}
;

ELSE_SENTENCE ::= elseKeyword:e SENTENCES_BLOCK:sentences                  {: Node elseNode = new Node("else sentence", eright, eleft, null);
                                                                              elseNode.addChildren(sentences);
                                                                              RESULT = elseNode;
                                                                           :}

    | elseKeyword:e IF_SENTENCE:ifSentences                                {: Node elseNode = new Node("else if sentence", eright, eleft, null);
                                                                              transferChildren(ifSentences, elseNode);
                                                                              RESULT = elseNode;
                                                                           :}
;

SWITCH_SENTENCE ::= switchKeyword:s openingPar LONE_EXPRESSION:val closingPar openingCurly SWITCH_BODY:body closingCurly      {:  Node switchNode = new Node("switch sentence", sright, sleft, null);
                                                                                                                                Node condition = new Node("condition");
                                                                                                                                condition.addChildren(val);
                                                                                                                                switchNode.addChildren(condition);
                                                                                                                                switchNode.addChildren(body);
                                                                                                                                RESULT = switchNode;
                                                                                                                            :}
;

SWITCH_BODY ::= CASES_LIST:cases                {: RESULT = cases; :}

    | CASES_LIST:cases DEFAULT_CASE:def         {: cases.addChildren(def);
                                                   RESULT = cases;
                                                :}
;

CASES_LIST ::= CASES_LIST:cases SINGLE_CASE:single              {: Node casesNode = new Node("cases_list");
                                                                   transferChildren(cases, casesNode);
                                                                   casesNode.addChildren(single);
                                                                   RESULT = casesNode;
                                                                :}

    | SINGLE_CASE:single                                        {: Node situation = new Node("cases_list");
                                                                   situation.addChildren(single);
                                                                   RESULT = situation;
                                                                :}
;

SINGLE_CASE ::= caseKeyword:c LONE_EXPRESSION:exp colon SENTENCES_LIST:actions      {: Node single = new Node("case", cright, cleft, null);
                                                                                       Node condition = new Node("value");
                                                                                       condition.addChildren(exp);
                                                                                       single.addChildren(condition);
                                                                                       single.addChildren(actions);
                                                                                       RESULT = single;
                                                                                    :}
;

DEFAULT_CASE ::= defaultKeyword colon SENTENCES_LIST:actions                        {: Node defa = new Node("default");
                                                                                       defa.addChildren(actions);
                                                                                       RESULT = defa;
                                                                                    :}
;

WHILE_SENTENCE ::= whileKeyword openingPar LONE_EXPRESSION:exp closingPar SENTENCES_BLOCK:actions       {:  Node whileNode = new Node("while sentence");
                                                                                                            Node condition = new Node("condition");
                                                                                                            condition.addChildren(exp);
                                                                                                            whileNode.addChildren(condition);
                                                                                                            whileNode.addChildren(actions);
                                                                                                            RESULT = whileNode;
                                                                                                        :}
;

DOWHILE_SENTENCE ::= doKeyword SENTENCES_BLOCK:actions whileKeyword openingPar LONE_EXPRESSION:exp closingPar       {:  Node doNode = new Node("do while sentence");
                                                                                                                        Node condition = new Node("condition");
                                                                                                                        condition.addChildren(exp);
                                                                                                                        doNode.addChildren(actions);
                                                                                                                        doNode.addChildren(condition);
                                                                                                                        RESULT = doNode;
                                                                                                                    :}
;

FOR_SENTENCE ::= forKeyword openingPar id:id inKeyword LONE_EXPRESSION:exp closingPar SENTENCES_BLOCK:actions       {:  Node forNode = new Node("for sentence");
                                                                                                                        Node idNode = new Node("identifier", idright, idleft, String.valueOf(id));
                                                                                                                        forNode.addChildren(idNode);
                                                                                                                        Node condition = new Node("condition");
                                                                                                                        condition.addChildren(exp);
                                                                                                                        forNode.addChildren(condition);
                                                                                                                        forNode.addChildren(actions);
                                                                                                                        RESULT = forNode;
                                                                                                                    :}
;

RETURN_SENTENCE ::= returnKeyword                                               {: RESULT = new Node("return sentence"); :}

    | returnKeyword openingPar LONE_EXPRESSION:exp closingPar                   {: Node retNode = new Node("return sentence");
                                                                                   retNode.addChildren(exp);
                                                                                   RESULT = retNode;
                                                                                :}
;

BREAK_SENTENCE ::=  breakKeyword:b                    {: RESULT = new Node("break sentence", bright, bleft, null); :}
;

CONTINUE_SENTENCE ::= continueKeyword:b               {: RESULT = new Node("continue sentence", bright, bleft, null); :}
;

VECTOR_ACCESS ::= id:id ADDRESSES:add               {: Node res = new Node("structure access");
                                                       Node ident = new Node("identifier", idright, idleft, String.valueOf(id));
                                                       res.addChildren(ident);
                                                       res.addChildren(add);
                                                       RESULT = res;
                                                    :}
;

ADDRESSES ::= ADDRESSES:addresses ADDRESS:single                {: Node adds = new Node("addresses");
                                                                   transferChildren(addresses, adds);
                                                                   adds.addChildren(single);
                                                                   RESULT = adds;
                                                                :}

    | ADDRESS:single                                            {: Node adds = new Node("addresses");
                                                                   adds.addChildren(single);
                                                                   RESULT = adds;
                                                                :}
;

ADDRESS ::= openingBracket LONE_EXPRESSION:exp closingBracket                                {: Node address = new Node("address", 0, 0, "singleB");
                                                                                                   address.addChildren(exp);
                                                                                                   RESULT = address;
                                                                                                :}

    | openingBracket openingBracket LONE_EXPRESSION:exp closingBracket closingBracket        {: Node address = new Node("address", 0, 0, "doubleB");
                                                                                                   address.addChildren(exp);
                                                                                                   RESULT = address;
                                                                                                :}
;

MATRIX_ACCESS ::= id:id MATRIX_ADDRESS:mat                      {: Node access = new Node("matrix");
                                                                   Node ident = new Node("identifier", idright, idleft, String.valueOf(id));
                                                                   access.addChildren(ident);
                                                                   access.addChildren(mat);
                                                                   RESULT = access;
                                                                :}
;

MATRIX_ADDRESS ::= openingBracket LONE_EXPRESSION:exp1 comma:c LONE_EXPRESSION:exp2 closingBracket        {: Node address = new Node("matrix_address", 0, 0, "doubleM");
                                                                                                                   address.addChildren(exp1);
                                                                                                                   address.addChildren(exp2);
                                                                                                                   RESULT = address;
                                                                                                                :}

    | openingBracket LONE_EXPRESSION:exp comma:c closingBracket                                              {: Node address = new Node("matrix_address", 0, 0, "leftM");
                                                                                                                   address.addChildren(exp);
                                                                                                                   RESULT = address;
                                                                                                                :}

    | openingBracket comma:c LONE_EXPRESSION:exp closingBracket                                              {: Node address = new Node("matrix_address", 0, 0, "rightM");
                                                                                                                   address.addChildren(exp);
                                                                                                                   RESULT = address;
                                                                                                                :}
;
