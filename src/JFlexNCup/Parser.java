
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Feb 27 18:07:12 CST 2020
//----------------------------------------------------

package JFlexNCup;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import APIServices.Node;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Feb 27 18:07:12 CST 2020
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\135\000\002\002\004\000\002\002\003\000\002\011" +
    "\004\000\002\011\003\000\002\010\004\000\002\010\005" +
    "\000\002\012\003\000\002\012\004\000\002\004\007\000" +
    "\002\004\005\000\002\004\003\000\002\005\005\000\002" +
    "\005\005\000\002\005\003\000\002\006\005\000\002\006" +
    "\003\000\002\044\003\000\002\044\003\000\002\044\003" +
    "\000\002\044\003\000\002\044\003\000\002\044\003\000" +
    "\002\007\005\000\002\007\004\000\002\007\004\000\002" +
    "\007\005\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\007\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\005\000\002\043\003\000\002" +
    "\043\003\000\002\043\003\000\002\043\003\000\002\043" +
    "\003\000\002\043\003\000\002\003\005\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\003\010\000" +
    "\002\003\011\000\002\042\006\000\002\042\011\000\002" +
    "\042\013\000\002\035\005\000\002\035\006\000\002\036" +
    "\005\000\002\036\003\000\002\041\003\000\002\041\003" +
    "\000\002\013\007\000\002\013\010\000\002\014\004\000" +
    "\002\014\004\000\002\015\011\000\002\016\003\000\002" +
    "\016\004\000\002\017\004\000\002\017\003\000\002\021" +
    "\006\000\002\020\005\000\002\022\007\000\002\023\010" +
    "\000\002\023\011\000\002\024\011\000\002\027\003\000" +
    "\002\027\004\000\002\027\006\000\002\027\007\000\002" +
    "\025\003\000\002\025\004\000\002\026\003\000\002\026" +
    "\004\000\002\033\005\000\002\033\003\000\002\034\003" +
    "\000\002\034\003\000\002\031\004\000\002\031\003\000" +
    "\002\032\005\000\002\032\007\000\002\037\004\000\002" +
    "\040\007\000\002\040\006\000\002\040\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\167\000\004\061\012\001\002\000\010\002\ufffe\020" +
    "\ufffe\061\ufffe\001\002\000\012\002\ufffb\020\ufffb\022\171" +
    "\061\ufffb\001\002\000\004\012\167\001\002\000\006\002" +
    "\000\061\012\001\002\000\004\002\166\001\002\000\004" +
    "\012\164\001\002\000\006\012\014\015\015\001\002\000" +
    "\062\002\uffa8\004\uffa8\005\uffa8\006\uffa8\007\uffa8\010\uffa8" +
    "\012\uffa8\014\uffa8\016\uffa8\020\uffa8\021\uffa8\022\uffa8\023" +
    "\uffa8\024\uffa8\025\uffa8\026\uffa8\027\uffa8\030\uffa8\031\uffa8" +
    "\033\uffa8\034\uffa8\035\uffa8\036\uffa8\061\uffa8\001\002\000" +
    "\026\013\127\024\026\032\023\052\125\054\033\055\034" +
    "\056\022\057\027\060\031\061\020\001\002\000\026\013" +
    "\016\021\036\024\026\032\023\054\033\055\034\056\022" +
    "\057\027\060\031\061\020\001\002\000\024\013\016\024" +
    "\026\032\023\054\033\055\034\056\022\057\027\060\031" +
    "\061\112\001\002\000\062\002\uffe6\004\uffe6\005\uffe6\006" +
    "\uffe6\007\uffe6\010\uffe6\012\uffe6\014\uffe6\016\uffe6\020\uffe6" +
    "\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6\027" +
    "\uffe6\030\uffe6\031\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6" +
    "\061\uffe6\001\002\000\066\002\uffde\004\uffde\005\uffde\006" +
    "\uffde\007\uffde\010\uffde\012\uffde\013\101\014\uffde\015\015" +
    "\016\uffde\020\uffde\021\uffde\022\uffde\023\uffde\024\uffde\025" +
    "\uffde\026\uffde\027\uffde\030\uffde\031\uffde\033\uffde\034\uffde" +
    "\035\uffde\036\uffde\061\uffde\001\002\000\062\002\ufff7\004" +
    "\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7\012\ufff7\014\ufff7" +
    "\016\ufff7\020\ufff7\021\ufff7\022\ufff7\023\ufff7\024\ufff7\025" +
    "\ufff7\026\ufff7\027\ufff7\030\ufff7\031\ufff7\033\075\034\076" +
    "\035\ufff7\036\ufff7\061\ufff7\001\002\000\062\002\uffe1\004" +
    "\uffe1\005\uffe1\006\uffe1\007\uffe1\010\uffe1\012\uffe1\014\uffe1" +
    "\016\uffe1\020\uffe1\021\uffe1\022\uffe1\023\uffe1\024\uffe1\025" +
    "\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1\033\uffe1\034\uffe1" +
    "\035\uffe1\036\uffe1\061\uffe1\001\002\000\024\013\016\024" +
    "\026\032\023\054\033\055\034\056\022\057\027\060\031" +
    "\061\020\001\002\000\062\002\ufff4\004\ufff4\005\067\006" +
    "\066\007\065\010\070\012\ufff4\014\ufff4\016\ufff4\020\ufff4" +
    "\021\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4\026\ufff4\027" +
    "\ufff4\030\071\031\064\033\ufff4\034\ufff4\035\ufff4\036\ufff4" +
    "\061\ufff4\001\002\000\062\002\ufff2\004\055\005\ufff2\006" +
    "\ufff2\007\ufff2\010\ufff2\012\ufff2\014\ufff2\016\ufff2\020\ufff2" +
    "\021\ufff2\022\ufff2\023\061\024\057\025\060\026\062\027" +
    "\056\030\ufff2\031\ufff2\033\ufff2\034\ufff2\035\ufff2\036\ufff2" +
    "\061\ufff2\001\002\000\024\013\016\024\026\032\023\054" +
    "\033\055\034\056\022\057\027\060\031\061\020\001\002" +
    "\000\062\002\uffe0\004\uffe0\005\uffe0\006\uffe0\007\uffe0\010" +
    "\uffe0\012\uffe0\014\uffe0\016\uffe0\020\uffe0\021\uffe0\022\uffe0" +
    "\023\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0\031" +
    "\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\061\uffe0\001\002" +
    "\000\062\002\uffe5\004\uffe5\005\uffe5\006\uffe5\007\uffe5\010" +
    "\uffe5\012\uffe5\014\uffe5\016\uffe5\020\uffe5\021\uffe5\022\uffe5" +
    "\023\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031" +
    "\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5\061\uffe5\001\002" +
    "\000\062\002\uffdf\004\uffdf\005\uffdf\006\uffdf\007\uffdf\010" +
    "\uffdf\012\uffdf\014\uffdf\016\uffdf\020\uffdf\021\uffdf\022\uffdf" +
    "\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031" +
    "\uffdf\033\uffdf\034\uffdf\035\uffdf\036\uffdf\061\uffdf\001\002" +
    "\000\010\012\041\021\047\035\042\001\002\000\062\002" +
    "\uffe3\004\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3\012\uffe3" +
    "\014\uffe3\016\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024" +
    "\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\033\uffe3" +
    "\034\uffe3\035\uffe3\036\uffe3\061\uffe3\001\002\000\062\002" +
    "\uffe2\004\uffe2\005\uffe2\006\uffe2\007\uffe2\010\uffe2\012\uffe2" +
    "\014\uffe2\016\uffe2\020\uffe2\021\uffe2\022\uffe2\023\uffe2\024" +
    "\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\033\uffe2" +
    "\034\uffe2\035\uffe2\036\uffe2\061\uffe2\001\002\000\062\002" +
    "\uffe7\004\uffe7\005\uffe7\006\uffe7\007\uffe7\010\uffe7\012\uffe7" +
    "\014\uffe7\016\uffe7\020\uffe7\021\uffe7\022\uffe7\023\uffe7\024" +
    "\uffe7\025\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7\033\uffe7" +
    "\034\uffe7\035\uffe7\036\uffe7\061\uffe7\001\002\000\024\013" +
    "\016\024\026\032\023\054\033\055\034\056\022\057\027" +
    "\060\031\061\020\001\002\000\010\012\041\016\040\035" +
    "\042\001\002\000\062\002\uffa5\004\uffa5\005\uffa5\006\uffa5" +
    "\007\uffa5\010\uffa5\012\uffa5\014\uffa5\016\uffa5\020\uffa5\021" +
    "\uffa5\022\uffa5\023\uffa5\024\uffa5\025\uffa5\026\uffa5\027\uffa5" +
    "\030\uffa5\031\uffa5\033\uffa5\034\uffa5\035\uffa5\036\uffa5\061" +
    "\uffa5\001\002\000\024\013\016\024\026\032\023\054\033" +
    "\055\034\056\022\057\027\060\031\061\020\001\002\000" +
    "\024\013\016\024\026\032\023\054\033\055\034\056\022" +
    "\057\027\060\031\061\020\001\002\000\010\012\041\035" +
    "\042\036\044\001\002\000\024\013\016\024\026\032\023" +
    "\054\033\055\034\056\022\057\027\060\031\061\020\001" +
    "\002\000\062\002\ufff9\004\ufff9\005\ufff9\006\ufff9\007\ufff9" +
    "\010\ufff9\012\ufff9\014\ufff9\016\ufff9\020\ufff9\021\ufff9\022" +
    "\ufff9\023\ufff9\024\ufff9\025\ufff9\026\ufff9\027\ufff9\030\ufff9" +
    "\031\ufff9\033\ufff9\034\ufff9\035\042\036\ufff9\061\ufff9\001" +
    "\002\000\062\002\ufff8\004\ufff8\005\ufff8\006\ufff8\007\ufff8" +
    "\010\ufff8\012\041\014\ufff8\016\ufff8\020\ufff8\021\ufff8\022" +
    "\ufff8\023\ufff8\024\ufff8\025\ufff8\026\ufff8\027\ufff8\030\ufff8" +
    "\031\ufff8\033\ufff8\034\ufff8\035\042\036\ufff8\061\ufff8\001" +
    "\002\000\026\013\016\016\050\024\026\032\023\054\033" +
    "\055\034\056\022\057\027\060\031\061\020\001\002\000" +
    "\062\002\uffa6\004\uffa6\005\uffa6\006\uffa6\007\uffa6\010\uffa6" +
    "\012\uffa6\014\uffa6\016\uffa6\020\uffa6\021\uffa6\022\uffa6\023" +
    "\uffa6\024\uffa6\025\uffa6\026\uffa6\027\uffa6\030\uffa6\031\uffa6" +
    "\033\uffa6\034\uffa6\035\uffa6\036\uffa6\061\uffa6\001\002\000" +
    "\010\012\041\016\052\035\042\001\002\000\062\002\uffa7" +
    "\004\uffa7\005\uffa7\006\uffa7\007\uffa7\010\uffa7\012\uffa7\014" +
    "\uffa7\016\uffa7\020\uffa7\021\uffa7\022\uffa7\023\uffa7\024\uffa7" +
    "\025\uffa7\026\uffa7\027\uffa7\030\uffa7\031\uffa7\033\uffa7\034" +
    "\uffa7\035\uffa7\036\uffa7\061\uffa7\001\002\000\062\002\uffea" +
    "\004\uffea\005\uffea\006\uffea\007\uffea\010\uffea\012\uffea\014" +
    "\uffea\016\uffea\020\uffea\021\uffea\022\uffea\023\uffea\024\uffea" +
    "\025\uffea\026\uffea\027\uffea\030\uffea\031\uffea\033\uffea\034" +
    "\uffea\035\uffea\036\uffea\061\uffea\001\002\000\024\013\016" +
    "\024\026\032\023\054\033\055\034\056\022\057\027\060" +
    "\031\061\020\001\002\000\024\013\uffd7\024\uffd7\032\uffd7" +
    "\054\uffd7\055\uffd7\056\uffd7\057\uffd7\060\uffd7\061\uffd7\001" +
    "\002\000\024\013\uffd8\024\uffd8\032\uffd8\054\uffd8\055\uffd8" +
    "\056\uffd8\057\uffd8\060\uffd8\061\uffd8\001\002\000\024\013" +
    "\uffdb\024\uffdb\032\uffdb\054\uffdb\055\uffdb\056\uffdb\057\uffdb" +
    "\060\uffdb\061\uffdb\001\002\000\024\013\uffda\024\uffda\032" +
    "\uffda\054\uffda\055\uffda\056\uffda\057\uffda\060\uffda\061\uffda" +
    "\001\002\000\024\013\uffdc\024\uffdc\032\uffdc\054\uffdc\055" +
    "\uffdc\056\uffdc\057\uffdc\060\uffdc\061\uffdc\001\002\000\024" +
    "\013\uffd9\024\uffd9\032\uffd9\054\uffd9\055\uffd9\056\uffd9\057" +
    "\uffd9\060\uffd9\061\uffd9\001\002\000\062\002\uffeb\004\055" +
    "\005\uffeb\006\uffeb\007\uffeb\010\uffeb\012\uffeb\014\uffeb\016" +
    "\uffeb\020\uffeb\021\uffeb\022\uffeb\023\061\024\057\025\060" +
    "\026\062\027\056\030\uffeb\031\uffeb\033\uffeb\034\uffeb\035" +
    "\uffeb\036\uffeb\061\uffeb\001\002\000\024\013\uffec\024\uffec" +
    "\032\uffec\054\uffec\055\uffec\056\uffec\057\uffec\060\uffec\061" +
    "\uffec\001\002\000\024\013\uffef\024\uffef\032\uffef\054\uffef" +
    "\055\uffef\056\uffef\057\uffef\060\uffef\061\uffef\001\002\000" +
    "\024\013\ufff0\024\ufff0\032\ufff0\054\ufff0\055\ufff0\056\ufff0" +
    "\057\ufff0\060\ufff0\061\ufff0\001\002\000\024\013\ufff1\024" +
    "\ufff1\032\ufff1\054\ufff1\055\ufff1\056\ufff1\057\ufff1\060\ufff1" +
    "\061\ufff1\001\002\000\024\013\uffee\024\uffee\032\uffee\054" +
    "\uffee\055\uffee\056\uffee\057\uffee\060\uffee\061\uffee\001\002" +
    "\000\024\013\uffed\024\uffed\032\uffed\054\uffed\055\uffed\056" +
    "\uffed\057\uffed\060\uffed\061\uffed\001\002\000\024\013\016" +
    "\024\026\032\023\054\033\055\034\056\022\057\027\060" +
    "\031\061\020\001\002\000\062\002\ufff3\004\ufff3\005\067" +
    "\006\066\007\065\010\070\012\ufff3\014\ufff3\016\ufff3\020" +
    "\ufff3\021\ufff3\022\ufff3\023\ufff3\024\ufff3\025\ufff3\026\ufff3" +
    "\027\ufff3\030\071\031\064\033\ufff3\034\ufff3\035\ufff3\036" +
    "\ufff3\061\ufff3\001\002\000\062\002\uffe9\004\uffe9\005\uffe9" +
    "\006\uffe9\007\uffe9\010\uffe9\012\uffe9\014\uffe9\016\uffe9\020" +
    "\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9\026\uffe9" +
    "\027\uffe9\030\uffe9\031\uffe9\033\uffe9\034\uffe9\035\uffe9\036" +
    "\uffe9\061\uffe9\001\002\000\024\013\016\024\026\032\023" +
    "\054\033\055\034\056\022\057\027\060\031\061\020\001" +
    "\002\000\024\013\016\024\026\032\023\054\033\055\034" +
    "\056\022\057\027\060\031\061\020\001\002\000\062\002" +
    "\ufff5\004\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5\012\ufff5" +
    "\014\ufff5\016\ufff5\020\ufff5\021\ufff5\022\ufff5\023\ufff5\024" +
    "\ufff5\025\ufff5\026\ufff5\027\ufff5\030\ufff5\031\ufff5\033\075" +
    "\034\ufff5\035\ufff5\036\ufff5\061\ufff5\001\002\000\062\002" +
    "\ufff6\004\ufff6\005\ufff6\006\ufff6\007\ufff6\010\ufff6\012\ufff6" +
    "\014\ufff6\016\ufff6\020\ufff6\021\ufff6\022\ufff6\023\ufff6\024" +
    "\ufff6\025\ufff6\026\ufff6\027\ufff6\030\ufff6\031\ufff6\033\ufff6" +
    "\034\ufff6\035\ufff6\036\ufff6\061\ufff6\001\002\000\030\013" +
    "\016\014\106\024\026\032\023\053\105\054\033\055\034" +
    "\056\022\057\027\060\031\061\020\001\002\000\006\014" +
    "\110\021\107\001\002\000\006\014\uffca\021\uffca\001\002" +
    "\000\012\012\041\014\uffc8\021\uffc8\035\042\001\002\000" +
    "\006\014\uffc9\021\uffc9\001\002\000\062\002\uffcd\004\uffcd" +
    "\005\uffcd\006\uffcd\007\uffcd\010\uffcd\012\uffcd\014\uffcd\016" +
    "\uffcd\020\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd" +
    "\026\uffcd\027\uffcd\030\uffcd\031\uffcd\033\uffcd\034\uffcd\035" +
    "\uffcd\036\uffcd\061\uffcd\001\002\000\026\013\016\024\026" +
    "\032\023\053\105\054\033\055\034\056\022\057\027\060" +
    "\031\061\020\001\002\000\062\002\uffcc\004\uffcc\005\uffcc" +
    "\006\uffcc\007\uffcc\010\uffcc\012\uffcc\014\uffcc\016\uffcc\020" +
    "\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026\uffcc" +
    "\027\uffcc\030\uffcc\031\uffcc\033\uffcc\034\uffcc\035\uffcc\036" +
    "\uffcc\061\uffcc\001\002\000\006\014\uffcb\021\uffcb\001\002" +
    "\000\050\004\uffde\005\uffde\006\uffde\007\uffde\010\uffde\012" +
    "\uffde\013\101\014\115\015\015\023\uffde\024\uffde\025\uffde" +
    "\026\uffde\027\uffde\030\uffde\031\uffde\033\uffde\034\uffde\035" +
    "\uffde\001\002\000\010\012\041\014\114\035\042\001\002" +
    "\000\062\002\uffe8\004\uffe8\005\uffe8\006\uffe8\007\uffe8\010" +
    "\uffe8\012\uffe8\014\uffe8\016\uffe8\020\uffe8\021\uffe8\022\uffe8" +
    "\023\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8\031" +
    "\uffe8\033\uffe8\034\uffe8\035\uffe8\036\uffe8\061\uffe8\001\002" +
    "\000\064\002\uffdd\004\uffdd\005\uffdd\006\uffdd\007\uffdd\010" +
    "\uffdd\011\116\012\uffdd\014\uffdd\016\uffdd\020\uffdd\021\uffdd" +
    "\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030" +
    "\uffdd\031\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\061\uffdd" +
    "\001\002\000\004\017\117\001\002\000\006\020\121\061" +
    "\012\001\002\000\062\002\uffe4\004\uffe4\005\uffe4\006\uffe4" +
    "\007\uffe4\010\uffe4\012\uffe4\014\uffe4\016\uffe4\020\uffe4\021" +
    "\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4\026\uffe4\027\uffe4" +
    "\030\uffe4\031\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4\061" +
    "\uffe4\001\002\000\062\002\ufffd\004\ufffd\005\ufffd\006\ufffd" +
    "\007\ufffd\010\ufffd\012\ufffd\014\ufffd\016\ufffd\020\ufffd\021" +
    "\ufffd\022\ufffd\023\ufffd\024\ufffd\025\ufffd\026\ufffd\027\ufffd" +
    "\030\ufffd\031\ufffd\033\ufffd\034\ufffd\035\ufffd\036\ufffd\061" +
    "\ufffd\001\002\000\006\020\123\061\012\001\002\000\062" +
    "\002\ufffc\004\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc\012" +
    "\ufffc\014\ufffc\016\ufffc\020\ufffc\021\ufffc\022\ufffc\023\ufffc" +
    "\024\ufffc\025\ufffc\026\ufffc\027\ufffc\030\ufffc\031\ufffc\033" +
    "\ufffc\034\ufffc\035\ufffc\036\ufffc\061\ufffc\001\002\000\010" +
    "\002\uffff\020\uffff\061\uffff\001\002\000\004\013\156\001" +
    "\002\000\022\002\uffd6\012\041\014\uffd6\020\uffd6\021\uffd6" +
    "\022\uffd6\035\042\061\uffd6\001\002\000\026\013\016\014" +
    "\132\024\026\032\023\054\033\055\034\056\022\057\027" +
    "\060\031\061\131\001\002\000\016\002\uffd3\014\uffd3\020" +
    "\uffd3\021\uffd3\022\uffd3\061\uffd3\001\002\000\052\004\uffde" +
    "\005\uffde\006\uffde\007\uffde\010\uffde\012\136\013\101\014" +
    "\115\015\015\021\135\023\uffde\024\uffde\025\uffde\026\uffde" +
    "\027\uffde\030\uffde\031\uffde\033\uffde\034\uffde\035\uffde\001" +
    "\002\000\004\011\133\001\002\000\004\017\117\001\002" +
    "\000\016\002\uffd0\014\uffd0\020\uffd0\021\uffd0\022\uffd0\061" +
    "\uffd0\001\002\000\004\061\144\001\002\000\024\013\016" +
    "\024\026\032\023\054\033\055\034\056\022\057\027\060" +
    "\031\061\020\001\002\000\010\012\041\021\140\035\042" +
    "\001\002\000\004\061\144\001\002\000\006\014\uffad\021" +
    "\uffad\001\002\000\006\014\146\021\145\001\002\000\006" +
    "\014\uffaf\021\uffaf\001\002\000\012\012\014\014\uffae\015" +
    "\015\021\uffae\001\002\000\004\061\144\001\002\000\004" +
    "\011\147\001\002\000\004\017\117\001\002\000\016\002" +
    "\uffce\014\uffce\020\uffce\021\uffce\022\uffce\061\uffce\001\002" +
    "\000\006\014\uffb0\021\uffb0\001\002\000\006\014\153\021" +
    "\145\001\002\000\004\011\154\001\002\000\004\017\117" +
    "\001\002\000\016\002\uffcf\014\uffcf\020\uffcf\021\uffcf\022" +
    "\uffcf\061\uffcf\001\002\000\006\014\157\061\144\001\002" +
    "\000\004\017\117\001\002\000\006\014\161\021\145\001" +
    "\002\000\004\017\117\001\002\000\016\002\uffd1\014\uffd1" +
    "\020\uffd1\021\uffd1\022\uffd1\061\uffd1\001\002\000\016\002" +
    "\uffd2\014\uffd2\020\uffd2\021\uffd2\022\uffd2\061\uffd2\001\002" +
    "\000\024\013\016\024\026\032\023\054\033\055\034\056" +
    "\022\057\027\060\031\061\020\001\002\000\022\002\uffd5" +
    "\012\041\014\uffd5\020\uffd5\021\uffd5\022\uffd5\035\042\061" +
    "\uffd5\001\002\000\004\002\001\001\002\000\024\013\016" +
    "\024\026\032\023\054\033\055\034\056\022\057\027\060" +
    "\031\061\020\001\002\000\022\002\uffd4\012\041\014\uffd4" +
    "\020\uffd4\021\uffd4\022\uffd4\035\042\061\uffd4\001\002\000" +
    "\010\002\ufffa\020\ufffa\061\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\167\000\016\002\007\003\004\011\006\012\003\030" +
    "\005\037\010\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\003\004\012\123\030\005\037" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\040\012\001\001\000\002\001\001\000\022\004\125\005" +
    "\020\006\023\007\024\030\016\035\034\037\027\042\127" +
    "\001\001\000\020\004\031\005\020\006\023\007\024\030" +
    "\016\035\034\037\027\001\001\000\020\004\112\005\020" +
    "\006\023\007\024\030\016\035\034\037\027\001\001\000" +
    "\002\001\001\000\004\040\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\004\073\005\020\006\023\007" +
    "\024\030\016\035\034\037\027\001\001\000\004\044\071" +
    "\001\001\000\004\043\053\001\001\000\020\004\052\005" +
    "\020\006\023\007\024\030\016\035\034\037\027\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\004\036\005\020\006\023\007\024\030" +
    "\016\035\034\037\027\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\004\045\005\020\006\023\007\024\030" +
    "\016\035\034\037\027\001\001\000\020\004\042\005\020" +
    "\006\023\007\024\030\016\035\034\037\027\001\001\000" +
    "\002\001\001\000\020\004\044\005\020\006\023\007\024" +
    "\030\016\035\034\037\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\004\050\005\020\006\023\007\024" +
    "\030\016\035\034\037\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\007\062\030\016\035\034\037\027\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\043\053\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\006\072\007\024\030\016\035\034\037\027\001\001" +
    "\000\004\044\071\001\001\000\002\001\001\000\016\005" +
    "\077\006\023\007\024\030\016\035\034\037\027\001\001" +
    "\000\016\005\076\006\023\007\024\030\016\035\034\037" +
    "\027\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\004\103\005\020\006\023\007\024\030\016\035\034\036" +
    "\101\037\027\041\102\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\004\103\005\020\006\023\007\024\030\016" +
    "\035\034\037\027\041\110\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\040\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\117\001" +
    "\001\000\014\003\004\011\121\012\003\030\005\037\010" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\003" +
    "\004\012\123\030\005\037\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\004\112\005\020\006\023\007\024\030\016\035\034" +
    "\037\027\001\001\000\002\001\001\000\004\040\012\001" +
    "\001\000\002\001\001\000\004\010\133\001\001\000\002" +
    "\001\001\000\014\003\140\030\005\033\151\034\142\037" +
    "\010\001\001\000\020\004\136\005\020\006\023\007\024" +
    "\030\016\035\034\037\027\001\001\000\002\001\001\000" +
    "\014\003\140\030\005\033\141\034\142\037\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\040\012\001\001\000\012\003\140\030\005\034\150" +
    "\037\010\001\001\000\002\001\001\000\004\010\147\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\010\154\001\001\000\002\001" +
    "\001\000\014\003\140\030\005\033\157\034\142\037\010" +
    "\001\001\000\004\010\162\001\001\000\002\001\001\000" +
    "\004\010\161\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\004\164\005\020\006\023\007\024\030\016\035" +
    "\034\037\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\004\167\005\020\006\023\007\024\030\016\035" +
    "\034\037\027\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public Node root;

    public void syntax_error(Symbol s)
    {   
        System.out.println("LLegue a un error");
        System.out.println(String.valueOf(s));
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {    
        System.out.println("El error es " + s.value.toString());
        /*if (s == null) 
        {
            errores.add(new ErrorC("Error Sintactico", "null", 0, 0, "ultimo token de finalizacion perdido"));
            System.out.println("Gramatica irreducible");
            return;
        } 
        
        String lexema = s.value.toString();
        int fila = s.right + 1;
        int columna = s.left + 1;
       
        errores.add(new ErrorC("Error Sintactico", lexema, fila, columna, "Error No Recuperable"));*/
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {

 
    public void transferChildren(Node losing, Node gaining) {
        int size = losing.getChildrenCount();
        for (int i = 0; i < size; i++) {
            gaining.addChildren(losing.getChildAt(i));
        }
    }

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // MATRIX_ADDRESS ::= openingBracket comma LONE_EXPRESSION closingBracket 
            {
              Node RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node exp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 Node address = new Node("matrix_address", 0, 0, "rightM");
                                                                                                                   address.addChildren(exp);                                                                                                                   
                                                                                                                   RESULT = address; 
                                                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MATRIX_ADDRESS",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // MATRIX_ADDRESS ::= openingBracket LONE_EXPRESSION comma closingBracket 
            {
              Node RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node exp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 Node address = new Node("matrix_address", 0, 0, "leftM");
                                                                                                                   address.addChildren(exp);                                                                                                                   
                                                                                                                   RESULT = address; 
                                                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MATRIX_ADDRESS",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // MATRIX_ADDRESS ::= openingBracket LONE_EXPRESSION comma LONE_EXPRESSION closingBracket 
            {
              Node RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Node exp1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node exp2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 Node address = new Node("matrix_address", 0, 0, "doubleM");
                                                                                                                   address.addChildren(exp1);
                                                                                                                   address.addChildren(exp2); 
                                                                                                                   RESULT = address; 
                                                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MATRIX_ADDRESS",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // MATRIX_ACCESS ::= id MATRIX_ADDRESS 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int matleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int matright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node mat = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Node access = new Node("matrix"); 
                                                                   Node ident = new Node("identifier", idright, idleft, String.valueOf(id));
                                                                   access.addChildren(ident);
                                                                   access.addChildren(mat);
                                                                   RESULT = access; 
                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MATRIX_ACCESS",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ADDRESS ::= openingBracket openingBracket LONE_EXPRESSION closingBracket closingBracket 
            {
              Node RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node exp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 Node address = new Node("address", 0, 0, "doubleB"); 
                                                                                                   address.addChildren(exp);
                                                                                                   RESULT = address; 
                                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ADDRESS",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ADDRESS ::= openingBracket LONE_EXPRESSION closingBracket 
            {
              Node RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node exp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 Node address = new Node("address", 0, 0, "singleB"); 
                                                                                                   address.addChildren(exp);
                                                                                                   RESULT = address; 
                                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ADDRESS",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ADDRESSES ::= ADDRESS 
            {
              Node RESULT =null;
		int singleleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int singleright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node single = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Node adds = new Node("addresses"); 
                                                                   adds.addChildren(single);
                                                                   RESULT = adds;
                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ADDRESSES",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ADDRESSES ::= ADDRESSES ADDRESS 
            {
              Node RESULT =null;
		int addressesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int addressesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node addresses = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int singleleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int singleright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node single = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Node adds = new Node("addresses"); 
                                                                   transferChildren(addresses, adds);
                                                                   adds.addChildren(single);
                                                                   RESULT = adds;
                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ADDRESSES",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // PARAMETER ::= ASIGNMENT 
            {
              Node RESULT =null;
		int asigleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int asigright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node asig = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = asig; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETER",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // PARAMETER ::= id 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("identifier", idright, idleft, String.valueOf(id)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETER",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // PARAMETERS_DECL ::= PARAMETER 
            {
              Node RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node par = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Node params = new Node("parameters");
                                                                                   params.addChildren(par);
                                                                                   RESULT = params; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETERS_DECL",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // PARAMETERS_DECL ::= PARAMETERS_DECL comma PARAMETER 
            {
              Node RESULT =null;
		int tersleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tersright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node ters = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node par = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Node params = new Node("paratemers"); 
                                                                                   transferChildren(ters, params); 
                                                                                   params.addChildren(par); 
                                                                                   RESULT = params; 
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETERS_DECL",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // CONTINUE_SENTENCE ::= continueKeyword semicolon 
            {
              Node RESULT =null;
		 RESULT = new Node("continue sentence"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTINUE_SENTENCE",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // CONTINUE_SENTENCE ::= continueKeyword 
            {
              Node RESULT =null;
		 RESULT = new Node("continue sentence"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTINUE_SENTENCE",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // BREAK_SENTENCE ::= breakKeyword semicolon 
            {
              Node RESULT =null;
		 RESULT = new Node("break sentence"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BREAK_SENTENCE",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // BREAK_SENTENCE ::= breakKeyword 
            {
              Node RESULT =null;
		 RESULT = new Node("break sentence"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BREAK_SENTENCE",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // RETURN_SENTENCE ::= returnKeyword openingPar LONE_EXPRESSION closingPar semicolon 
            {
              Node RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node exp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 Node retNode = new Node("return sentence"); 
                                                                                   retNode.addChildren(exp); 
                                                                                   RESULT = retNode; 
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN_SENTENCE",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // RETURN_SENTENCE ::= returnKeyword openingPar LONE_EXPRESSION closingPar 
            {
              Node RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node exp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 Node retNode = new Node("return sentence"); 
                                                                                   retNode.addChildren(exp);
                                                                                   RESULT = retNode;
                                                                                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN_SENTENCE",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // RETURN_SENTENCE ::= returnKeyword semicolon 
            {
              Node RESULT =null;
		 RESULT = new Node("return sentence"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN_SENTENCE",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // RETURN_SENTENCE ::= returnKeyword 
            {
              Node RESULT =null;
		 RESULT = new Node("return sentence"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN_SENTENCE",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // FOR_SENTENCE ::= forKeyword openingPar id inKeyword LONE_EXPRESSION closingPar SENTENCES_BLOCK 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node exp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int actionsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int actionsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node actions = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Node forNode = new Node("for sentence"); 
                                                                                                                         Node idNode = new Node("identifier", idright, idleft, String.valueOf(id));
                                                                                                                         forNode.addChildren(idNode);
                                                                                                                         forNode.addChildren(exp);
                                                                                                                         forNode.addChildren(actions);
                                                                                                                         RESULT = forNode;
                                                                                                                      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR_SENTENCE",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DOWHILE_SENTENCE ::= doKeyword SENTENCES_BLOCK whileKeyword openingPar LONE_EXPRESSION closingPar semicolon 
            {
              Node RESULT =null;
		int actionsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int actionsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Node actions = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node exp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 Node doNode = new Node("do while sentence"); 
                                                                                                                        doNode.addChildren(actions); 
                                                                                                                        doNode.addChildren(exp); 
                                                                                                                        RESULT = doNode; 
                                                                                                                     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DOWHILE_SENTENCE",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DOWHILE_SENTENCE ::= doKeyword SENTENCES_BLOCK whileKeyword openingPar LONE_EXPRESSION closingPar 
            {
              Node RESULT =null;
		int actionsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int actionsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node actions = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node exp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 Node doNode = new Node("do while sentence"); 
                                                                                                                        doNode.addChildren(actions); 
                                                                                                                        doNode.addChildren(exp); 
                                                                                                                        RESULT = doNode;
                                                                                                                      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DOWHILE_SENTENCE",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // WHILE_SENTENCE ::= whileKeyword openingPar LONE_EXPRESSION closingPar SENTENCES_BLOCK 
            {
              Node RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node exp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int actionsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int actionsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node actions = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Node whileNode = new Node("while sentence"); 
                                                                                                             whileNode.addChildren(exp); 
                                                                                                             whileNode.addChildren(actions);
                                                                                                             RESULT = whileNode;
                                                                                                          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WHILE_SENTENCE",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DEFAULT_CASE ::= defaultKeyword colon SENTENCES_LIST 
            {
              Node RESULT =null;
		int actionsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int actionsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node actions = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Node defa = new Node("default"); 
                                                                                       defa.addChildren(actions); 
                                                                                       RESULT = defa;
                                                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEFAULT_CASE",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SINGLE_CASE ::= caseKeyword LONE_EXPRESSION colon SENTENCES_LIST 
            {
              Node RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node exp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int actionsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int actionsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node actions = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Node single = new Node("case");
                                                                                       single.addChildren(exp); 
                                                                                       single.addChildren(actions);
                                                                                       RESULT = single;
                                                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SINGLE_CASE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CASES_LIST ::= SINGLE_CASE 
            {
              Node RESULT =null;
		int singleleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int singleright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node single = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Node situation = new Node("cases_list");
                                                                   situation.addChildren(single);
                                                                   RESULT = situation;
                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASES_LIST",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CASES_LIST ::= CASES_LIST SINGLE_CASE 
            {
              Node RESULT =null;
		int casesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int casesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node cases = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int singleleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int singleright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node single = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Node casesNode = new Node("cases_list"); 
                                                                   transferChildren(cases, casesNode); 
                                                                   casesNode.addChildren(single);
                                                                   RESULT = casesNode;
                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASES_LIST",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SWITCH_BODY ::= CASES_LIST DEFAULT_CASE 
            {
              Node RESULT =null;
		int casesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int casesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node cases = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int defleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int defright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node def = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 cases.addChildren(def);
                                                   RESULT = cases;
                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCH_BODY",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // SWITCH_BODY ::= CASES_LIST 
            {
              Node RESULT =null;
		int casesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int casesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node cases = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = cases; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCH_BODY",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // SWITCH_SENTENCE ::= switchKeyword openingPar LONE_EXPRESSION closingPar openingCurly SWITCH_BODY closingCurly 
            {
              Node RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node val = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node body = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 Node switchNode = new Node("switch sentence"); 
                                                                                                                              switchNode.addChildren(val); 
                                                                                                                              switchNode.addChildren(body); 
                                                                                                                              RESULT = switchNode; 
                                                                                                                           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCH_SENTENCE",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ELSE_SENTENCE ::= elseKeyword IF_SENTENCE 
            {
              Node RESULT =null;
		int ifSentencesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ifSentencesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node ifSentences = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Node elseNode = new Node("else if sentence");
                                                                              transferChildren(ifSentences, elseNode);
                                                                              RESULT = elseNode; 
                                                                           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE_SENTENCE",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ELSE_SENTENCE ::= elseKeyword SENTENCES_BLOCK 
            {
              Node RESULT =null;
		int sentencesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentencesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node sentences = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Node elseNode = new Node("else sentence"); 
                                                                              elseNode.addChildren(sentences);
                                                                              RESULT = elseNode; 
                                                                           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE_SENTENCE",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // IF_SENTENCE ::= ifKeyword openingPar LONE_EXPRESSION closingPar SENTENCES_BLOCK ELSE_SENTENCE 
            {
              Node RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Node cond = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sentencesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sentencesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node sentences = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int elseNodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elseNoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node elseNode = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Node ifNode = new Node("if sentence"); 
                                                                                                                        ifNode.addChildren(cond); 
                                                                                                                        ifNode.addChildren(sentences); 
                                                                                                                        ifNode.addChildren(elseNode); 
                                                                                                                        RESULT = ifNode; 
                                                                                                                     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_SENTENCE",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // IF_SENTENCE ::= ifKeyword openingPar LONE_EXPRESSION closingPar SENTENCES_BLOCK 
            {
              Node RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node cond = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sentencesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentencesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node sentences = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Node ifNode = new Node("if sentence");
                                                                                                                    ifNode.addChildren(cond); 
                                                                                                                    ifNode.addChildren(sentences); 
                                                                                                                    RESULT = ifNode; 
                                                                                                                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_SENTENCE",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // PARAMS ::= LONE_EXPRESSION 
            {
              Node RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node exp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = exp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMS",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // PARAMS ::= defaultKeyword 
            {
              Node RESULT =null;
		int defleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int defright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object def = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 System.out.println("default"); RESULT = new Node("default", defright, defleft, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMS",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXPRESSIONS_LIST ::= PARAMS 
            {
              Node RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node param = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Node params = new Node("params");
                                                                                   params.addChildren(param);
                                                                                   RESULT = params;
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONS_LIST",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXPRESSIONS_LIST ::= EXPRESSIONS_LIST comma PARAMS 
            {
              Node RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node list = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node param = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Node params = new Node("params"); 
                                                                                   transferChildren(list, params);
                                                                                   params.addChildren(param);
                                                                                   RESULT = params; 
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONS_LIST",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FUNCTION_CALL ::= id openingPar EXPRESSIONS_LIST closingPar 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node params = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 Node call = new Node("call"); 
                                                                                   Node ident = new Node("identifier", idright, idleft, String.valueOf(id)); 
                                                                                   call.addChildren(ident); 
                                                                                   call.addChildren(params);
                                                                                   RESULT = call; 
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_CALL",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FUNCTION_CALL ::= id openingPar closingPar 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 Node call = new Node("call"); 
                                                                                   Node ident = new Node("identifier", idright, idleft, String.valueOf(id)); 
                                                                                   call.addChildren(ident); 
                                                                                   RESULT = call; 
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_CALL",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ARROW_FUNCTION ::= openingPar id valAsignment LONE_EXPRESSION comma PARAMETERS_DECL closingPar arrowFunction SENTENCES_BLOCK 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Node exp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Node params = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node list = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Node res = new Node("arrow def");
                                                                                                                                      Node param = new Node("asignment");
                                                                                                                                      Node ident = new Node("identifier", idright, idleft, String.valueOf(id));
                                                                                                                                      param.addChildren(ident);
                                                                                                                                      param.addChildren(exp);
                                                                                                                                      params.addChildren(param);
                                                                                                                                      res.addChildren(params); 
                                                                                                                                      res.addChildren(list);
                                                                                                                                      RESULT = res;
                                                                                                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARROW_FUNCTION",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ARROW_FUNCTION ::= openingPar id comma PARAMETERS_DECL closingPar arrowFunction SENTENCES_BLOCK 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Node params = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node list = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Node res = new Node("arrow def");                                                
                                                                                                                               Node ident = new Node("identifier", idright, idleft, String.valueOf(id)); 
                                                                                                                               params.addChildren(ident);
                                                                                                                               res.addChildren(params); 
                                                                                                                               res.addChildren(list);
                                                                                                                               RESULT = res;
                                                                                                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARROW_FUNCTION",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ARROW_FUNCTION ::= openingPar closingPar arrowFunction SENTENCES_BLOCK 
            {
              Node RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node list = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Node res = new Node("arrow def"); 
                                                                                                                               res.addChildren(list); 
                                                                                                                               RESULT = res;
                                                                                                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARROW_FUNCTION",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ASIGNMENT ::= id valAsignment functionKeyword openingPar PARAMETERS_DECL closingPar SENTENCES_BLOCK 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node params = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int actionsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int actionsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node actions = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Node fun = new Node("function"); 
                                                                                                                       Node ident = new Node("identifier", idright, idleft, String.valueOf(id)); 
                                                                                                                       fun.addChildren(ident);
                                                                                                                       fun.addChildren(params);
                                                                                                                       fun.addChildren(actions);
                                                                                                                       RESULT = fun;
                                                                                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGNMENT",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ASIGNMENT ::= id valAsignment functionKeyword openingPar closingPar SENTENCES_BLOCK 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int actionsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int actionsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node actions = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Node fun = new Node("function"); 
                                                                                                                       Node ident = new Node("identifier", idright, idleft, String.valueOf(id)); 
                                                                                                                       fun.addChildren(ident);
                                                                                                                       fun.addChildren(actions);
                                                                                                                       RESULT = fun;
                                                                                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGNMENT",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ASIGNMENT ::= id valAsignment ARROW_FUNCTION 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node f = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Node as = new Node("arrow function"); 
                                                                       Node ident = new Node("identifier", idright, idleft, String.valueOf(id));
                                                                       as.addChildren(ident); 
                                                                       as.addChildren(f); 
                                                                       RESULT = as;
                                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGNMENT",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ASIGNMENT ::= VECTOR_ACCESS valAsignment LONE_EXPRESSION 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGNMENT",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ASIGNMENT ::= MATRIX_ACCESS valAsignment LONE_EXPRESSION 
            {
              Node RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGNMENT",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ASIGNMENT ::= id valAsignment LONE_EXPRESSION 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node exp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Node as = new Node("asignment"); 
                                                                       Node ident = new Node("identifier", idright, idleft, String.valueOf(id));
                                                                       as.addChildren(ident); 
                                                                       as.addChildren(exp); 
                                                                       RESULT = as;
                                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGNMENT",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OPERATOR ::= mod 
            {
              Object RESULT =null;
		 RESULT = "%%"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERATOR",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OPERATOR ::= power 
            {
              Object RESULT =null;
		 RESULT = "^"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERATOR",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OPERATOR ::= div 
            {
              Object RESULT =null;
		 RESULT = "/"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERATOR",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OPERATOR ::= times 
            {
              Object RESULT =null;
		 RESULT = "*"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERATOR",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OPERATOR ::= minus 
            {
              Object RESULT =null;
		 RESULT = "-"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERATOR",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OPERATOR ::= plus 
            {
              Object RESULT =null;
		 RESULT = "+"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERATOR",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LFOUR_EXPRESSION ::= openingPar id closingPar 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Node("identifier", idright, idleft, "( un id )"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LFOUR_EXPRESSION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LFOUR_EXPRESSION ::= id 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("identifier", idright, idleft, String.valueOf(id)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LFOUR_EXPRESSION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LFOUR_EXPRESSION ::= trueValue 
            {
              Node RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("bool value", vright, vleft, true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LFOUR_EXPRESSION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LFOUR_EXPRESSION ::= falseValue 
            {
              Node RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("bool value", vright, vleft, false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LFOUR_EXPRESSION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LFOUR_EXPRESSION ::= numberValue 
            {
              Node RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("number value", vright, vleft, Double.parseDouble(String.valueOf(v))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LFOUR_EXPRESSION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LFOUR_EXPRESSION ::= stringValue 
            {
              Node RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("string value", vright, vleft, String.valueOf(v)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LFOUR_EXPRESSION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LFOUR_EXPRESSION ::= nullValue 
            {
              Node RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("null value", vright, vleft, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LFOUR_EXPRESSION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // LFOUR_EXPRESSION ::= openingPar id closingPar arrowFunction SENTENCES_BLOCK 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node list = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Node arr = new Node("arrow single"); 
                                                                                       Node param = new Node("identifier", idright, idleft, String.valueOf(id));
                                                                                       arr.addChildren(param);
                                                                                       arr.addChildren(list);
                                                                                       RESULT = arr;
                                                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LFOUR_EXPRESSION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LFOUR_EXPRESSION ::= MATRIX_ACCESS 
            {
              Node RESULT =null;
		int matleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int matright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node mat = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = mat; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LFOUR_EXPRESSION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LFOUR_EXPRESSION ::= VECTOR_ACCESS 
            {
              Node RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node st = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = st; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LFOUR_EXPRESSION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LFOUR_EXPRESSION ::= FUNCTION_CALL 
            {
              Node RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node f = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = f; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LFOUR_EXPRESSION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LFOUR_EXPRESSION ::= openingPar LONE_EXPRESSION closingPar 
            {
              Node RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node exp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = exp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LFOUR_EXPRESSION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // LFOUR_EXPRESSION ::= not LONE_EXPRESSION 
            {
              Node RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node exp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Node res = new Node("unary expression"); 
                                                                                       Node operator = new Node("!", opright, opleft, null); 
                                                                                       operator.addChildren(exp);
                                                                                       res.addChildren(operator);
                                                                                       RESULT = res;
                                                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LFOUR_EXPRESSION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // LFOUR_EXPRESSION ::= minus LONE_EXPRESSION 
            {
              Node RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node exp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Node res = new Node("unary expression"); 
                                                                                       Node operator = new Node("-", opright, opleft, null); 
                                                                                       operator.addChildren(exp);
                                                                                       res.addChildren(operator);
                                                                                       RESULT = res;
                                                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LFOUR_EXPRESSION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LFOUR_EXPRESSION ::= LFOUR_EXPRESSION OPERATOR LFOUR_EXPRESSION 
            {
              Node RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node exp1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node exp2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Node res = new Node("binary expression"); 
                                                                                       Node operator = new Node(String.valueOf(op), opright, opleft, null);
                                                                                       operator.addChildren(exp1);
                                                                                       operator.addChildren(exp2); 
                                                                                       res.addChildren(operator); 
                                                                                       RESULT = res; 
                                                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LFOUR_EXPRESSION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // RELATIONAL_OPERATOR ::= lesser 
            {
              Object RESULT =null;
		 RESULT = "<"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELATIONAL_OPERATOR",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // RELATIONAL_OPERATOR ::= greater 
            {
              Object RESULT =null;
		 RESULT = ">"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELATIONAL_OPERATOR",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // RELATIONAL_OPERATOR ::= lesserEquals 
            {
              Object RESULT =null;
		 RESULT = "<="; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELATIONAL_OPERATOR",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // RELATIONAL_OPERATOR ::= greaterEquals 
            {
              Object RESULT =null;
		 RESULT = ">="; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELATIONAL_OPERATOR",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // RELATIONAL_OPERATOR ::= notEquals 
            {
              Object RESULT =null;
		 RESULT = "!="; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELATIONAL_OPERATOR",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // RELATIONAL_OPERATOR ::= equals 
            {
              Object RESULT =null;
		 RESULT = "=="; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELATIONAL_OPERATOR",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // LTHREE_EXPRESSION ::= LFOUR_EXPRESSION 
            {
              Node RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node exp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = exp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LTHREE_EXPRESSION",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // LTHREE_EXPRESSION ::= LTHREE_EXPRESSION RELATIONAL_OPERATOR LTHREE_EXPRESSION 
            {
              Node RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node exp1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node exp2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Node res = new Node("binary expression"); 
                                                                                                               Node operator = new Node(String.valueOf(op), opright, opleft, null);
                                                                                                               operator.addChildren(exp1);
                                                                                                               operator.addChildren(exp2); 
                                                                                                               res.addChildren(operator); 
                                                                                                               RESULT = res; 
                                                                                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LTHREE_EXPRESSION",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LTWO_EXPRESSION ::= LTHREE_EXPRESSION 
            {
              Node RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node exp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = exp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LTWO_EXPRESSION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LTWO_EXPRESSION ::= LTWO_EXPRESSION or LTWO_EXPRESSION 
            {
              Node RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node exp1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node exp2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Node res = new Node("binary expression"); 
                                                                                                               Node operator = new Node("|", oright, oleft, null);
                                                                                                               operator.addChildren(exp1);
                                                                                                               operator.addChildren(exp2); 
                                                                                                               res.addChildren(operator); 
                                                                                                               RESULT = res; 
                                                                                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LTWO_EXPRESSION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LTWO_EXPRESSION ::= LTWO_EXPRESSION and LTWO_EXPRESSION 
            {
              Node RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node exp1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node exp2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Node res = new Node("binary expression"); 
                                                                                                               Node operator = new Node("&", aright, aleft, null);
                                                                                                               operator.addChildren(exp1);
                                                                                                               operator.addChildren(exp2); 
                                                                                                               res.addChildren(operator); 
                                                                                                               RESULT = res; 
                                                                                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LTWO_EXPRESSION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LONE_EXPRESSION ::= LTWO_EXPRESSION 
            {
              Node RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node exp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = exp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LONE_EXPRESSION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LONE_EXPRESSION ::= LONE_EXPRESSION valAsignment LONE_EXPRESSION 
            {
              Node RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node exp1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node exp2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Node res = new Node("binary expression"); 
                                                                                                               Node operator = new Node("=", vright, vleft, null);
                                                                                                               operator.addChildren(exp1);
                                                                                                               operator.addChildren(exp2); 
                                                                                                               res.addChildren(operator); 
                                                                                                               RESULT = res; 
                                                                                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LONE_EXPRESSION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LONE_EXPRESSION ::= LONE_EXPRESSION ternary LONE_EXPRESSION colon LONE_EXPRESSION 
            {
              Node RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node exp1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int terleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int terright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object ter = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node exp2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int colleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object col = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exp3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node exp3 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Node res = new Node("ternary expression");
                                                                                                              Node tern = new Node("?", terright, terleft, null);
                                                                                                              tern.addChildren(exp1);
                                                                                                              Node colon = new Node(":", colright, colleft, null);
                                                                                                              colon.addChildren(exp2); 
                                                                                                              colon.addChildren(exp3);
                                                                                                              res.addChildren(tern);
                                                                                                              res.addChildren(colon);
                                                                                                              RESULT = res; 
                                                                                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LONE_EXPRESSION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCE ::= ASIGNMENT semicolon 
            {
              Node RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node sent = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = sent; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCE",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCE ::= ASIGNMENT 
            {
              Node RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node sent = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = sent; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCE",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCES_BLOCK ::= openingCurly SENTENCES_LIST closingCurly 
            {
              Node RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node list = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = list; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCES_BLOCK",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCES_BLOCK ::= openingCurly closingCurly 
            {
              Node RESULT =null;
		 RESULT = new Node("sentences"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCES_BLOCK",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCES_LIST ::= SENTENCE 
            {
              Node RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node sent = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Node sentences = new Node("sentences"); 
                                                                   sentences.addChildren(sent);
                                                                   RESULT = sentences;
                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCES_LIST",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SENTENCES_LIST ::= SENTENCES_LIST SENTENCE 
            {
              Node RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node sent = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sent2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sent2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node sent2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Node sentences = new Node("sentences"); 
                                                                   transferChildren(sent, sentences); 
                                                                   sentences.addChildren(sent2);
                                                                   RESULT = sentences; 
                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCES_LIST",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ROOT ::= SENTENCES_LIST 
            {
              Node RESULT =null;
		int rootleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rootright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node root = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Node rut = new Node("root"); 
                                   rut.addChildren(root);
                                   parser.root = rut;
                                   System.out.println("Si estoy llegando a la raiz");
                                   RESULT = rut;
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ROOT",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ROOT EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node start_val = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

