
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Mar 27 06:08:24 CST 2020
//----------------------------------------------------

package JFlexNCup;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import APIServices.Node;
import aritcompiler.Singleton;
import APIServices.CompileError;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Mar 27 06:08:24 CST 2020
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\161\000\002\002\004\000\002\002\003\000\002\002" +
    "\002\000\002\011\004\000\002\011\003\000\002\010\004" +
    "\000\002\010\005\000\002\010\005\000\002\012\003\000" +
    "\002\012\004\000\002\012\003\000\002\012\004\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\003\000\002\012\004\000\002\012\003\000\002\012\003" +
    "\000\002\012\004\000\002\012\003\000\002\012\004\000" +
    "\002\012\003\000\002\012\004\000\002\012\004\000\002" +
    "\004\007\000\002\004\005\000\002\004\003\000\002\005" +
    "\005\000\002\005\005\000\002\005\003\000\002\006\005" +
    "\000\002\006\003\000\002\045\003\000\002\045\003\000" +
    "\002\045\003\000\002\045\003\000\002\045\003\000\002" +
    "\045\003\000\002\007\005\000\002\007\004\000\002\007" +
    "\004\000\002\007\005\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\007\000\002\007\011\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\005\000\002\007\007\000\002\044\003" +
    "\000\002\044\003\000\002\044\003\000\002\044\003\000" +
    "\002\044\003\000\002\044\003\000\002\003\005\000\002" +
    "\003\005\000\002\003\005\000\002\003\005\000\002\003" +
    "\010\000\002\003\011\000\002\042\006\000\002\042\011" +
    "\000\002\042\013\000\002\033\005\000\002\033\003\000" +
    "\002\034\003\000\002\034\005\000\002\035\005\000\002" +
    "\035\006\000\002\036\005\000\002\036\003\000\002\041" +
    "\003\000\002\041\003\000\002\013\007\000\002\013\010" +
    "\000\002\014\004\000\002\014\004\000\002\015\011\000" +
    "\002\016\003\000\002\016\004\000\002\017\004\000\002" +
    "\017\003\000\002\021\006\000\002\020\005\000\002\022" +
    "\007\000\002\023\010\000\002\024\011\000\002\027\003" +
    "\000\002\027\005\000\002\027\006\000\002\025\003\000" +
    "\002\026\003\000\002\030\004\000\002\031\004\000\002" +
    "\031\003\000\002\032\005\000\002\032\007\000\002\037" +
    "\004\000\002\037\005\000\002\040\007\000\002\040\006" +
    "\000\002\040\006\000\002\043\006\000\002\043\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\325\000\030\002\uffff\003\027\037\016\041\032\043" +
    "\007\044\026\045\020\046\034\050\012\051\015\061\024" +
    "\001\002\000\004\002\327\001\002\000\036\002\ufffd\003" +
    "\ufffd\020\ufffd\037\ufffd\041\ufffd\042\ufffd\043\ufffd\044\ufffd" +
    "\045\ufffd\046\ufffd\050\ufffd\051\ufffd\053\ufffd\061\ufffd\001" +
    "\002\000\040\002\ufff9\003\ufff9\020\ufff9\022\326\037\ufff9" +
    "\041\ufff9\042\ufff9\043\ufff9\044\ufff9\045\ufff9\046\ufff9\050" +
    "\ufff9\051\ufff9\053\ufff9\061\ufff9\001\002\000\040\002\uff9e" +
    "\003\uff9e\020\uff9e\022\uff9e\037\uff9e\041\uff9e\042\uff9e\043" +
    "\uff9e\044\uff9e\045\uff9e\046\uff9e\050\uff9e\051\uff9e\053\uff9e" +
    "\061\uff9e\001\002\000\036\002\ufff5\003\ufff5\020\ufff5\037" +
    "\ufff5\041\ufff5\042\ufff5\043\ufff5\044\ufff5\045\ufff5\046\ufff5" +
    "\050\ufff5\051\ufff5\053\ufff5\061\ufff5\001\002\000\040\002" +
    "\ufff2\003\ufff2\020\ufff2\022\325\037\ufff2\041\ufff2\042\ufff2" +
    "\043\ufff2\044\ufff2\045\ufff2\046\ufff2\050\ufff2\051\ufff2\053" +
    "\ufff2\061\ufff2\001\002\000\040\002\uff9d\003\uff9d\020\uff9d" +
    "\022\uff9d\037\uff9d\041\uff9d\042\uff9d\043\uff9d\044\uff9d\045" +
    "\uff9d\046\uff9d\050\uff9d\051\uff9d\053\uff9d\061\uff9d\001\002" +
    "\000\040\002\ufff7\003\ufff7\020\ufff7\022\324\037\ufff7\041" +
    "\ufff7\042\ufff7\043\ufff7\044\ufff7\045\ufff7\046\ufff7\050\ufff7" +
    "\051\ufff7\053\ufff7\061\ufff7\001\002\000\030\002\000\003" +
    "\027\037\016\041\032\043\007\044\026\045\020\046\034" +
    "\050\012\051\015\061\024\001\002\000\042\002\uffa1\003" +
    "\uffa1\013\320\020\uffa1\022\uffa1\037\uffa1\041\uffa1\042\uffa1" +
    "\043\uffa1\044\uffa1\045\uffa1\046\uffa1\050\uffa1\051\uffa1\053" +
    "\uffa1\061\uffa1\001\002\000\004\013\310\001\002\000\036" +
    "\002\ufff3\003\ufff3\020\ufff3\037\ufff3\041\ufff3\042\ufff3\043" +
    "\ufff3\044\ufff3\045\ufff3\046\ufff3\050\ufff3\051\ufff3\053\ufff3" +
    "\061\ufff3\001\002\000\004\017\070\001\002\000\004\012" +
    "\301\001\002\000\040\002\uffef\003\uffef\020\uffef\022\300" +
    "\037\uffef\041\uffef\042\uffef\043\uffef\044\uffef\045\uffef\046" +
    "\uffef\050\uffef\051\uffef\053\uffef\061\uffef\001\002\000\004" +
    "\012\276\001\002\000\010\012\235\013\126\015\127\001" +
    "\002\000\040\002\uffeb\003\uffeb\020\uffeb\022\234\037\uffeb" +
    "\041\uffeb\042\uffeb\043\uffeb\044\uffeb\045\uffeb\046\uffeb\050" +
    "\uffeb\051\uffeb\053\uffeb\061\uffeb\001\002\000\004\013\230" +
    "\001\002\000\026\003\027\037\016\041\032\043\007\044" +
    "\026\045\020\046\034\050\012\051\015\061\024\001\002" +
    "\000\036\002\ufff4\003\ufff4\020\ufff4\037\ufff4\041\ufff4\042" +
    "\ufff4\043\ufff4\044\ufff4\045\ufff4\046\ufff4\050\ufff4\051\ufff4" +
    "\053\ufff4\061\ufff4\001\002\000\036\002\ufff0\003\ufff0\020" +
    "\ufff0\037\ufff0\041\ufff0\042\ufff0\043\ufff0\044\ufff0\045\ufff0" +
    "\046\ufff0\050\ufff0\051\ufff0\053\ufff0\061\ufff0\001\002\000" +
    "\004\013\207\001\002\000\040\002\uffed\003\uffed\020\uffed" +
    "\022\206\037\uffed\041\uffed\042\uffed\043\uffed\044\uffed\045" +
    "\uffed\046\uffed\050\uffed\051\uffed\053\uffed\061\uffed\001\002" +
    "\000\004\013\035\001\002\000\004\061\036\001\002\000" +
    "\004\047\037\001\002\000\026\013\040\024\047\032\045" +
    "\054\056\055\057\056\052\057\051\060\054\061\043\062" +
    "\050\001\002\000\026\013\040\024\047\032\045\054\056" +
    "\055\057\056\052\057\051\060\054\061\173\062\050\001" +
    "\002\000\110\002\uffd5\003\uffd5\004\uffd5\005\uffd5\006\uffd5" +
    "\007\uffd5\010\uffd5\012\uffd5\014\uffd5\016\uffd5\020\uffd5\021" +
    "\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5" +
    "\030\uffd5\031\uffd5\033\uffd5\034\uffd5\035\uffd5\036\uffd5\037" +
    "\uffd5\041\uffd5\042\uffd5\043\uffd5\044\uffd5\045\uffd5\046\uffd5" +
    "\050\uffd5\051\uffd5\053\uffd5\061\uffd5\001\002\000\060\002" +
    "\uffe6\003\uffe6\012\uffe6\014\uffe6\016\uffe6\020\uffe6\021\uffe6" +
    "\022\uffe6\033\167\034\170\035\uffe6\036\uffe6\037\uffe6\041" +
    "\uffe6\042\uffe6\043\uffe6\044\uffe6\045\uffe6\046\uffe6\050\uffe6" +
    "\051\uffe6\053\uffe6\061\uffe6\001\002\000\114\002\uffcb\003" +
    "\uffcb\004\uffcb\005\uffcb\006\uffcb\007\uffcb\010\uffcb\012\uffcb" +
    "\013\126\014\uffcb\015\127\016\uffcb\020\uffcb\021\uffcb\022" +
    "\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb" +
    "\031\uffcb\033\uffcb\034\uffcb\035\uffcb\036\uffcb\037\uffcb\041" +
    "\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb\046\uffcb\050\uffcb" +
    "\051\uffcb\053\uffcb\061\uffcb\001\002\000\110\002\uffe1\003" +
    "\uffe1\004\103\005\uffe1\006\uffe1\007\uffe1\010\uffe1\012\uffe1" +
    "\014\uffe1\016\uffe1\020\uffe1\021\uffe1\022\uffe1\023\107\024" +
    "\105\025\106\026\110\027\104\030\uffe1\031\uffe1\033\uffe1" +
    "\034\uffe1\035\uffe1\036\uffe1\037\uffe1\041\uffe1\042\uffe1\043" +
    "\uffe1\044\uffe1\045\uffe1\046\uffe1\050\uffe1\051\uffe1\053\uffe1" +
    "\061\uffe1\001\002\000\026\013\040\024\047\032\045\054" +
    "\056\055\057\056\052\057\051\060\054\061\043\062\050" +
    "\001\002\000\074\002\uffe3\003\uffe3\005\114\006\116\007" +
    "\113\010\115\012\uffe3\014\uffe3\016\uffe3\020\uffe3\021\uffe3" +
    "\022\uffe3\030\117\031\112\033\uffe3\034\uffe3\035\uffe3\036" +
    "\uffe3\037\uffe3\041\uffe3\042\uffe3\043\uffe3\044\uffe3\045\uffe3" +
    "\046\uffe3\050\uffe3\051\uffe3\053\uffe3\061\uffe3\001\002\000" +
    "\026\013\040\024\047\032\045\054\056\055\057\056\052" +
    "\057\051\060\054\061\043\062\050\001\002\000\110\002" +
    "\uffce\003\uffce\004\uffce\005\uffce\006\uffce\007\uffce\010\uffce" +
    "\012\uffce\014\uffce\016\uffce\020\uffce\021\uffce\022\uffce\023" +
    "\uffce\024\uffce\025\uffce\026\uffce\027\uffce\030\uffce\031\uffce" +
    "\033\uffce\034\uffce\035\uffce\036\uffce\037\uffce\041\uffce\042" +
    "\uffce\043\uffce\044\uffce\045\uffce\046\uffce\050\uffce\051\uffce" +
    "\053\uffce\061\uffce\001\002\000\110\002\uffcd\003\uffcd\004" +
    "\uffcd\005\uffcd\006\uffcd\007\uffcd\010\uffcd\012\uffcd\014\uffcd" +
    "\016\uffcd\020\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd\025" +
    "\uffcd\026\uffcd\027\uffcd\030\uffcd\031\uffcd\033\uffcd\034\uffcd" +
    "\035\uffcd\036\uffcd\037\uffcd\041\uffcd\042\uffcd\043\uffcd\044" +
    "\uffcd\045\uffcd\046\uffcd\050\uffcd\051\uffcd\053\uffcd\061\uffcd" +
    "\001\002\000\110\002\uffcf\003\uffcf\004\uffcf\005\uffcf\006" +
    "\uffcf\007\uffcf\010\uffcf\012\uffcf\014\uffcf\016\uffcf\020\uffcf" +
    "\021\uffcf\022\uffcf\023\uffcf\024\uffcf\025\uffcf\026\uffcf\027" +
    "\uffcf\030\uffcf\031\uffcf\033\uffcf\034\uffcf\035\uffcf\036\uffcf" +
    "\037\uffcf\041\uffcf\042\uffcf\043\uffcf\044\uffcf\045\uffcf\046" +
    "\uffcf\050\uffcf\051\uffcf\053\uffcf\061\uffcf\001\002\000\110" +
    "\002\uffd4\003\uffd4\004\uffd4\005\uffd4\006\uffd4\007\uffd4\010" +
    "\uffd4\012\uffd4\014\uffd4\016\uffd4\020\uffd4\021\uffd4\022\uffd4" +
    "\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4\030\uffd4\031" +
    "\uffd4\033\uffd4\034\uffd4\035\uffd4\036\uffd4\037\uffd4\041\uffd4" +
    "\042\uffd4\043\uffd4\044\uffd4\045\uffd4\046\uffd4\050\uffd4\051" +
    "\uffd4\053\uffd4\061\uffd4\001\002\000\110\002\uffcc\003\uffcc" +
    "\004\uffcc\005\uffcc\006\uffcc\007\uffcc\010\uffcc\012\uffcc\014" +
    "\uffcc\016\uffcc\020\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc" +
    "\025\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc\033\uffcc\034" +
    "\uffcc\035\uffcc\036\uffcc\037\uffcc\041\uffcc\042\uffcc\043\uffcc" +
    "\044\uffcc\045\uffcc\046\uffcc\050\uffcc\051\uffcc\053\uffcc\061" +
    "\uffcc\001\002\000\010\012\062\014\061\035\063\001\002" +
    "\000\110\002\uffd1\003\uffd1\004\uffd1\005\uffd1\006\uffd1\007" +
    "\uffd1\010\uffd1\012\uffd1\014\uffd1\016\uffd1\020\uffd1\021\uffd1" +
    "\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1\030" +
    "\uffd1\031\uffd1\033\uffd1\034\uffd1\035\uffd1\036\uffd1\037\uffd1" +
    "\041\uffd1\042\uffd1\043\uffd1\044\uffd1\045\uffd1\046\uffd1\050" +
    "\uffd1\051\uffd1\053\uffd1\061\uffd1\001\002\000\110\002\uffd0" +
    "\003\uffd0\004\uffd0\005\uffd0\006\uffd0\007\uffd0\010\uffd0\012" +
    "\uffd0\014\uffd0\016\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0" +
    "\024\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\033" +
    "\uffd0\034\uffd0\035\uffd0\036\uffd0\037\uffd0\041\uffd0\042\uffd0" +
    "\043\uffd0\044\uffd0\045\uffd0\046\uffd0\050\uffd0\051\uffd0\053" +
    "\uffd0\061\uffd0\001\002\000\110\002\uffd6\003\uffd6\004\uffd6" +
    "\005\uffd6\006\uffd6\007\uffd6\010\uffd6\012\uffd6\014\uffd6\016" +
    "\uffd6\020\uffd6\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6" +
    "\026\uffd6\027\uffd6\030\uffd6\031\uffd6\033\uffd6\034\uffd6\035" +
    "\uffd6\036\uffd6\037\uffd6\041\uffd6\042\uffd6\043\uffd6\044\uffd6" +
    "\045\uffd6\046\uffd6\050\uffd6\051\uffd6\053\uffd6\061\uffd6\001" +
    "\002\000\004\017\070\001\002\000\026\013\040\024\047" +
    "\032\045\054\056\055\057\056\052\057\051\060\054\061" +
    "\043\062\050\001\002\000\026\013\040\024\047\032\045" +
    "\054\056\055\057\056\052\057\051\060\054\061\043\062" +
    "\050\001\002\000\010\012\062\035\063\036\065\001\002" +
    "\000\026\013\040\024\047\032\045\054\056\055\057\056" +
    "\052\057\051\060\054\061\043\062\050\001\002\000\054" +
    "\002\uffe8\003\uffe8\012\uffe8\014\uffe8\016\uffe8\020\uffe8\021" +
    "\uffe8\022\uffe8\035\063\036\uffe8\037\uffe8\041\uffe8\042\uffe8" +
    "\043\uffe8\044\uffe8\045\uffe8\046\uffe8\050\uffe8\051\uffe8\053" +
    "\uffe8\061\uffe8\001\002\000\054\002\uffe7\003\uffe7\012\062" +
    "\014\uffe7\016\uffe7\020\uffe7\021\uffe7\022\uffe7\035\063\036" +
    "\uffe7\037\uffe7\041\uffe7\042\uffe7\043\uffe7\044\uffe7\045\uffe7" +
    "\046\uffe7\050\uffe7\051\uffe7\053\uffe7\061\uffe7\001\002\000" +
    "\030\003\074\020\073\037\016\041\032\043\007\044\026" +
    "\045\020\046\034\050\012\051\015\061\024\001\002\000" +
    "\036\002\uffa2\003\uffa2\020\uffa2\037\uffa2\041\uffa2\042\uffa2" +
    "\043\uffa2\044\uffa2\045\uffa2\046\uffa2\050\uffa2\051\uffa2\053" +
    "\uffa2\061\uffa2\001\002\000\030\003\027\020\100\037\016" +
    "\041\032\043\007\044\026\045\020\046\034\050\012\051" +
    "\015\061\024\001\002\000\112\002\ufffc\003\ufffc\004\ufffc" +
    "\005\ufffc\006\ufffc\007\ufffc\010\ufffc\012\ufffc\014\ufffc\016" +
    "\ufffc\020\ufffc\021\ufffc\022\ufffc\023\ufffc\024\ufffc\025\ufffc" +
    "\026\ufffc\027\ufffc\030\ufffc\031\ufffc\033\ufffc\034\ufffc\035" +
    "\ufffc\036\ufffc\037\ufffc\040\ufffc\041\ufffc\042\ufffc\043\ufffc" +
    "\044\ufffc\045\ufffc\046\ufffc\050\ufffc\051\ufffc\053\ufffc\061" +
    "\ufffc\001\002\000\030\003\027\020\076\037\016\041\032" +
    "\043\007\044\026\045\020\046\034\050\012\051\015\061" +
    "\024\001\002\000\036\002\uffe9\003\uffe9\020\uffe9\037\uffe9" +
    "\041\uffe9\042\uffe9\043\uffe9\044\uffe9\045\uffe9\046\uffe9\050" +
    "\uffe9\051\uffe9\053\uffe9\061\uffe9\001\002\000\112\002\ufffa" +
    "\003\ufffa\004\ufffa\005\ufffa\006\ufffa\007\ufffa\010\ufffa\012" +
    "\ufffa\014\ufffa\016\ufffa\020\ufffa\021\ufffa\022\ufffa\023\ufffa" +
    "\024\ufffa\025\ufffa\026\ufffa\027\ufffa\030\ufffa\031\ufffa\033" +
    "\ufffa\034\ufffa\035\ufffa\036\ufffa\037\ufffa\040\ufffa\041\ufffa" +
    "\042\ufffa\043\ufffa\044\ufffa\045\ufffa\046\ufffa\050\ufffa\051" +
    "\ufffa\053\ufffa\061\ufffa\001\002\000\036\002\ufffe\003\ufffe" +
    "\020\ufffe\037\ufffe\041\ufffe\042\ufffe\043\ufffe\044\ufffe\045" +
    "\ufffe\046\ufffe\050\ufffe\051\ufffe\053\ufffe\061\ufffe\001\002" +
    "\000\112\002\ufffb\003\ufffb\004\ufffb\005\ufffb\006\ufffb\007" +
    "\ufffb\010\ufffb\012\ufffb\014\ufffb\016\ufffb\020\ufffb\021\ufffb" +
    "\022\ufffb\023\ufffb\024\ufffb\025\ufffb\026\ufffb\027\ufffb\030" +
    "\ufffb\031\ufffb\033\ufffb\034\ufffb\035\ufffb\036\ufffb\037\ufffb" +
    "\040\ufffb\041\ufffb\042\ufffb\043\ufffb\044\ufffb\045\ufffb\046" +
    "\ufffb\050\ufffb\051\ufffb\053\ufffb\061\ufffb\001\002\000\110" +
    "\002\uffd9\003\uffd9\004\uffd9\005\uffd9\006\uffd9\007\uffd9\010" +
    "\uffd9\012\uffd9\014\uffd9\016\uffd9\020\uffd9\021\uffd9\022\uffd9" +
    "\023\uffd9\024\105\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031" +
    "\uffd9\033\uffd9\034\uffd9\035\uffd9\036\uffd9\037\uffd9\041\uffd9" +
    "\042\uffd9\043\uffd9\044\uffd9\045\uffd9\046\uffd9\050\uffd9\051" +
    "\uffd9\053\uffd9\061\uffd9\001\002\000\026\013\040\024\047" +
    "\032\045\054\056\055\057\056\052\057\051\060\054\061" +
    "\043\062\050\001\002\000\026\013\uffc3\024\uffc3\032\uffc3" +
    "\054\uffc3\055\uffc3\056\uffc3\057\uffc3\060\uffc3\061\uffc3\062" +
    "\uffc3\001\002\000\026\013\uffc4\024\uffc4\032\uffc4\054\uffc4" +
    "\055\uffc4\056\uffc4\057\uffc4\060\uffc4\061\uffc4\062\uffc4\001" +
    "\002\000\026\013\uffc7\024\uffc7\032\uffc7\054\uffc7\055\uffc7" +
    "\056\uffc7\057\uffc7\060\uffc7\061\uffc7\062\uffc7\001\002\000" +
    "\026\013\uffc6\024\uffc6\032\uffc6\054\uffc6\055\uffc6\056\uffc6" +
    "\057\uffc6\060\uffc6\061\uffc6\062\uffc6\001\002\000\026\013" +
    "\uffc8\024\uffc8\032\uffc8\054\uffc8\055\uffc8\056\uffc8\057\uffc8" +
    "\060\uffc8\061\uffc8\062\uffc8\001\002\000\026\013\uffc5\024" +
    "\uffc5\032\uffc5\054\uffc5\055\uffc5\056\uffc5\057\uffc5\060\uffc5" +
    "\061\uffc5\062\uffc5\001\002\000\110\002\uffda\003\uffda\004" +
    "\103\005\uffda\006\uffda\007\uffda\010\uffda\012\uffda\014\uffda" +
    "\016\uffda\020\uffda\021\uffda\022\uffda\023\107\024\105\025" +
    "\106\026\110\027\104\030\uffda\031\uffda\033\uffda\034\uffda" +
    "\035\uffda\036\uffda\037\uffda\041\uffda\042\uffda\043\uffda\044" +
    "\uffda\045\uffda\046\uffda\050\uffda\051\uffda\053\uffda\061\uffda" +
    "\001\002\000\026\013\uffdb\024\uffdb\032\uffdb\054\uffdb\055" +
    "\uffdb\056\uffdb\057\uffdb\060\uffdb\061\uffdb\062\uffdb\001\002" +
    "\000\026\013\uffde\024\uffde\032\uffde\054\uffde\055\uffde\056" +
    "\uffde\057\uffde\060\uffde\061\uffde\062\uffde\001\002\000\026" +
    "\013\uffe0\024\uffe0\032\uffe0\054\uffe0\055\uffe0\056\uffe0\057" +
    "\uffe0\060\uffe0\061\uffe0\062\uffe0\001\002\000\026\013\uffdd" +
    "\024\uffdd\032\uffdd\054\uffdd\055\uffdd\056\uffdd\057\uffdd\060" +
    "\uffdd\061\uffdd\062\uffdd\001\002\000\026\013\uffdf\024\uffdf" +
    "\032\uffdf\054\uffdf\055\uffdf\056\uffdf\057\uffdf\060\uffdf\061" +
    "\uffdf\062\uffdf\001\002\000\026\013\uffdc\024\uffdc\032\uffdc" +
    "\054\uffdc\055\uffdc\056\uffdc\057\uffdc\060\uffdc\061\uffdc\062" +
    "\uffdc\001\002\000\026\013\040\024\047\032\045\054\056" +
    "\055\057\056\052\057\051\060\054\061\043\062\050\001" +
    "\002\000\074\002\uffe2\003\uffe2\005\114\006\116\007\113" +
    "\010\115\012\uffe2\014\uffe2\016\uffe2\020\uffe2\021\uffe2\022" +
    "\uffe2\030\117\031\112\033\uffe2\034\uffe2\035\uffe2\036\uffe2" +
    "\037\uffe2\041\uffe2\042\uffe2\043\uffe2\044\uffe2\045\uffe2\046" +
    "\uffe2\050\uffe2\051\uffe2\053\uffe2\061\uffe2\001\002\000\110" +
    "\002\uffd8\003\uffd8\004\uffd8\005\uffd8\006\uffd8\007\uffd8\010" +
    "\uffd8\012\uffd8\014\uffd8\016\uffd8\020\uffd8\021\uffd8\022\uffd8" +
    "\023\uffd8\024\105\025\uffd8\026\uffd8\027\uffd8\030\uffd8\031" +
    "\uffd8\033\uffd8\034\uffd8\035\uffd8\036\uffd8\037\uffd8\041\uffd8" +
    "\042\uffd8\043\uffd8\044\uffd8\045\uffd8\046\uffd8\050\uffd8\051" +
    "\uffd8\053\uffd8\061\uffd8\001\002\000\112\002\uff97\003\uff97" +
    "\004\uff97\005\uff97\006\uff97\007\uff97\010\uff97\012\uff97\014" +
    "\uff97\015\161\016\uff97\020\uff97\021\uff97\022\uff97\023\uff97" +
    "\024\uff97\025\uff97\026\uff97\027\uff97\030\uff97\031\uff97\033" +
    "\uff97\034\uff97\035\uff97\036\uff97\037\uff97\041\uff97\042\uff97" +
    "\043\uff97\044\uff97\045\uff97\046\uff97\050\uff97\051\uff97\053" +
    "\uff97\061\uff97\001\002\000\112\002\uff9c\003\uff9c\004\uff9c" +
    "\005\uff9c\006\uff9c\007\uff9c\010\uff9c\012\uff9c\014\uff9c\015" +
    "\156\016\uff9c\020\uff9c\021\uff9c\022\uff9c\023\uff9c\024\uff9c" +
    "\025\uff9c\026\uff9c\027\uff9c\030\uff9c\031\uff9c\033\uff9c\034" +
    "\uff9c\035\uff9c\036\uff9c\037\uff9c\041\uff9c\042\uff9c\043\uff9c" +
    "\044\uff9c\045\uff9c\046\uff9c\050\uff9c\051\uff9c\053\uff9c\061" +
    "\uff9c\001\002\000\112\002\uff9a\003\uff9a\004\uff9a\005\uff9a" +
    "\006\uff9a\007\uff9a\010\uff9a\012\uff9a\014\uff9a\015\uff9a\016" +
    "\uff9a\020\uff9a\021\uff9a\022\uff9a\023\uff9a\024\uff9a\025\uff9a" +
    "\026\uff9a\027\uff9a\030\uff9a\031\uff9a\033\uff9a\034\uff9a\035" +
    "\uff9a\036\uff9a\037\uff9a\041\uff9a\042\uff9a\043\uff9a\044\uff9a" +
    "\045\uff9a\046\uff9a\050\uff9a\051\uff9a\053\uff9a\061\uff9a\001" +
    "\002\000\032\013\040\014\151\024\047\032\045\053\150" +
    "\054\056\055\057\056\052\057\051\060\054\061\043\062" +
    "\050\001\002\000\032\013\040\015\130\021\132\024\047" +
    "\032\045\054\056\055\057\056\052\057\051\060\054\061" +
    "\043\062\050\001\002\000\026\013\040\024\047\032\045" +
    "\054\056\055\057\056\052\057\051\060\054\061\043\062" +
    "\050\001\002\000\012\012\062\016\136\021\135\035\063" +
    "\001\002\000\026\013\040\024\047\032\045\054\056\055" +
    "\057\056\052\057\051\060\054\061\043\062\050\001\002" +
    "\000\010\012\062\016\134\035\063\001\002\000\112\002" +
    "\uff93\003\uff93\004\uff93\005\uff93\006\uff93\007\uff93\010\uff93" +
    "\012\uff93\014\uff93\015\uff93\016\uff93\020\uff93\021\uff93\022" +
    "\uff93\023\uff93\024\uff93\025\uff93\026\uff93\027\uff93\030\uff93" +
    "\031\uff93\033\uff93\034\uff93\035\uff93\036\uff93\037\uff93\041" +
    "\uff93\042\uff93\043\uff93\044\uff93\045\uff93\046\uff93\050\uff93" +
    "\051\uff93\053\uff93\061\uff93\001\002\000\030\013\040\016" +
    "\140\024\047\032\045\054\056\055\057\056\052\057\051" +
    "\060\054\061\043\062\050\001\002\000\112\002\uff99\003" +
    "\uff99\004\uff99\005\uff99\006\uff99\007\uff99\010\uff99\012\uff99" +
    "\014\uff99\015\uff99\016\uff99\020\uff99\021\uff99\022\uff99\023" +
    "\uff99\024\uff99\025\uff99\026\uff99\027\uff99\030\uff99\031\uff99" +
    "\033\uff99\034\uff99\035\uff99\036\uff99\037\uff99\041\uff99\042" +
    "\uff99\043\uff99\044\uff99\045\uff99\046\uff99\050\uff99\051\uff99" +
    "\053\uff99\061\uff99\001\002\000\010\012\062\016\141\035" +
    "\063\001\002\000\112\002\uff94\003\uff94\004\uff94\005\uff94" +
    "\006\uff94\007\uff94\010\uff94\012\uff94\014\uff94\015\uff94\016" +
    "\uff94\020\uff94\021\uff94\022\uff94\023\uff94\024\uff94\025\uff94" +
    "\026\uff94\027\uff94\030\uff94\031\uff94\033\uff94\034\uff94\035" +
    "\uff94\036\uff94\037\uff94\041\uff94\042\uff94\043\uff94\044\uff94" +
    "\045\uff94\046\uff94\050\uff94\051\uff94\053\uff94\061\uff94\001" +
    "\002\000\112\002\uff95\003\uff95\004\uff95\005\uff95\006\uff95" +
    "\007\uff95\010\uff95\012\uff95\014\uff95\015\uff95\016\uff95\020" +
    "\uff95\021\uff95\022\uff95\023\uff95\024\uff95\025\uff95\026\uff95" +
    "\027\uff95\030\uff95\031\uff95\033\uff95\034\uff95\035\uff95\036" +
    "\uff95\037\uff95\041\uff95\042\uff95\043\uff95\044\uff95\045\uff95" +
    "\046\uff95\050\uff95\051\uff95\053\uff95\061\uff95\001\002\000" +
    "\010\012\062\016\143\035\063\001\002\000\004\016\144" +
    "\001\002\000\112\002\uff98\003\uff98\004\uff98\005\uff98\006" +
    "\uff98\007\uff98\010\uff98\012\uff98\014\uff98\015\uff98\016\uff98" +
    "\020\uff98\021\uff98\022\uff98\023\uff98\024\uff98\025\uff98\026" +
    "\uff98\027\uff98\030\uff98\031\uff98\033\uff98\034\uff98\035\uff98" +
    "\036\uff98\037\uff98\041\uff98\042\uff98\043\uff98\044\uff98\045" +
    "\uff98\046\uff98\050\uff98\051\uff98\053\uff98\061\uff98\001\002" +
    "\000\006\014\153\021\152\001\002\000\006\014\uffb2\021" +
    "\uffb2\001\002\000\012\012\062\014\uffb0\021\uffb0\035\063" +
    "\001\002\000\006\014\uffb1\021\uffb1\001\002\000\110\002" +
    "\uffb5\003\uffb5\004\uffb5\005\uffb5\006\uffb5\007\uffb5\010\uffb5" +
    "\012\uffb5\014\uffb5\016\uffb5\020\uffb5\021\uffb5\022\uffb5\023" +
    "\uffb5\024\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5\031\uffb5" +
    "\033\uffb5\034\uffb5\035\uffb5\036\uffb5\037\uffb5\041\uffb5\042" +
    "\uffb5\043\uffb5\044\uffb5\045\uffb5\046\uffb5\050\uffb5\051\uffb5" +
    "\053\uffb5\061\uffb5\001\002\000\030\013\040\024\047\032" +
    "\045\053\150\054\056\055\057\056\052\057\051\060\054" +
    "\061\043\062\050\001\002\000\110\002\uffb4\003\uffb4\004" +
    "\uffb4\005\uffb4\006\uffb4\007\uffb4\010\uffb4\012\uffb4\014\uffb4" +
    "\016\uffb4\020\uffb4\021\uffb4\022\uffb4\023\uffb4\024\uffb4\025" +
    "\uffb4\026\uffb4\027\uffb4\030\uffb4\031\uffb4\033\uffb4\034\uffb4" +
    "\035\uffb4\036\uffb4\037\uffb4\041\uffb4\042\uffb4\043\uffb4\044" +
    "\uffb4\045\uffb4\046\uffb4\050\uffb4\051\uffb4\053\uffb4\061\uffb4" +
    "\001\002\000\006\014\uffb3\021\uffb3\001\002\000\112\002" +
    "\uff9b\003\uff9b\004\uff9b\005\uff9b\006\uff9b\007\uff9b\010\uff9b" +
    "\012\uff9b\014\uff9b\015\uff9b\016\uff9b\020\uff9b\021\uff9b\022" +
    "\uff9b\023\uff9b\024\uff9b\025\uff9b\026\uff9b\027\uff9b\030\uff9b" +
    "\031\uff9b\033\uff9b\034\uff9b\035\uff9b\036\uff9b\037\uff9b\041" +
    "\uff9b\042\uff9b\043\uff9b\044\uff9b\045\uff9b\046\uff9b\050\uff9b" +
    "\051\uff9b\053\uff9b\061\uff9b\001\002\000\030\013\040\015" +
    "\130\024\047\032\045\054\056\055\057\056\052\057\051" +
    "\060\054\061\043\062\050\001\002\000\010\012\062\016" +
    "\136\035\063\001\002\000\112\002\uff96\003\uff96\004\uff96" +
    "\005\uff96\006\uff96\007\uff96\010\uff96\012\uff96\014\uff96\015" +
    "\164\016\uff96\020\uff96\021\uff96\022\uff96\023\uff96\024\uff96" +
    "\025\uff96\026\uff96\027\uff96\030\uff96\031\uff96\033\uff96\034" +
    "\uff96\035\uff96\036\uff96\037\uff96\041\uff96\042\uff96\043\uff96" +
    "\044\uff96\045\uff96\046\uff96\050\uff96\051\uff96\053\uff96\061" +
    "\uff96\001\002\000\026\013\040\024\047\032\045\054\056" +
    "\055\057\056\052\057\051\060\054\061\043\062\050\001" +
    "\002\000\010\012\062\016\163\035\063\001\002\000\112" +
    "\002\uff91\003\uff91\004\uff91\005\uff91\006\uff91\007\uff91\010" +
    "\uff91\012\uff91\014\uff91\015\uff91\016\uff91\020\uff91\021\uff91" +
    "\022\uff91\023\uff91\024\uff91\025\uff91\026\uff91\027\uff91\030" +
    "\uff91\031\uff91\033\uff91\034\uff91\035\uff91\036\uff91\037\uff91" +
    "\041\uff91\042\uff91\043\uff91\044\uff91\045\uff91\046\uff91\050" +
    "\uff91\051\uff91\053\uff91\061\uff91\001\002\000\026\013\040" +
    "\024\047\032\045\054\056\055\057\056\052\057\051\060" +
    "\054\061\043\062\050\001\002\000\010\012\062\016\166" +
    "\035\063\001\002\000\112\002\uff92\003\uff92\004\uff92\005" +
    "\uff92\006\uff92\007\uff92\010\uff92\012\uff92\014\uff92\015\uff92" +
    "\016\uff92\020\uff92\021\uff92\022\uff92\023\uff92\024\uff92\025" +
    "\uff92\026\uff92\027\uff92\030\uff92\031\uff92\033\uff92\034\uff92" +
    "\035\uff92\036\uff92\037\uff92\041\uff92\042\uff92\043\uff92\044" +
    "\uff92\045\uff92\046\uff92\050\uff92\051\uff92\053\uff92\061\uff92" +
    "\001\002\000\026\013\040\024\047\032\045\054\056\055" +
    "\057\056\052\057\051\060\054\061\043\062\050\001\002" +
    "\000\026\013\040\024\047\032\045\054\056\055\057\056" +
    "\052\057\051\060\054\061\043\062\050\001\002\000\060" +
    "\002\uffe4\003\uffe4\012\uffe4\014\uffe4\016\uffe4\020\uffe4\021" +
    "\uffe4\022\uffe4\033\167\034\uffe4\035\uffe4\036\uffe4\037\uffe4" +
    "\041\uffe4\042\uffe4\043\uffe4\044\uffe4\045\uffe4\046\uffe4\050" +
    "\uffe4\051\uffe4\053\uffe4\061\uffe4\001\002\000\060\002\uffe5" +
    "\003\uffe5\012\uffe5\014\uffe5\016\uffe5\020\uffe5\021\uffe5\022" +
    "\uffe5\033\uffe5\034\uffe5\035\uffe5\036\uffe5\037\uffe5\041\uffe5" +
    "\042\uffe5\043\uffe5\044\uffe5\045\uffe5\046\uffe5\050\uffe5\051" +
    "\uffe5\053\uffe5\061\uffe5\001\002\000\050\004\uffcb\005\uffcb" +
    "\006\uffcb\007\uffcb\010\uffcb\012\177\013\126\014\176\015" +
    "\127\023\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb" +
    "\031\uffcb\033\uffcb\034\uffcb\035\uffcb\001\002\000\010\012" +
    "\062\014\175\035\063\001\002\000\110\002\uffd7\003\uffd7" +
    "\004\uffd7\005\uffd7\006\uffd7\007\uffd7\010\uffd7\012\uffd7\014" +
    "\uffd7\016\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7" +
    "\025\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\033\uffd7\034" +
    "\uffd7\035\uffd7\036\uffd7\037\uffd7\041\uffd7\042\uffd7\043\uffd7" +
    "\044\uffd7\045\uffd7\046\uffd7\050\uffd7\051\uffd7\053\uffd7\061" +
    "\uffd7\001\002\000\112\002\uffca\003\uffca\004\uffca\005\uffca" +
    "\006\uffca\007\uffca\010\uffca\011\204\012\uffca\014\uffca\016" +
    "\uffca\020\uffca\021\uffca\022\uffca\023\uffca\024\uffca\025\uffca" +
    "\026\uffca\027\uffca\030\uffca\031\uffca\033\uffca\034\uffca\035" +
    "\uffca\036\uffca\037\uffca\041\uffca\042\uffca\043\uffca\044\uffca" +
    "\045\uffca\046\uffca\050\uffca\051\uffca\053\uffca\061\uffca\001" +
    "\002\000\026\013\040\024\047\032\045\054\056\055\057" +
    "\056\052\057\051\060\054\061\043\062\050\001\002\000" +
    "\010\012\062\014\201\035\063\001\002\000\112\002\uffc9" +
    "\003\uffc9\004\uffc9\005\uffc9\006\uffc9\007\uffc9\010\uffc9\011" +
    "\202\012\uffc9\014\uffc9\016\uffc9\020\uffc9\021\uffc9\022\uffc9" +
    "\023\uffc9\024\uffc9\025\uffc9\026\uffc9\027\uffc9\030\uffc9\031" +
    "\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9\037\uffc9\041\uffc9" +
    "\042\uffc9\043\uffc9\044\uffc9\045\uffc9\046\uffc9\050\uffc9\051" +
    "\uffc9\053\uffc9\061\uffc9\001\002\000\004\017\070\001\002" +
    "\000\110\002\uffd2\003\uffd2\004\uffd2\005\uffd2\006\uffd2\007" +
    "\uffd2\010\uffd2\012\uffd2\014\uffd2\016\uffd2\020\uffd2\021\uffd2" +
    "\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030" +
    "\uffd2\031\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\037\uffd2" +
    "\041\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2\046\uffd2\050" +
    "\uffd2\051\uffd2\053\uffd2\061\uffd2\001\002\000\004\017\070" +
    "\001\002\000\110\002\uffd3\003\uffd3\004\uffd3\005\uffd3\006" +
    "\uffd3\007\uffd3\010\uffd3\012\uffd3\014\uffd3\016\uffd3\020\uffd3" +
    "\021\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027" +
    "\uffd3\030\uffd3\031\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3" +
    "\037\uffd3\041\uffd3\042\uffd3\043\uffd3\044\uffd3\045\uffd3\046" +
    "\uffd3\050\uffd3\051\uffd3\053\uffd3\061\uffd3\001\002\000\036" +
    "\002\uffec\003\uffec\020\uffec\037\uffec\041\uffec\042\uffec\043" +
    "\uffec\044\uffec\045\uffec\046\uffec\050\uffec\051\uffec\053\uffec" +
    "\061\uffec\001\002\000\026\013\040\024\047\032\045\054" +
    "\056\055\057\056\052\057\051\060\054\061\043\062\050" +
    "\001\002\000\010\012\062\014\211\035\063\001\002\000" +
    "\004\017\212\001\002\000\004\042\216\001\002\000\004" +
    "\020\227\001\002\000\010\020\uffa7\042\uffa7\053\uffa7\001" +
    "\002\000\010\020\uffaa\042\216\053\222\001\002\000\026" +
    "\013\040\024\047\032\045\054\056\055\057\056\052\057" +
    "\051\060\054\061\043\062\050\001\002\000\010\012\062" +
    "\035\063\036\220\001\002\000\026\003\027\037\016\041" +
    "\032\043\007\044\026\045\020\046\034\050\012\051\015" +
    "\061\024\001\002\000\034\003\027\020\uffa6\037\016\041" +
    "\032\042\uffa6\043\007\044\026\045\020\046\034\050\012" +
    "\051\015\053\uffa6\061\024\001\002\000\004\036\225\001" +
    "\002\000\004\020\uffa9\001\002\000\010\020\uffa8\042\uffa8" +
    "\053\uffa8\001\002\000\026\003\027\037\016\041\032\043" +
    "\007\044\026\045\020\046\034\050\012\051\015\061\024" +
    "\001\002\000\030\003\027\020\uffa5\037\016\041\032\043" +
    "\007\044\026\045\020\046\034\050\012\051\015\061\024" +
    "\001\002\000\036\002\uffab\003\uffab\020\uffab\037\uffab\041" +
    "\uffab\042\uffab\043\uffab\044\uffab\045\uffab\046\uffab\050\uffab" +
    "\051\uffab\053\uffab\061\uffab\001\002\000\026\013\040\024" +
    "\047\032\045\054\056\055\057\056\052\057\051\060\054" +
    "\061\043\062\050\001\002\000\010\012\062\014\232\035" +
    "\063\001\002\000\004\017\070\001\002\000\036\002\uffa4" +
    "\003\uffa4\020\uffa4\037\uffa4\041\uffa4\042\uffa4\043\uffa4\044" +
    "\uffa4\045\uffa4\046\uffa4\050\uffa4\051\uffa4\053\uffa4\061\uffa4" +
    "\001\002\000\036\002\uffea\003\uffea\020\uffea\037\uffea\041" +
    "\uffea\042\uffea\043\uffea\044\uffea\045\uffea\046\uffea\050\uffea" +
    "\051\uffea\053\uffea\061\uffea\001\002\000\030\013\240\024" +
    "\047\032\045\052\236\054\056\055\057\056\052\057\051" +
    "\060\054\061\043\062\050\001\002\000\004\013\270\001" +
    "\002\000\044\002\uffc2\003\uffc2\012\062\020\uffc2\022\uffc2" +
    "\035\063\037\uffc2\041\uffc2\042\uffc2\043\uffc2\044\uffc2\045" +
    "\uffc2\046\uffc2\050\uffc2\051\uffc2\053\uffc2\061\uffc2\001\002" +
    "\000\030\013\040\014\243\024\047\032\045\054\056\055" +
    "\057\056\052\057\051\060\054\061\242\062\050\001\002" +
    "\000\040\002\uffbf\003\uffbf\020\uffbf\022\uffbf\037\uffbf\041" +
    "\uffbf\042\uffbf\043\uffbf\044\uffbf\045\uffbf\046\uffbf\050\uffbf" +
    "\051\uffbf\053\uffbf\061\uffbf\001\002\000\052\004\uffcb\005" +
    "\uffcb\006\uffcb\007\uffcb\010\uffcb\012\247\013\126\014\176" +
    "\015\127\021\246\023\uffcb\024\uffcb\025\uffcb\026\uffcb\027" +
    "\uffcb\030\uffcb\031\uffcb\033\uffcb\034\uffcb\035\uffcb\001\002" +
    "\000\004\011\244\001\002\000\004\017\070\001\002\000" +
    "\040\002\uffbc\003\uffbc\020\uffbc\022\uffbc\037\uffbc\041\uffbc" +
    "\042\uffbc\043\uffbc\044\uffbc\045\uffbc\046\uffbc\050\uffbc\051" +
    "\uffbc\053\uffbc\061\uffbc\001\002\000\004\061\254\001\002" +
    "\000\026\013\040\024\047\032\045\054\056\055\057\056" +
    "\052\057\051\060\054\061\043\062\050\001\002\000\012" +
    "\012\062\014\201\021\251\035\063\001\002\000\004\061" +
    "\254\001\002\000\006\014\260\021\257\001\002\000\006" +
    "\014\uffb8\021\uffb8\001\002\000\010\012\255\014\uffb7\021" +
    "\uffb7\001\002\000\026\013\040\024\047\032\045\054\056" +
    "\055\057\056\052\057\051\060\054\061\043\062\050\001" +
    "\002\000\012\012\062\014\uffb6\021\uffb6\035\063\001\002" +
    "\000\004\061\254\001\002\000\004\011\261\001\002\000" +
    "\004\017\070\001\002\000\040\002\uffba\003\uffba\020\uffba" +
    "\022\uffba\037\uffba\041\uffba\042\uffba\043\uffba\044\uffba\045" +
    "\uffba\046\uffba\050\uffba\051\uffba\053\uffba\061\uffba\001\002" +
    "\000\006\014\uffb9\021\uffb9\001\002\000\006\014\265\021" +
    "\257\001\002\000\004\011\266\001\002\000\004\017\070" +
    "\001\002\000\040\002\uffbb\003\uffbb\020\uffbb\022\uffbb\037" +
    "\uffbb\041\uffbb\042\uffbb\043\uffbb\044\uffbb\045\uffbb\046\uffbb" +
    "\050\uffbb\051\uffbb\053\uffbb\061\uffbb\001\002\000\006\014" +
    "\271\061\254\001\002\000\004\017\070\001\002\000\006" +
    "\014\273\021\257\001\002\000\004\017\070\001\002\000" +
    "\040\002\uffbd\003\uffbd\020\uffbd\022\uffbd\037\uffbd\041\uffbd" +
    "\042\uffbd\043\uffbd\044\uffbd\045\uffbd\046\uffbd\050\uffbd\051" +
    "\uffbd\053\uffbd\061\uffbd\001\002\000\040\002\uffbe\003\uffbe" +
    "\020\uffbe\022\uffbe\037\uffbe\041\uffbe\042\uffbe\043\uffbe\044" +
    "\uffbe\045\uffbe\046\uffbe\050\uffbe\051\uffbe\053\uffbe\061\uffbe" +
    "\001\002\000\026\013\040\024\047\032\045\054\056\055" +
    "\057\056\052\057\051\060\054\061\043\062\050\001\002" +
    "\000\044\002\uffc1\003\uffc1\012\062\020\uffc1\022\uffc1\035" +
    "\063\037\uffc1\041\uffc1\042\uffc1\043\uffc1\044\uffc1\045\uffc1" +
    "\046\uffc1\050\uffc1\051\uffc1\053\uffc1\061\uffc1\001\002\000" +
    "\036\002\uffee\003\uffee\020\uffee\037\uffee\041\uffee\042\uffee" +
    "\043\uffee\044\uffee\045\uffee\046\uffee\050\uffee\051\uffee\053" +
    "\uffee\061\uffee\001\002\000\026\013\040\024\047\032\045" +
    "\054\056\055\057\056\052\057\051\060\054\061\043\062" +
    "\050\001\002\000\044\002\uffc0\003\uffc0\012\062\020\uffc0" +
    "\022\uffc0\035\063\037\uffc0\041\uffc0\042\uffc0\043\uffc0\044" +
    "\uffc0\045\uffc0\046\uffc0\050\uffc0\051\uffc0\053\uffc0\061\uffc0" +
    "\001\002\000\004\044\304\001\002\000\004\013\305\001" +
    "\002\000\026\013\040\024\047\032\045\054\056\055\057" +
    "\056\052\057\051\060\054\061\043\062\050\001\002\000" +
    "\010\012\062\014\307\035\063\001\002\000\040\002\uffa3" +
    "\003\uffa3\020\uffa3\022\uffa3\037\uffa3\041\uffa3\042\uffa3\043" +
    "\uffa3\044\uffa3\045\uffa3\046\uffa3\050\uffa3\051\uffa3\053\uffa3" +
    "\061\uffa3\001\002\000\026\013\040\024\047\032\045\054" +
    "\056\055\057\056\052\057\051\060\054\061\043\062\050" +
    "\001\002\000\010\012\062\014\312\035\063\001\002\000" +
    "\004\017\070\001\002\000\040\002\uffaf\003\uffaf\020\uffaf" +
    "\037\uffaf\040\314\041\uffaf\042\uffaf\043\uffaf\044\uffaf\045" +
    "\uffaf\046\uffaf\050\uffaf\051\uffaf\053\uffaf\061\uffaf\001\002" +
    "\000\006\017\070\037\016\001\002\000\036\002\uffae\003" +
    "\uffae\020\uffae\037\uffae\041\uffae\042\uffae\043\uffae\044\uffae" +
    "\045\uffae\046\uffae\050\uffae\051\uffae\053\uffae\061\uffae\001" +
    "\002\000\036\002\uffac\003\uffac\020\uffac\037\uffac\041\uffac" +
    "\042\uffac\043\uffac\044\uffac\045\uffac\046\uffac\050\uffac\051" +
    "\uffac\053\uffac\061\uffac\001\002\000\036\002\uffad\003\uffad" +
    "\020\uffad\037\uffad\041\uffad\042\uffad\043\uffad\044\uffad\045" +
    "\uffad\046\uffad\050\uffad\051\uffad\053\uffad\061\uffad\001\002" +
    "\000\030\013\040\014\322\024\047\032\045\054\056\055" +
    "\057\056\052\057\051\060\054\061\043\062\050\001\002" +
    "\000\010\012\062\014\323\035\063\001\002\000\040\002" +
    "\uffa0\003\uffa0\020\uffa0\022\uffa0\037\uffa0\041\uffa0\042\uffa0" +
    "\043\uffa0\044\uffa0\045\uffa0\046\uffa0\050\uffa0\051\uffa0\053" +
    "\uffa0\061\uffa0\001\002\000\040\002\uff9f\003\uff9f\020\uff9f" +
    "\022\uff9f\037\uff9f\041\uff9f\042\uff9f\043\uff9f\044\uff9f\045" +
    "\uff9f\046\uff9f\050\uff9f\051\uff9f\053\uff9f\061\uff9f\001\002" +
    "\000\036\002\ufff6\003\ufff6\020\ufff6\037\ufff6\041\ufff6\042" +
    "\ufff6\043\ufff6\044\ufff6\045\ufff6\046\ufff6\050\ufff6\051\ufff6" +
    "\053\ufff6\061\ufff6\001\002\000\036\002\ufff1\003\ufff1\020" +
    "\ufff1\037\ufff1\041\ufff1\042\ufff1\043\ufff1\044\ufff1\045\ufff1" +
    "\046\ufff1\050\ufff1\051\ufff1\053\ufff1\061\ufff1\001\002\000" +
    "\036\002\ufff8\003\ufff8\020\ufff8\037\ufff8\041\ufff8\042\ufff8" +
    "\043\ufff8\044\ufff8\045\ufff8\046\ufff8\050\ufff8\051\ufff8\053" +
    "\ufff8\061\ufff8\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\325\000\040\002\003\003\005\011\013\012\004\013" +
    "\007\015\027\022\016\023\010\024\030\025\032\026\024" +
    "\027\021\030\020\035\012\037\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\003\005\012\076\013\007\015\027" +
    "\022\016\023\010\024\030\025\032\026\024\027\021\030" +
    "\020\035\012\037\022\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\302\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\031\123\032\124\040\122\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\003\005\012\074\013\007\015\027" +
    "\022\016\023\010\024\030\025\032\026\024\027\021\030" +
    "\020\035\012\037\022\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\004\054" +
    "\005\041\006\045\007\043\030\040\035\057\037\052\001" +
    "\001\000\020\004\173\005\041\006\045\007\043\030\040" +
    "\035\057\037\052\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\031\123\032\124\040\122\001\001\000\004" +
    "\044\101\001\001\000\012\007\121\030\040\035\057\037" +
    "\052\001\001\000\004\045\117\001\001\000\012\007\100" +
    "\030\040\035\057\037\052\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\010\070\001\001\000\020" +
    "\004\066\005\041\006\045\007\043\030\040\035\057\037" +
    "\052\001\001\000\020\004\063\005\041\006\045\007\043" +
    "\030\040\035\057\037\052\001\001\000\002\001\001\000" +
    "\020\004\065\005\041\006\045\007\043\030\040\035\057" +
    "\037\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\003\005\011\071\012\004\013\007\015\027\022\016" +
    "\023\010\024\030\025\032\026\024\027\021\030\020\035" +
    "\012\037\022\001\001\000\002\001\001\000\034\003\005" +
    "\012\076\013\007\015\027\022\016\023\010\024\030\025" +
    "\032\026\024\027\021\030\020\035\012\037\022\001\001" +
    "\000\002\001\001\000\034\003\005\012\074\013\007\015" +
    "\027\022\016\023\010\024\030\025\032\026\024\027\021" +
    "\030\020\035\012\037\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\044\101\001\001\000\012\007\110\030\040\035\057\037" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\044\101\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\006\120\007\043\030\040" +
    "\035\057\037\052\001\001\000\004\045\117\001\001\000" +
    "\004\044\101\001\001\000\004\043\157\001\001\000\004" +
    "\032\154\001\001\000\002\001\001\000\024\004\146\005" +
    "\041\006\045\007\043\030\040\035\057\036\144\037\052" +
    "\041\145\001\001\000\020\004\130\005\041\006\045\007" +
    "\043\030\040\035\057\037\052\001\001\000\020\004\141" +
    "\005\041\006\045\007\043\030\040\035\057\037\052\001" +
    "\001\000\002\001\001\000\020\004\132\005\041\006\045" +
    "\007\043\030\040\035\057\037\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\004\136\005\041\006\045" +
    "\007\043\030\040\035\057\037\052\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\022\004\146\005\041\006" +
    "\045\007\043\030\040\035\057\037\052\041\153\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\004\156\005\041\006\045\007\043\030\040\035\057" +
    "\037\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\004\161\005\041\006\045\007\043\030\040\035\057" +
    "\037\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\004\164\005\041\006\045\007\043\030\040\035\057" +
    "\037\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\005\171\006\045\007\043\030\040\035\057\037\052" +
    "\001\001\000\016\005\170\006\045\007\043\030\040\035" +
    "\057\037\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\031\123\032\124\040\122\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\004\177" +
    "\005\041\006\045\007\043\030\040\035\057\037\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\202" +
    "\001\001\000\002\001\001\000\004\010\204\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\004\207\005\041" +
    "\006\045\007\043\030\040\035\057\037\052\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\016\212\017\214" +
    "\021\213\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\020\222\021\223\001\001\000\020\004\216\005\041" +
    "\006\045\007\043\030\040\035\057\037\052\001\001\000" +
    "\002\001\001\000\036\003\005\011\220\012\004\013\007" +
    "\015\027\022\016\023\010\024\030\025\032\026\024\027" +
    "\021\030\020\035\012\037\022\001\001\000\034\003\005" +
    "\012\076\013\007\015\027\022\016\023\010\024\030\025" +
    "\032\026\024\027\021\030\020\035\012\037\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\003\005\011\225\012\004\013\007\015\027\022\016" +
    "\023\010\024\030\025\032\026\024\027\021\030\020\035" +
    "\012\037\022\001\001\000\034\003\005\012\076\013\007" +
    "\015\027\022\016\023\010\024\030\025\032\026\024\027" +
    "\021\030\020\035\012\037\022\001\001\000\002\001\001" +
    "\000\020\004\230\005\041\006\045\007\043\030\040\035" +
    "\057\037\052\001\001\000\002\001\001\000\004\010\232" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\004" +
    "\236\005\041\006\045\007\043\030\040\035\057\037\052" +
    "\042\240\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\004\173\005\041\006\045\007\043\030\040\035\057" +
    "\037\052\001\001\000\002\001\001\000\010\031\123\032" +
    "\124\040\122\001\001\000\002\001\001\000\004\010\244" +
    "\001\001\000\002\001\001\000\006\033\263\034\252\001" +
    "\001\000\020\004\247\005\041\006\045\007\043\030\040" +
    "\035\057\037\052\001\001\000\002\001\001\000\006\033" +
    "\251\034\252\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\004\255\005\041\006\045\007" +
    "\043\030\040\035\057\037\052\001\001\000\002\001\001" +
    "\000\004\034\262\001\001\000\002\001\001\000\004\010" +
    "\261\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\266\001\001\000" +
    "\002\001\001\000\006\033\271\034\252\001\001\000\004" +
    "\010\274\001\001\000\002\001\001\000\004\010\273\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\004\276" +
    "\005\041\006\045\007\043\030\040\035\057\037\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\020\004\301" +
    "\005\041\006\045\007\043\030\040\035\057\037\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\004\305\005\041\006\045\007\043\030\040\035" +
    "\057\037\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\004\310\005\041\006\045\007\043\030\040\035" +
    "\057\037\052\001\001\000\002\001\001\000\004\010\312" +
    "\001\001\000\004\014\314\001\001\000\006\010\316\013" +
    "\315\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\004\320\005\041\006\045\007\043\030" +
    "\040\035\057\037\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public Node root;

    public void syntax_error(Symbol s)
    {
        if (s == null) {
            System.err.println("venia vacio");
            return;
        }
        System.err.println(s.value.toString() + " " + s.right + " "+ s.left);
        Singleton.insertError(new CompileError("Sintactico", "No se esperaba el token " + s.value.toString(), s.right, s.left));
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        System.out.println("El error es " + s.value.toString() + " " + s.right + " " + s.left);
        if (s == null)
        {
            Singleton.insertError( new CompileError("Sintactico", "fin de archivo no encontrado", 0, 0));
            System.out.println("Gramatica irreducible");
            return;
        }

        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        System.err.println(lexema + " - " + fila + "  - "+ columna);

        Singleton.insertError(new CompileError("Error Sintactico", "No se esperaba el token " + lexema, fila, columna));
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {


    public void transferChildren(Node losing, Node gaining) {
        int size = losing.getChildrenCount();
        for (int i = 0; i < size; i++) {
            gaining.addChildren(losing.getChildAt(i));
        }
    }

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // VECTORS ::= openingBracket LONE_EXPRESSION closingBracket 
            {
              Node RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node exp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 Node addresses = new Node("addresses");
                                                                                                   addresses.addChildren(exp);
                                                                                                   RESULT = addresses;
                                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VECTORS",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // VECTORS ::= VECTORS openingBracket LONE_EXPRESSION closingBracket 
            {
              Node RESULT =null;
		int addressesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int addressesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Node addresses = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node exp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 Node adds = new Node("addresses");
                                                                                                   transferChildren(addresses, adds);
                                                                                                   adds.addChildren(exp);
                                                                                                   RESULT = adds;
                                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VECTORS",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // MATRIX_ADDRESS ::= openingBracket comma LONE_EXPRESSION closingBracket 
            {
              Node RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node exp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 Node address = new Node("matrix_address", 0, 0, "right");
                                                                                                                   address.addChildren(exp);
                                                                                                                   RESULT = address;
                                                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MATRIX_ADDRESS",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // MATRIX_ADDRESS ::= openingBracket LONE_EXPRESSION comma closingBracket 
            {
              Node RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node exp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 Node address = new Node("matrix_address", 0, 0, "left");
                                                                                                                   address.addChildren(exp);
                                                                                                                   RESULT = address;
                                                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MATRIX_ADDRESS",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // MATRIX_ADDRESS ::= openingBracket LONE_EXPRESSION comma LONE_EXPRESSION closingBracket 
            {
              Node RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Node exp1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node exp2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 Node address = new Node("matrix_address", 0, 0, "both");
                                                                                                                   address.addChildren(exp1);
                                                                                                                   address.addChildren(exp2);
                                                                                                                   RESULT = address;
                                                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MATRIX_ADDRESS",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // MATRIX_ACCESS ::= id MATRIX_ADDRESS VECTORS 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int matleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int matright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node mat = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int vecsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vecsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node vecs = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Node access = new Node("matrix access");
                                                                   Node ident = new Node("identifier", idright, idleft, String.valueOf(id));
                                                                   access.addChildren(ident);
                                                                   access.addChildren(mat);
                                                                   access.addChildren(vecs);
                                                                   RESULT = access;
                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MATRIX_ACCESS",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // MATRIX_ACCESS ::= id MATRIX_ADDRESS 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int matleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int matright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node mat = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Node access = new Node("matrix access");
                                                                   Node ident = new Node("identifier", idright, idleft, String.valueOf(id));
                                                                   access.addChildren(ident);
                                                                   access.addChildren(mat);
                                                                   RESULT = access;
                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MATRIX_ACCESS",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // ADDRESS ::= openingBracket openingBracket LONE_EXPRESSION closingBracket closingBracket 
            {
              Node RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node exp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 Node address = new Node("address", 0, 0, "doubleB");
                                                                                                   address.addChildren(exp);
                                                                                                   RESULT = address;
                                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ADDRESS",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ADDRESS ::= openingBracket LONE_EXPRESSION closingBracket 
            {
              Node RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node exp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 Node address = new Node("address", 0, 0, "singleB");
                                                                                                   address.addChildren(exp);
                                                                                                   RESULT = address;
                                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ADDRESS",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ADDRESSES ::= ADDRESS 
            {
              Node RESULT =null;
		int singleleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int singleright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node single = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Node adds = new Node("addresses");
                                                                   adds.addChildren(single);
                                                                   RESULT = adds;
                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ADDRESSES",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ADDRESSES ::= ADDRESSES ADDRESS 
            {
              Node RESULT =null;
		int addressesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int addressesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node addresses = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int singleleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int singleright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node single = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Node adds = new Node("addresses");
                                                                   transferChildren(addresses, adds);
                                                                   adds.addChildren(single);
                                                                   RESULT = adds;
                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ADDRESSES",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // VECTOR_ACCESS ::= id ADDRESSES 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int addleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int addright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node add = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Node res = new Node("structure access");
                                                       Node ident = new Node("identifier", idright, idleft, String.valueOf(id));
                                                       res.addChildren(ident);
                                                       res.addChildren(add);
                                                       RESULT = res;
                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VECTOR_ACCESS",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // CONTINUE_SENTENCE ::= continueKeyword 
            {
              Node RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("continue sentence", bright, bleft, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTINUE_SENTENCE",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // BREAK_SENTENCE ::= breakKeyword 
            {
              Node RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("break sentence", bright, bleft, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BREAK_SENTENCE",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // RETURN_SENTENCE ::= returnKeyword openingPar LONE_EXPRESSION closingPar 
            {
              Node RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node exp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 Node retNode = new Node("return sentence", rright, rleft, null);
                                                                                     retNode.addChildren(exp);
                                                                                     RESULT = retNode;
                                                                                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN_SENTENCE",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // RETURN_SENTENCE ::= returnKeyword openingPar closingPar 
            {
              Node RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Node("return sentence", rright, rleft, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN_SENTENCE",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // RETURN_SENTENCE ::= returnKeyword 
            {
              Node RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("return sentence", rright, rleft, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN_SENTENCE",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // FOR_SENTENCE ::= forKeyword openingPar id inKeyword LONE_EXPRESSION closingPar SENTENCES_BLOCK 
            {
              Node RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node exp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int actionsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int actionsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node actions = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  Node forNode = new Node("for sentence", fright, fleft, null);
                                                                                                                        Node idNode = new Node("identifier", idright, idleft, String.valueOf(id));
                                                                                                                        forNode.addChildren(idNode);
                                                                                                                        Node condition = new Node("condition");
                                                                                                                        condition.addChildren(exp);
                                                                                                                        forNode.addChildren(condition);
                                                                                                                        forNode.addChildren(actions);
                                                                                                                        RESULT = forNode;
                                                                                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR_SENTENCE",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // DOWHILE_SENTENCE ::= doKeyword SENTENCES_BLOCK whileKeyword openingPar LONE_EXPRESSION closingPar 
            {
              Node RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int actionsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int actionsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node actions = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node exp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  Node doNode = new Node("do while sentence", dright, dleft, null);
                                                                                                                        Node condition = new Node("condition");
                                                                                                                        condition.addChildren(exp);
                                                                                                                        doNode.addChildren(actions);
                                                                                                                        doNode.addChildren(condition);
                                                                                                                        RESULT = doNode;
                                                                                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DOWHILE_SENTENCE",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // WHILE_SENTENCE ::= whileKeyword openingPar LONE_EXPRESSION closingPar SENTENCES_BLOCK 
            {
              Node RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object w = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node exp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int actionsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int actionsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node actions = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  Node whileNode = new Node("while sentence", wright, wleft, null);
                                                                                                            Node condition = new Node("condition");
                                                                                                            condition.addChildren(exp);
                                                                                                            whileNode.addChildren(condition);
                                                                                                            whileNode.addChildren(actions);
                                                                                                            RESULT = whileNode;
                                                                                                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WHILE_SENTENCE",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // DEFAULT_CASE ::= defaultKeyword colon SENTENCES_LIST 
            {
              Node RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int actionsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int actionsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node actions = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Node defa = new Node("default", dright, dleft, null);
                                                                                       defa.addChildren(actions);
                                                                                       RESULT = defa;
                                                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEFAULT_CASE",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // SINGLE_CASE ::= caseKeyword LONE_EXPRESSION colon SENTENCES_LIST 
            {
              Node RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node exp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int actionsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int actionsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node actions = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Node single = new Node("case", cright, cleft, null);
                                                                                       Node condition = new Node("value");
                                                                                       condition.addChildren(exp);
                                                                                       single.addChildren(condition);
                                                                                       single.addChildren(actions);
                                                                                       RESULT = single;
                                                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SINGLE_CASE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // CASES_LIST ::= SINGLE_CASE 
            {
              Node RESULT =null;
		int singleleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int singleright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node single = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Node situation = new Node("cases_list");
                                                                   situation.addChildren(single);
                                                                   RESULT = situation;
                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASES_LIST",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CASES_LIST ::= CASES_LIST SINGLE_CASE 
            {
              Node RESULT =null;
		int casesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int casesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node cases = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int singleleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int singleright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node single = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Node casesNode = new Node("cases_list");
                                                                   transferChildren(cases, casesNode);
                                                                   casesNode.addChildren(single);
                                                                   RESULT = casesNode;
                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASES_LIST",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // SWITCH_BODY ::= CASES_LIST DEFAULT_CASE 
            {
              Node RESULT =null;
		int casesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int casesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node cases = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int defleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int defright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node def = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 cases.addChildren(def);
                                                   RESULT = cases;
                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCH_BODY",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // SWITCH_BODY ::= CASES_LIST 
            {
              Node RESULT =null;
		int casesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int casesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node cases = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = cases; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCH_BODY",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // SWITCH_SENTENCE ::= switchKeyword openingPar LONE_EXPRESSION closingPar openingCurly SWITCH_BODY closingCurly 
            {
              Node RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node val = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node body = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		  Node switchNode = new Node("switch sentence", sright, sleft, null);
                                                                                                                                Node condition = new Node("condition");
                                                                                                                                condition.addChildren(val);
                                                                                                                                switchNode.addChildren(condition);
                                                                                                                                switchNode.addChildren(body);
                                                                                                                                RESULT = switchNode;
                                                                                                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCH_SENTENCE",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ELSE_SENTENCE ::= elseKeyword IF_SENTENCE 
            {
              Node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ifSentencesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ifSentencesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node ifSentences = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Node elseNode = new Node("else if sentence", eright, eleft, null);
                                                                              transferChildren(ifSentences, elseNode);
                                                                              RESULT = elseNode;
                                                                           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE_SENTENCE",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ELSE_SENTENCE ::= elseKeyword SENTENCES_BLOCK 
            {
              Node RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sentencesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentencesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node sentences = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Node elseNode = new Node("else sentence", eright, eleft, null);
                                                                              elseNode.addChildren(sentences);
                                                                              RESULT = elseNode;
                                                                           
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE_SENTENCE",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // IF_SENTENCE ::= ifKeyword openingPar LONE_EXPRESSION closingPar SENTENCES_BLOCK ELSE_SENTENCE 
            {
              Node RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Node cond = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sentencesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sentencesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node sentences = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int elseNodeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int elseNoderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node elseNode = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  Node ifNode = new Node("if sentence", iright, ileft, null);
                                                                                                                        Node condition = new Node("condition");
                                                                                                                        condition.addChildren(cond);
                                                                                                                        ifNode.addChildren(condition);
                                                                                                                        ifNode.addChildren(sentences);
                                                                                                                        ifNode.addChildren(elseNode);
                                                                                                                        RESULT = ifNode;
                                                                                                                     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_SENTENCE",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // IF_SENTENCE ::= ifKeyword openingPar LONE_EXPRESSION closingPar SENTENCES_BLOCK 
            {
              Node RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node cond = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sentencesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentencesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node sentences = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  Node ifNode = new Node("if sentence", iright, ileft, null);
                                                                                                                    Node condition = new Node("condition");
                                                                                                                    condition.addChildren(cond);
                                                                                                                    ifNode.addChildren(condition);
                                                                                                                    ifNode.addChildren(sentences);
                                                                                                                    RESULT = ifNode;
                                                                                                                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF_SENTENCE",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // PARAMS ::= LONE_EXPRESSION 
            {
              Node RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node exp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = exp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMS",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // PARAMS ::= defaultKeyword 
            {
              Node RESULT =null;
		int defleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int defright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object def = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("default", defright, defleft, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMS",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXPRESSIONS_LIST ::= PARAMS 
            {
              Node RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node param = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Node params = new Node("params");
                                                                                   params.addChildren(param);
                                                                                   RESULT = params;
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONS_LIST",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXPRESSIONS_LIST ::= EXPRESSIONS_LIST comma PARAMS 
            {
              Node RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node list = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int paramleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node param = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Node params = new Node("params");
                                                                                   transferChildren(list, params);
                                                                                   params.addChildren(param);
                                                                                   RESULT = params;
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESSIONS_LIST",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // FUNCTION_CALL ::= id openingPar EXPRESSIONS_LIST closingPar 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node params = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 Node call = new Node("call");
                                                                                   Node ident = new Node("identifier", idright, idleft, String.valueOf(id));
                                                                                   call.addChildren(ident);
                                                                                   call.addChildren(params);
                                                                                   RESULT = call;
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_CALL",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // FUNCTION_CALL ::= id openingPar closingPar 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 Node call = new Node("call");
                                                                                   Node ident = new Node("identifier", idright, idleft, String.valueOf(id));
                                                                                   call.addChildren(ident);
                                                                                   RESULT = call;
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION_CALL",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // PARAMETER ::= id valAsignment LONE_EXPRESSION 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node exp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Node param = new Node("asignment", vright, vleft, null);
                                                               Node ident = new Node("identifier", idright, idleft, String.valueOf(id));
                                                               param.addChildren(ident);
                                                               param.addChildren(exp);
                                                               RESULT = param;
                                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETER",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // PARAMETER ::= id 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("identifier", idright, idleft, String.valueOf(id)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETER",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // PARAMETERS_DECL ::= PARAMETER 
            {
              Node RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node par = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Node params = new Node("parameters");
                                                                                   params.addChildren(par);
                                                                                   RESULT = params; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETERS_DECL",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // PARAMETERS_DECL ::= PARAMETERS_DECL comma PARAMETER 
            {
              Node RESULT =null;
		int tersleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tersright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node ters = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int parleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int parright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node par = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Node params = new Node("paratemers");
                                                                                   transferChildren(ters, params);
                                                                                   params.addChildren(par);
                                                                                   RESULT = params;
                                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETERS_DECL",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ARROW_FUNCTION ::= openingPar id valAsignment LONE_EXPRESSION comma PARAMETERS_DECL closingPar arrowFunction SENTENCES_BLOCK 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Node exp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Node params = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node list = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Node res = new Node("arrow def");
                                                                                                                                      Node param = new Node("asignment");
                                                                                                                                      Node ident = new Node("identifier", idright, idleft, String.valueOf(id));
                                                                                                                                      param.addChildren(ident);
                                                                                                                                      param.addChildren(exp);
                                                                                                                                      params.addChildrenAt(0, param);
                                                                                                                                      res.addChildren(params);
                                                                                                                                      res.addChildren(list);
                                                                                                                                      RESULT = res;
                                                                                                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARROW_FUNCTION",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ARROW_FUNCTION ::= openingPar id comma PARAMETERS_DECL closingPar arrowFunction SENTENCES_BLOCK 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Node params = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node list = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Node res = new Node("arrow def");
                                                                                                                               Node ident = new Node("identifier", idright, idleft, String.valueOf(id));
                                                                                                                               params.addChildrenAt(0, ident);
                                                                                                                               res.addChildren(params);
                                                                                                                               res.addChildren(list);
                                                                                                                               RESULT = res;
                                                                                                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARROW_FUNCTION",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ARROW_FUNCTION ::= openingPar closingPar arrowFunction SENTENCES_BLOCK 
            {
              Node RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node list = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Node res = new Node("arrow def");
                                                                                                                               res.addChildren(list);
                                                                                                                               RESULT = res;
                                                                                                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARROW_FUNCTION",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ASIGNMENT ::= id valAsignment functionKeyword openingPar PARAMETERS_DECL closingPar SENTENCES_BLOCK 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int paramsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int paramsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node params = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int actionsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int actionsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node actions = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Node fun = new Node("function", fright, fleft, null);
                                                                                                                       Node ident = new Node("identifier", idright, idleft, String.valueOf(id));
                                                                                                                       fun.addChildren(ident);
                                                                                                                       fun.addChildren(params);
                                                                                                                       fun.addChildren(actions);
                                                                                                                       RESULT = fun;
                                                                                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGNMENT",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ASIGNMENT ::= id valAsignment functionKeyword openingPar closingPar SENTENCES_BLOCK 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int actionsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int actionsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node actions = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Node fun = new Node("function", fright, fleft, null);
                                                                                                                       Node ident = new Node("identifier", idright, idleft, String.valueOf(id));
                                                                                                                       fun.addChildren(ident);
                                                                                                                       fun.addChildren(actions);
                                                                                                                       RESULT = fun;
                                                                                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGNMENT",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ASIGNMENT ::= id valAsignment ARROW_FUNCTION 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node f = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Node as = new Node("arrow function", vright, vleft, null);
                                                                       Node ident = new Node("identifier", idright, idleft, String.valueOf(id));
                                                                       as.addChildren(ident);
                                                                       as.addChildren(f);
                                                                       RESULT = as;
                                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGNMENT",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ASIGNMENT ::= VECTOR_ACCESS valAsignment LONE_EXPRESSION 
            {
              Node RESULT =null;
		int vecleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vecright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node vec = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node exp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Node as = new Node("structure asignment");
                                                                       as.addChildren(vec);
                                                                       as.addChildren(exp);
                                                                       RESULT = as;
                                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGNMENT",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ASIGNMENT ::= MATRIX_ACCESS valAsignment LONE_EXPRESSION 
            {
              Node RESULT =null;
		int matleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int matright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node mat = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node exp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Node as = new Node("matrix asignment", vright, vleft, null);
                                                                       as.addChildren(mat);
                                                                       as.addChildren(exp);
                                                                       RESULT = as;
                                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGNMENT",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ASIGNMENT ::= id valAsignment LONE_EXPRESSION 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node exp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Node as = new Node("asignment", vright, vleft, null);
                                                                       Node ident = new Node("identifier", idright, idleft, String.valueOf(id));
                                                                       as.addChildren(ident);
                                                                       as.addChildren(exp);
                                                                       RESULT = as;
                                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGNMENT",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // OPERATOR ::= mod 
            {
              Object RESULT =null;
		 RESULT = "%%"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERATOR",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // OPERATOR ::= power 
            {
              Object RESULT =null;
		 RESULT = "^"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERATOR",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // OPERATOR ::= div 
            {
              Object RESULT =null;
		 RESULT = "/"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERATOR",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OPERATOR ::= times 
            {
              Object RESULT =null;
		 RESULT = "*"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERATOR",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OPERATOR ::= minus 
            {
              Object RESULT =null;
		 RESULT = "-"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERATOR",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // OPERATOR ::= plus 
            {
              Object RESULT =null;
		 RESULT = "+"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OPERATOR",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // LFOUR_EXPRESSION ::= openingPar id valAsignment LONE_EXPRESSION closingPar 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node exp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 Node res = new Node("binary expression");
                                                                                       Node op = new Node("=", vright, vleft, null);
                                                                                       Node ident = new Node("identifier", idright, idleft, String.valueOf(id));
                                                                                       op.addChildren(ident);
                                                                                       op.addChildren(exp);
                                                                                       res.addChildren(op);
                                                                                       RESULT = res;
                                                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LFOUR_EXPRESSION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // LFOUR_EXPRESSION ::= openingPar id closingPar 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Node("identifier", idright, idleft, String.valueOf(id)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LFOUR_EXPRESSION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // LFOUR_EXPRESSION ::= id 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("identifier", idright, idleft, String.valueOf(id).toLowerCase()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LFOUR_EXPRESSION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // LFOUR_EXPRESSION ::= trueValue 
            {
              Node RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("bool value", vright, vleft, true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LFOUR_EXPRESSION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // LFOUR_EXPRESSION ::= falseValue 
            {
              Node RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("bool value", vright, vleft, false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LFOUR_EXPRESSION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // LFOUR_EXPRESSION ::= integerValue 
            {
              Node RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("integer value", vright, vleft, Integer.parseInt(String.valueOf(v))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LFOUR_EXPRESSION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // LFOUR_EXPRESSION ::= numericValue 
            {
              Node RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("numeric value", vright, vleft, Double.parseDouble(String.valueOf(v))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LFOUR_EXPRESSION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // LFOUR_EXPRESSION ::= stringValue 
            {
              Node RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("string value", vright, vleft, String.valueOf(v)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LFOUR_EXPRESSION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // LFOUR_EXPRESSION ::= nullValue 
            {
              Node RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("null value", vright, vleft, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LFOUR_EXPRESSION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // LFOUR_EXPRESSION ::= openingPar id valAsignment LONE_EXPRESSION closingPar arrowFunction SENTENCES_BLOCK 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Node exp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int sentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node sent = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Node arr = new Node("arrow def");
                                                                                       Node param = new Node("asignment");
                                                                                       Node ident = new Node("identifier", idright, idleft, String.valueOf(id));
                                                                                       param.addChildren(ident);
                                                                                       param.addChildren(exp);
                                                                                       Node parameters = new Node("parameters");
                                                                                       parameters.addChildren(param);
                                                                                       arr.addChildren(parameters);
                                                                                       arr.addChildren(sent);
                                                                                       RESULT = arr;
                                                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LFOUR_EXPRESSION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // LFOUR_EXPRESSION ::= openingPar id closingPar arrowFunction SENTENCES_BLOCK 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node list = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Node arr = new Node("arrow def");
                                                                                       Node param = new Node("identifier", idright, idleft, String.valueOf(id));
                                                                                       Node parameters = new Node("parameters");
                                                                                       parameters.addChildren(param);
                                                                                       arr.addChildren(parameters);
                                                                                       arr.addChildren(list);
                                                                                       RESULT = arr;
                                                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LFOUR_EXPRESSION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // LFOUR_EXPRESSION ::= MATRIX_ACCESS 
            {
              Node RESULT =null;
		int matleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int matright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node mat = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = mat; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LFOUR_EXPRESSION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // LFOUR_EXPRESSION ::= VECTOR_ACCESS 
            {
              Node RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node st = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = st; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LFOUR_EXPRESSION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // LFOUR_EXPRESSION ::= FUNCTION_CALL 
            {
              Node RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node f = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = f; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LFOUR_EXPRESSION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // LFOUR_EXPRESSION ::= openingPar LONE_EXPRESSION closingPar 
            {
              Node RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node exp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = exp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LFOUR_EXPRESSION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // LFOUR_EXPRESSION ::= not LFOUR_EXPRESSION 
            {
              Node RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node exp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Node res = new Node("unary expression");
                                                                                       Node operator = new Node("!", opright, opleft, null);
                                                                                       operator.addChildren(exp);
                                                                                       res.addChildren(operator);
                                                                                       RESULT = res;
                                                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LFOUR_EXPRESSION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // LFOUR_EXPRESSION ::= minus LFOUR_EXPRESSION 
            {
              Node RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node exp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Node res = new Node("unary expression");
                                                                                       Node operator = new Node("-", opright, opleft, null);
                                                                                       operator.addChildren(exp);
                                                                                       res.addChildren(operator);
                                                                                       RESULT = res;
                                                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LFOUR_EXPRESSION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // LFOUR_EXPRESSION ::= LFOUR_EXPRESSION OPERATOR LFOUR_EXPRESSION 
            {
              Node RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node exp1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node exp2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Node res = new Node("binary expression");
                                                                                       Node operator = new Node(String.valueOf(op), opright, opleft, null);
                                                                                       operator.addChildren(exp1);
                                                                                       operator.addChildren(exp2);
                                                                                       res.addChildren(operator);
                                                                                       RESULT = res;
                                                                                    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LFOUR_EXPRESSION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // RELATIONAL_OPERATOR ::= lesser 
            {
              Object RESULT =null;
		 RESULT = "<"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELATIONAL_OPERATOR",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // RELATIONAL_OPERATOR ::= greater 
            {
              Object RESULT =null;
		 RESULT = ">"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELATIONAL_OPERATOR",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // RELATIONAL_OPERATOR ::= lesserEquals 
            {
              Object RESULT =null;
		 RESULT = "<="; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELATIONAL_OPERATOR",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // RELATIONAL_OPERATOR ::= greaterEquals 
            {
              Object RESULT =null;
		 RESULT = ">="; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELATIONAL_OPERATOR",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // RELATIONAL_OPERATOR ::= notEquals 
            {
              Object RESULT =null;
		 RESULT = "!="; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELATIONAL_OPERATOR",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // RELATIONAL_OPERATOR ::= equals 
            {
              Object RESULT =null;
		 RESULT = "=="; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELATIONAL_OPERATOR",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LTHREE_EXPRESSION ::= LFOUR_EXPRESSION 
            {
              Node RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node exp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = exp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LTHREE_EXPRESSION",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LTHREE_EXPRESSION ::= LTHREE_EXPRESSION RELATIONAL_OPERATOR LTHREE_EXPRESSION 
            {
              Node RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node exp1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node exp2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Node res = new Node("binary expression");
                                                                                                               Node operator = new Node(String.valueOf(op), opright, opleft, null);
                                                                                                               operator.addChildren(exp1);
                                                                                                               operator.addChildren(exp2);
                                                                                                               res.addChildren(operator);
                                                                                                               RESULT = res;
                                                                                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LTHREE_EXPRESSION",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LTWO_EXPRESSION ::= LTHREE_EXPRESSION 
            {
              Node RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node exp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = exp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LTWO_EXPRESSION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // LTWO_EXPRESSION ::= LTWO_EXPRESSION or LTWO_EXPRESSION 
            {
              Node RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node exp1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node exp2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Node res = new Node("binary expression");
                                                                                                               Node operator = new Node("|", oright, oleft, null);
                                                                                                               operator.addChildren(exp1);
                                                                                                               operator.addChildren(exp2);
                                                                                                               res.addChildren(operator);
                                                                                                               RESULT = res;
                                                                                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LTWO_EXPRESSION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LTWO_EXPRESSION ::= LTWO_EXPRESSION and LTWO_EXPRESSION 
            {
              Node RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node exp1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node exp2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Node res = new Node("binary expression");
                                                                                                               Node operator = new Node("&", aright, aleft, null);
                                                                                                               operator.addChildren(exp1);
                                                                                                               operator.addChildren(exp2);
                                                                                                               res.addChildren(operator);
                                                                                                               RESULT = res;
                                                                                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LTWO_EXPRESSION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LONE_EXPRESSION ::= LTWO_EXPRESSION 
            {
              Node RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node exp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = exp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LONE_EXPRESSION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LONE_EXPRESSION ::= LONE_EXPRESSION valAsignment LONE_EXPRESSION 
            {
              Node RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node exp1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node exp2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Node res = new Node("binary expression");
                                                                                                               Node operator = new Node("=", vright, vleft, null);
                                                                                                               operator.addChildren(exp1);
                                                                                                               operator.addChildren(exp2);
                                                                                                               res.addChildren(operator);
                                                                                                               RESULT = res;
                                                                                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LONE_EXPRESSION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LONE_EXPRESSION ::= LONE_EXPRESSION ternary LONE_EXPRESSION colon LONE_EXPRESSION 
            {
              Node RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node exp1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int terleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int terright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object ter = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node exp2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int colleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object col = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exp3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node exp3 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Node res = new Node("ternary expression");
                                                                                                              Node tern = new Node("?", terright, terleft, null);
                                                                                                              tern.addChildren(exp1);
                                                                                                              Node colon = new Node(":", colright, colleft, null);
                                                                                                              colon.addChildren(exp2);
                                                                                                              colon.addChildren(exp3);
                                                                                                              res.addChildren(tern);
                                                                                                              res.addChildren(colon);
                                                                                                              RESULT = res;
                                                                                                            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LONE_EXPRESSION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCE ::= error SENTENCE 
            {
              Node RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node s = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCE",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCE ::= CONTINUE_SENTENCE semicolon 
            {
              Node RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node c = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCE",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCE ::= CONTINUE_SENTENCE 
            {
              Node RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node c = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCE",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCE ::= BREAK_SENTENCE semicolon 
            {
              Node RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node b = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCE",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCE ::= BREAK_SENTENCE 
            {
              Node RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node b = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCE",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCE ::= RETURN_SENTENCE semicolon 
            {
              Node RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node r = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = r; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCE",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCE ::= RETURN_SENTENCE 
            {
              Node RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node r = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = r; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCE",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCE ::= FOR_SENTENCE 
            {
              Node RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node f = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = f; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCE",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCE ::= DOWHILE_SENTENCE semicolon 
            {
              Node RESULT =null;
		int duleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int duright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node du = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = du; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCE",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCE ::= DOWHILE_SENTENCE 
            {
              Node RESULT =null;
		int duleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int duright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node du = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = du; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCE",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCE ::= WHILE_SENTENCE 
            {
              Node RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node w = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = w; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCE",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCE ::= SWITCH_SENTENCE 
            {
              Node RESULT =null;
		int swleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int swright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node sw = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = sw; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCE",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCE ::= IF_SENTENCE 
            {
              Node RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node si = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = si; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCE",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCE ::= FUNCTION_CALL semicolon 
            {
              Node RESULT =null;
		int callleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int callright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node call = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = call; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCE",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCE ::= FUNCTION_CALL 
            {
              Node RESULT =null;
		int callleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int callright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node call = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = call; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCE",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCE ::= ASIGNMENT semicolon 
            {
              Node RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node sent = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = sent; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCE",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCE ::= ASIGNMENT 
            {
              Node RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node sent = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = sent; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCE",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCES_BLOCK ::= openingCurly error closingCurly 
            {
              Node RESULT =null;
		 RESULT = new Node("sentences"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCES_BLOCK",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCES_BLOCK ::= openingCurly SENTENCES_LIST closingCurly 
            {
              Node RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node list = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = list; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCES_BLOCK",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCES_BLOCK ::= openingCurly closingCurly 
            {
              Node RESULT =null;
		 RESULT = new Node("sentences"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCES_BLOCK",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCES_LIST ::= SENTENCE 
            {
              Node RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node sent = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Node sentences = new Node("sentences");
                                                                   sentences.addChildren(sent);
                                                                   RESULT = sentences;
                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCES_LIST",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCES_LIST ::= SENTENCES_LIST SENTENCE 
            {
              Node RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node sent = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sent2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sent2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node sent2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Node sentences = new Node("sentences");
                                                                   transferChildren(sent, sentences);
                                                                   sentences.addChildren(sent2);
                                                                   RESULT = sentences;
                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCES_LIST",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // ROOT ::= 
            {
              Node RESULT =null;
		 Node sentences = new Node("sentences");
                                   Node rut = new Node("root");
                                   rut.addChildren(sentences);
                                   parser.root = rut;
                                   RESULT = rut;
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ROOT",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ROOT ::= SENTENCES_LIST 
            {
              Node RESULT =null;
		int rootleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rootright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node root = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Node rut = new Node("root");
                                   rut.addChildren(root);
                                   parser.root = rut;
                                   //System.out.println("Si estoy llegando a la raiz");
                                   RESULT = rut;
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ROOT",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ROOT EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node start_val = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

