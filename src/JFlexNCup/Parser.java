
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Feb 24 17:08:03 CST 2020
//----------------------------------------------------

package JFlexNCup;

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import APIServices.Node;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Feb 24 17:08:03 CST 2020
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\062\000\002\002\004\000\002\002\003\000\002\012" +
    "\004\000\002\012\003\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\011" +
    "\005\000\002\003\006\000\002\003\005\000\002\041\003" +
    "\000\002\004\007\000\002\004\003\000\002\005\005\000" +
    "\002\005\005\000\002\005\004\000\002\005\003\000\002" +
    "\006\005\000\002\006\003\000\002\046\003\000\002\046" +
    "\003\000\002\046\003\000\002\046\003\000\002\046\003" +
    "\000\002\046\003\000\002\007\005\000\002\007\004\000" +
    "\002\007\005\000\002\007\003\000\002\007\003\000\002" +
    "\045\003\000\002\045\003\000\002\045\003\000\002\045" +
    "\003\000\002\045\003\000\002\045\003\000\002\045\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\100\000\004\061\005\001\002\000\006\002\ufffa\061" +
    "\ufffa\001\002\000\004\012\uffef\001\002\000\006\002\ufff3" +
    "\061\ufff3\001\002\000\004\012\026\001\002\000\006\002" +
    "\ufff8\061\ufff8\001\002\000\006\002\ufffb\061\ufffb\001\002" +
    "\000\004\002\025\001\002\000\006\002\000\061\005\001" +
    "\002\000\006\002\ufffe\061\ufffe\001\002\000\006\002\ufff9" +
    "\061\ufff9\001\002\000\006\002\ufff5\061\ufff5\001\002\000" +
    "\006\002\ufff4\061\ufff4\001\002\000\006\002\ufffd\061\ufffd" +
    "\001\002\000\006\002\ufff7\061\ufff7\001\002\000\006\002" +
    "\ufff6\061\ufff6\001\002\000\006\002\ufffc\061\ufffc\001\002" +
    "\000\006\002\uffff\061\uffff\001\002\000\004\002\001\001" +
    "\002\000\024\013\027\024\035\032\033\054\043\055\044" +
    "\056\032\057\036\060\042\061\030\001\002\000\024\013" +
    "\027\024\035\032\033\054\043\055\044\056\032\057\036" +
    "\060\042\061\030\001\002\000\054\002\uffdc\004\uffdc\005" +
    "\uffdc\006\uffdc\007\uffdc\010\uffdc\012\uffdc\014\uffdc\022\uffdc" +
    "\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc\031" +
    "\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc\061\uffdc\001\002" +
    "\000\054\002\uffe7\004\072\005\uffe7\006\uffe7\007\uffe7\010" +
    "\uffe7\012\071\014\uffe7\022\uffe7\023\076\024\074\025\075" +
    "\026\077\027\073\030\uffe7\031\uffe7\033\uffe7\034\uffe7\035" +
    "\uffe7\036\uffe7\061\uffe7\001\002\000\054\002\uffd2\004\uffd2" +
    "\005\uffd2\006\uffd2\007\uffd2\010\uffd2\012\uffd2\014\uffd2\022" +
    "\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027\uffd2\030\uffd2" +
    "\031\uffd2\033\uffd2\034\uffd2\035\uffd2\036\uffd2\061\uffd2\001" +
    "\002\000\024\013\027\024\035\032\033\054\043\055\044" +
    "\056\032\057\036\060\042\061\030\001\002\000\054\002" +
    "\uffdd\004\uffdd\005\uffdd\006\uffdd\007\uffdd\010\uffdd\012\uffdd" +
    "\014\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027" +
    "\uffdd\030\uffdd\031\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd" +
    "\061\uffdd\001\002\000\024\013\027\024\035\032\033\054" +
    "\043\055\044\056\032\057\036\060\042\061\030\001\002" +
    "\000\054\002\uffd1\004\uffd1\005\uffd1\006\uffd1\007\uffd1\010" +
    "\uffd1\012\uffd1\014\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1" +
    "\026\uffd1\027\uffd1\030\uffd1\031\uffd1\033\uffd1\034\uffd1\035" +
    "\uffd1\036\uffd1\061\uffd1\001\002\000\012\002\ufff0\022\062" +
    "\035\061\061\ufff0\001\002\000\054\002\uffed\004\uffed\005" +
    "\uffed\006\uffed\007\uffed\010\uffed\012\uffed\014\uffed\022\uffed" +
    "\023\uffed\024\uffed\025\uffed\026\uffed\027\uffed\030\uffed\031" +
    "\uffed\033\055\034\056\035\uffed\036\uffed\061\uffed\001\002" +
    "\000\054\002\uffe9\004\uffe9\005\051\006\047\007\046\010" +
    "\050\012\uffe9\014\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9" +
    "\026\uffe9\027\uffe9\030\052\031\045\033\uffe9\034\uffe9\035" +
    "\uffe9\036\uffe9\061\uffe9\001\002\000\054\002\uffd0\004\uffd0" +
    "\005\uffd0\006\uffd0\007\uffd0\010\uffd0\012\uffd0\014\uffd0\022" +
    "\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0" +
    "\031\uffd0\033\uffd0\034\uffd0\035\uffd0\036\uffd0\061\uffd0\001" +
    "\002\000\054\002\uffd4\004\uffd4\005\uffd4\006\uffd4\007\uffd4" +
    "\010\uffd4\012\uffd4\014\uffd4\022\uffd4\023\uffd4\024\uffd4\025" +
    "\uffd4\026\uffd4\027\uffd4\030\uffd4\031\uffd4\033\uffd4\034\uffd4" +
    "\035\uffd4\036\uffd4\061\uffd4\001\002\000\054\002\uffd3\004" +
    "\uffd3\005\uffd3\006\uffd3\007\uffd3\010\uffd3\012\uffd3\014\uffd3" +
    "\022\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3\030" +
    "\uffd3\031\uffd3\033\uffd3\034\uffd3\035\uffd3\036\uffd3\061\uffd3" +
    "\001\002\000\022\013\uffe2\024\uffe2\054\uffe2\055\uffe2\056" +
    "\uffe2\057\uffe2\060\uffe2\061\uffe2\001\002\000\022\013\uffe3" +
    "\024\uffe3\054\uffe3\055\uffe3\056\uffe3\057\uffe3\060\uffe3\061" +
    "\uffe3\001\002\000\022\013\uffe5\024\uffe5\054\uffe5\055\uffe5" +
    "\056\uffe5\057\uffe5\060\uffe5\061\uffe5\001\002\000\022\013" +
    "\uffe1\024\uffe1\054\uffe1\055\uffe1\056\uffe1\057\uffe1\060\uffe1" +
    "\061\uffe1\001\002\000\022\013\uffe6\024\uffe6\054\uffe6\055" +
    "\uffe6\056\uffe6\057\uffe6\060\uffe6\061\uffe6\001\002\000\022" +
    "\013\uffe4\024\uffe4\054\uffe4\055\uffe4\056\uffe4\057\uffe4\060" +
    "\uffe4\061\uffe4\001\002\000\022\013\027\024\035\054\043" +
    "\055\044\056\032\057\036\060\042\061\030\001\002\000" +
    "\054\002\uffe8\004\uffe8\005\051\006\047\007\046\010\050" +
    "\012\uffe8\014\uffe8\022\uffe8\023\uffe8\024\uffe8\025\uffe8\026" +
    "\uffe8\027\uffe8\030\052\031\045\033\uffe8\034\uffe8\035\uffe8" +
    "\036\uffe8\061\uffe8\001\002\000\024\013\027\024\035\032" +
    "\033\054\043\055\044\056\032\057\036\060\042\061\030" +
    "\001\002\000\024\013\027\024\035\032\033\054\043\055" +
    "\044\056\032\057\036\060\042\061\030\001\002\000\054" +
    "\002\uffeb\004\uffeb\005\uffeb\006\uffeb\007\uffeb\010\uffeb\012" +
    "\uffeb\014\uffeb\022\uffeb\023\uffeb\024\uffeb\025\uffeb\026\uffeb" +
    "\027\uffeb\030\uffeb\031\uffeb\033\055\034\uffeb\035\uffeb\036" +
    "\uffeb\061\uffeb\001\002\000\054\002\uffec\004\uffec\005\uffec" +
    "\006\uffec\007\uffec\010\uffec\012\uffec\014\uffec\022\uffec\023" +
    "\uffec\024\uffec\025\uffec\026\uffec\027\uffec\030\uffec\031\uffec" +
    "\033\uffec\034\uffec\035\uffec\036\uffec\061\uffec\001\002\000" +
    "\024\013\027\024\035\032\033\054\043\055\044\056\032" +
    "\057\036\060\042\061\030\001\002\000\006\002\ufff1\061" +
    "\ufff1\001\002\000\006\035\061\036\064\001\002\000\024" +
    "\013\027\024\035\032\033\054\043\055\044\056\032\057" +
    "\036\060\042\061\030\001\002\000\054\002\uffee\004\uffee" +
    "\005\uffee\006\uffee\007\uffee\010\uffee\012\uffee\014\uffee\022" +
    "\uffee\023\uffee\024\uffee\025\uffee\026\uffee\027\uffee\030\uffee" +
    "\031\uffee\033\uffee\034\uffee\035\061\036\uffee\061\uffee\001" +
    "\002\000\054\002\uffdf\004\uffdf\005\uffdf\006\uffdf\007\uffdf" +
    "\010\uffdf\012\uffdf\014\uffdf\022\uffdf\023\uffdf\024\uffdf\025" +
    "\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\033\uffdf\034\uffdf" +
    "\035\uffdf\036\uffdf\061\uffdf\001\002\000\054\002\uffea\004" +
    "\uffea\005\uffea\006\uffea\007\uffea\010\uffea\012\uffea\014\uffea" +
    "\022\uffea\023\uffea\024\uffea\025\uffea\026\uffea\027\uffea\030" +
    "\uffea\031\uffea\033\uffea\034\uffea\035\uffea\036\uffea\061\uffea" +
    "\001\002\000\022\013\027\024\035\054\043\055\044\056" +
    "\032\057\036\060\042\061\030\001\002\000\022\013\uffd5" +
    "\024\uffd5\054\uffd5\055\uffd5\056\uffd5\057\uffd5\060\uffd5\061" +
    "\uffd5\001\002\000\022\013\uffd7\024\uffd7\054\uffd7\055\uffd7" +
    "\056\uffd7\057\uffd7\060\uffd7\061\uffd7\001\002\000\022\013" +
    "\uffd6\024\uffd6\054\uffd6\055\uffd6\056\uffd6\057\uffd6\060\uffd6" +
    "\061\uffd6\001\002\000\022\013\uffda\024\uffda\054\uffda\055" +
    "\uffda\056\uffda\057\uffda\060\uffda\061\uffda\001\002\000\022" +
    "\013\uffd9\024\uffd9\054\uffd9\055\uffd9\056\uffd9\057\uffd9\060" +
    "\uffd9\061\uffd9\001\002\000\022\013\uffdb\024\uffdb\054\uffdb" +
    "\055\uffdb\056\uffdb\057\uffdb\060\uffdb\061\uffdb\001\002\000" +
    "\022\013\uffd8\024\uffd8\054\uffd8\055\uffd8\056\uffd8\057\uffd8" +
    "\060\uffd8\061\uffd8\001\002\000\054\002\uffe0\004\072\005" +
    "\uffe0\006\uffe0\007\uffe0\010\uffe0\012\071\014\uffe0\022\uffe0" +
    "\023\076\024\074\025\075\026\077\027\073\030\uffe0\031" +
    "\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\061\uffe0\001\002" +
    "\000\006\014\102\035\061\001\002\000\054\002\uffde\004" +
    "\uffde\005\uffde\006\uffde\007\uffde\010\uffde\012\uffde\014\uffde" +
    "\022\uffde\023\uffde\024\uffde\025\uffde\026\uffde\027\uffde\030" +
    "\uffde\031\uffde\033\uffde\034\uffde\035\uffde\036\uffde\061\uffde" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\100\000\040\002\011\003\017\012\012\013\013\014" +
    "\010\016\003\023\014\024\007\025\020\026\016\027\005" +
    "\030\021\031\015\037\022\041\006\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\003\017\013\023\014\010\016\003\023\014\024\007" +
    "\025\020\026\016\027\005\030\021\031\015\037\022\041" +
    "\006\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\004\036\005\037\006\040\007" +
    "\030\010\033\001\001\000\014\004\100\005\037\006\040" +
    "\007\030\010\033\001\001\000\002\001\001\000\004\045" +
    "\067\001\001\000\002\001\001\000\012\005\066\006\040" +
    "\007\030\010\033\001\001\000\002\001\001\000\014\004" +
    "\065\005\037\006\040\007\030\010\033\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\046" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\006\053\007\030\010\033\001\001\000\004\046" +
    "\052\001\001\000\012\005\057\006\040\007\030\010\033" +
    "\001\001\000\012\005\056\006\040\007\030\010\033\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\004\062" +
    "\005\037\006\040\007\030\010\033\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\004\064\005\037\006\040" +
    "\007\030\010\033\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\077\010\033\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\045\067\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public Node root;

    public void syntax_error(Symbol s)
    {   
        System.out.println("LLegue a un error");
        System.out.println(String.valueOf(s));
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {    
        System.out.println("El error es " + s.value.toString());
        /*if (s == null) 
        {
            errores.add(new ErrorC("Error Sintactico", "null", 0, 0, "ultimo token de finalizacion perdido"));
            System.out.println("Gramatica irreducible");
            return;
        } 
        
        String lexema = s.value.toString();
        int fila = s.right + 1;
        int columna = s.left + 1;
       
        errores.add(new ErrorC("Error Sintactico", lexema, fila, columna, "Error No Recuperable"));*/
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {

 
    public void transferChildren(Node losing, Node gaining) {
        int size = losing.getChildrenCount();
        for (int i = 0; i < size; i++) {
            gaining.addChildren(losing.getChildAt(i));
        }
    }

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // BASIC_VALUE ::= trueValue 
            {
              Node RESULT =null;
		int tvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object tv = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("basic value", tvright, tvleft, true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BASIC_VALUE",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // BASIC_VALUE ::= falseValue 
            {
              Node RESULT =null;
		int fvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object fv = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("basic value", fvright, fvleft, false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BASIC_VALUE",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // BASIC_VALUE ::= numberValue 
            {
              Node RESULT =null;
		int nvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object nv = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("basic value", nvright, nvleft, Integer.parseInt(String.valueOf(nv))); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BASIC_VALUE",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // BASIC_VALUE ::= stringValue 
            {
              Node RESULT =null;
		int svleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int svright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object sv = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("basic value", svright, svleft, String.valueOf(sv)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BASIC_VALUE",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // BASIC_VALUE ::= nullValue 
            {
              Node RESULT =null;
		int nuvleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nuvright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object nuv = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("basic value", nuvright, nuvleft, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BASIC_VALUE",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // BASIC_OPERATOR ::= valAsignment 
            {
              Object RESULT =null;
		 RESULT = "="; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BASIC_OPERATOR",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // BASIC_OPERATOR ::= power 
            {
              Object RESULT =null;
		 RESULT = "^"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BASIC_OPERATOR",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // BASIC_OPERATOR ::= mod 
            {
              Object RESULT =null;
		 RESULT = "%"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BASIC_OPERATOR",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // BASIC_OPERATOR ::= div 
            {
              Object RESULT =null;
		 RESULT = "/"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BASIC_OPERATOR",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // BASIC_OPERATOR ::= times 
            {
              Object RESULT =null;
		 RESULT = "*"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BASIC_OPERATOR",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // BASIC_OPERATOR ::= minus 
            {
              Object RESULT =null;
		 RESULT = "-"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BASIC_OPERATOR",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // BASIC_OPERATOR ::= plus 
            {
              Object RESULT =null;
		 RESULT = "+"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BASIC_OPERATOR",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // BASIC_EXPRESSION ::= id 
            {
              Node RESULT =null;
		int fierleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int fierright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object fier = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Node("identifier", fierright, fierleft, String.valueOf(fier)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BASIC_EXPRESSION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // BASIC_EXPRESSION ::= BASIC_VALUE 
            {
              Node RESULT =null;
		int basicleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int basicright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node basic = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = basic; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BASIC_EXPRESSION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // BASIC_EXPRESSION ::= openingPar TERNARY_EXPRESSION closingPar 
            {
              Node RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node exp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = exp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BASIC_EXPRESSION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // BASIC_EXPRESSION ::= minus TERNARY_EXPRESSION 
            {
              Node RESULT =null;
		int minleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int minright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object min = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node exp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Node res = new Node("basic expression");
                                                                                             Node minus = new Node("-", minright, minleft, null);
                                                                                             minus.addChildren(exp);
                                                                                             res.addChildren(minus);
                                                                                             RESULT = res; 
                                                                                          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BASIC_EXPRESSION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // BASIC_EXPRESSION ::= BASIC_EXPRESSION BASIC_OPERATOR BASIC_EXPRESSION 
            {
              Node RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node exp1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node exp2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Node res = new Node("basic expression");
                                                                                             Node exp = new Node(String.valueOf(op), opright, opleft, null);
                                                                                             exp.addChildren(exp1); 
                                                                                             exp.addChildren(exp2);
                                                                                             res.addChildren(exp);
                                                                                             RESULT = res; 
                                                                                          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BASIC_EXPRESSION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // RELATIONAL_OPERATOR ::= lesserEquals 
            {
              Object RESULT =null;
		 RESULT = "<="; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELATIONAL_OPERATOR",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // RELATIONAL_OPERATOR ::= lesser 
            {
              Object RESULT =null;
		 RESULT = "<"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELATIONAL_OPERATOR",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // RELATIONAL_OPERATOR ::= greaterEquals 
            {
              Object RESULT =null;
		 RESULT = ">="; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELATIONAL_OPERATOR",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // RELATIONAL_OPERATOR ::= greater 
            {
              Object RESULT =null;
		 RESULT = ">"; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELATIONAL_OPERATOR",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // RELATIONAL_OPERATOR ::= notEquals 
            {
              Object RESULT =null;
		 RESULT = "!="; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELATIONAL_OPERATOR",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // RELATIONAL_OPERATOR ::= equals 
            {
              Object RESULT =null;
		 RESULT = "=="; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELATIONAL_OPERATOR",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // COMPARATIVE_EXPRESSION ::= BASIC_EXPRESSION 
            {
              Node RESULT =null;
		int basicleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int basicright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node basic = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = basic; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMPARATIVE_EXPRESSION",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // COMPARATIVE_EXPRESSION ::= COMPARATIVE_EXPRESSION RELATIONAL_OPERATOR COMPARATIVE_EXPRESSION 
            {
              Node RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node exp1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node exp2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Node res = new Node("relational expression");
                                                                                                                 Node exp = new Node(String.valueOf(op), opright, opleft, null);
                                                                                                                 exp.addChildren(exp1); 
                                                                                                                 exp.addChildren(exp2);
                                                                                                                 res.addChildren(exp);
                                                                                                                 RESULT = res; 
                                                                                                              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("COMPARATIVE_EXPRESSION",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // LOGICAL_EXPRESSION ::= COMPARATIVE_EXPRESSION 
            {
              Node RESULT =null;
		int compleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int compright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node comp = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = comp; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOGICAL_EXPRESSION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // LOGICAL_EXPRESSION ::= not LOGICAL_EXPRESSION 
            {
              Node RESULT =null;
		int negleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int negright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object neg = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int logleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int logright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node log = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Node res = new Node("logical expression");
                                                                                         Node no = new Node("!", negright, negleft, null);
                                                                                         no.addChildren(log);
                                                                                         res.addChildren(no);
                                                                                         RESULT = res; 
                                                                                      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOGICAL_EXPRESSION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LOGICAL_EXPRESSION ::= LOGICAL_EXPRESSION or LOGICAL_EXPRESSION 
            {
              Node RESULT =null;
		int log1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int log1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node log1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int disleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int disright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object dis = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int log2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int log2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node log2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Node res = new Node("logical expression"); 
                                                                                         Node oro = new Node("|", disright, disleft, null);
                                                                                         oro.addChildren(log1); 
                                                                                         oro.addChildren(log2);
                                                                                         res.addChildren(oro);
                                                                                         RESULT = res; 
                                                                                      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOGICAL_EXPRESSION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LOGICAL_EXPRESSION ::= LOGICAL_EXPRESSION and LOGICAL_EXPRESSION 
            {
              Node RESULT =null;
		int log1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int log1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node log1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int conleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int conright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object con = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int log2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int log2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node log2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Node res = new Node("logical expression"); 
                                                                                         Node andy = new Node("&", conright, conleft, null);
                                                                                         andy.addChildren(log1); 
                                                                                         andy.addChildren(log2);
                                                                                         res.addChildren(andy);
                                                                                         RESULT = res; 
                                                                                      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOGICAL_EXPRESSION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TERNARY_EXPRESSION ::= LOGICAL_EXPRESSION 
            {
              Node RESULT =null;
		int logleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int logright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node log = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = log; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERNARY_EXPRESSION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TERNARY_EXPRESSION ::= TERNARY_EXPRESSION ternary TERNARY_EXPRESSION colon TERNARY_EXPRESSION 
            {
              Node RESULT =null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Node exp1 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int terleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int terright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object ter = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node exp2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int colleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int colright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object col = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exp3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int exp3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node exp3 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Node res = new Node("ternary expression");
                                                                                                                         Node tern = new Node("?", terright, terleft, null);
                                                                                                                         tern.addChildren(exp1);
                                                                                                                         Node colon = new Node(":", colright, colleft, null);
                                                                                                                         colon.addChildren(exp2); 
                                                                                                                         colon.addChildren(exp3);
                                                                                                                         res.addChildren(tern);
                                                                                                                         res.addChildren(colon);
                                                                                                                         RESULT = res; 
                                                                                                                       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TERNARY_EXPRESSION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ASIGNMENT_OPTIONS ::= id 
            {
              Node RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Node opt = new Node("asignment option", idright, idleft, null);
                                                                   Node ident = new Node("identifier", idright, idleft, String.valueOf(id));
                                                                   opt.addChildren(ident);
                                                                   RESULT = opt;    
                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGNMENT_OPTIONS",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ASIGNMENT ::= ASIGNMENT_OPTIONS valAsignment TERNARY_EXPRESSION 
            {
              Node RESULT =null;
		int optleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int optright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Node opt = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node value = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Node asig = new Node("asignment", optright, optleft, null);
                                                                                                 asig.addChildren(opt);
                                                                                                 asig.addChildren(new Node("=", vright, vleft, null));
                                                                                                 asig.addChildren(value);
                                                                                                 RESULT = asig; 
                                                                                              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGNMENT",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ASIGNMENT ::= ASIGNMENT_OPTIONS valAsignment TERNARY_EXPRESSION semicolon 
            {
              Node RESULT =null;
		int optleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int optright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Node opt = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int valueleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int valueright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node value = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 Node asig = new Node("asignment");
                                                                                                 asig.addChildren(opt);
                                                                                                 asig.addChildren(new Node("=", vright, vleft, null));
                                                                                                 asig.addChildren(value);
                                                                                                 RESULT = asig;
                                                                                              
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGNMENT",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCES_BLOCK ::= openingCurly SENTENCES_LIST closingCurly 
            {
              Node RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node sent = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = sent; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCES_BLOCK",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCE ::= CONTINUE_SENTENCE 
            {
              Node RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node sent = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = sent; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCE",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCE ::= BREAK_SENTENCE 
            {
              Node RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node sent = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = sent; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCE",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCE ::= FUNCTION_DECL 
            {
              Node RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node sent = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = sent; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCE",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCE ::= RETURN_SENTENCE 
            {
              Node RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node sent = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = sent; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCE",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCE ::= FOR_SENTENCE 
            {
              Node RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node sent = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = sent; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCE",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCE ::= DOWHILE_SENTENCE 
            {
              Node RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node sent = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = sent; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCE",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCE ::= WHILE_SENTENCE 
            {
              Node RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node sent = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = sent; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCE",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCE ::= SWITCH_SENTENCE 
            {
              Node RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node sent = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = sent; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCE",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCE ::= IF_SENTENCE 
            {
              Node RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node sent = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = sent; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCE",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCE ::= FUNCTION_CALL 
            {
              Node RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node sent = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = sent; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCE",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCE ::= ASIGNMENT 
            {
              Node RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node sent = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = sent; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCE",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCES_LIST ::= SENTENCE 
            {
              Node RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node sent = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Node sentences = new Node("sentences"); 
                                                                   sentences.addChildren(sent);
                                                                   RESULT = sentences;
                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCES_LIST",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SENTENCES_LIST ::= SENTENCES_LIST SENTENCE 
            {
              Node RESULT =null;
		int sentleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sentright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node sent = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sent2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sent2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node sent2 = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Node sentences = new Node("sentences"); 
                                                                   transferChildren(sent, sentences); 
                                                                   sentences.addChildren(sent2);
                                                                   RESULT = sentences; 
                                                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCES_LIST",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // ROOT ::= SENTENCES_LIST 
            {
              Node RESULT =null;
		int rootleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int rootright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Node root = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 Node rut = new Node("root"); 
                                   rut.addChildren(root);
                                   parser.root = rut;
                                   System.out.println("Si estoy llegando a la raiz");
                                   RESULT = rut;
                                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ROOT",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= ROOT EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Node start_val = (Node)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

